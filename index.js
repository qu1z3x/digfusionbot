import TelegramBot from "node-telegram-bot-api";
import cron from "node-cron";
import fs from "fs";

import {
	sendDataAboutText,
	sendDataAboutButton,
	sendDataAboutError,
	sendDataAboutDataBase,
} from "./tgterminal.js";

import { config } from "./config.js";

const TOKEN = config.TOKENs[1]; // 1 - –æ—Ä–∏–≥–∏–Ω–∞–ª
const bot = new TelegramBot(TOKEN, { polling: true });

const qu1z3xId = "923690530";
const digsupportId = "923690530";

let BotName = "digfusionbot";

let usersData = [];
let systemData = {
	feedbacksAllTime: 0,
	activityAllTime: 0,
};

let services = [
	//? –ë–û–¢–´

	{
		name: `–û–¥–Ω–æ—Ç–∏–ø–Ω—ã–π –±–æ—Ç`,
		moreAbout:
			"–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.",
		executionDate: "1 - 5 –¥–Ω–µ–π",
		lifeTime: "",
		firstPrice: 8000,
		price: 4990,
		priceSentence: "",
		type: "bot",
	},
	{
		name: `–ë–æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞`,
		moreAbout:
			"–û–¥–∏–Ω –≤–µ–¥—É—â–∏–π —Ä–∞–∑–¥–µ–ª —Å –≥–ª–∞–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ª—é–±–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. –ë–∞–∑–æ–≤–æ—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.",
		executionDate: "3 - 8 –¥–Ω–µ–π",
		lifeTime: "",
		firstPrice: 15000,
		price: 9990,
		priceSentence: "",
		type: "bot",
	},
	{
		name: `–°–ª–æ–∂–Ω–æ—Å–æ—Å—Ç–∞–≤–Ω–æ–π –±–æ—Ç`,
		moreAbout:
			"–ü–æ–ª–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞, —Å–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ä–∞–∑–¥–µ–ª–æ–≤, –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è. –°–ª–æ–∂–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.",
		executionDate: "8 –∏ –±–æ–ª—å—à–µ –¥–Ω–µ–π",
		lifeTime: "",
		firstPrice: 20000,
		price: 14990,
		priceSentence: "",
		type: "bot",
	},

	//? –°–ï–†–í–ï–†–´

	// –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Ö, –∫–æ–º—É –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –∑–∞–º–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º.

	{
		name: `–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä`,
		variations: [
			{
				name: "1 –Ω–µ–¥",
				moreAbout:
					"–ù–µ–¥–µ–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞—à–µ–º –ú–û–©–ù–û–ú —Ö–æ—Å—Ç–∏–Ω–≥–µ, —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞!",
				location: "–ú–æ—Å–∫–≤–∞ üá∑üá∫",
				lifeTime: "7 –¥–Ω–µ–π",
				firstPrice: 0,
				price: 169, // 130 —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
				priceSentence: "",
			},
			{
				name: "1 –º–µ—Å",
				moreAbout:
					"–ú–µ—Å—è—Ü —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞—à–µ–º –ú–û–©–ù–û–ú —Ö–æ—Å—Ç–∏–Ω–≥–µ, —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞!",
				location: "–ú–æ—Å–∫–≤–∞ üá∑üá∫",
				lifeTime: "30 –¥–Ω–µ–π",
				firstPrice: 0, // 750
				price: 699, // 670
				priceSentence: "",
			},
			{
				name: "3 –º–µ—Å",
				moreAbout:
					"–¢—Ä–∏ –º–µ—Å—è—Ü–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞—à–µ–º –ú–û–©–ù–û–ú —Ö–æ—Å—Ç–∏–Ω–≥–µ, —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞!",
				location: "–ú–æ—Å–∫–≤–∞ üá∑üá∫",
				lifeTime: "90 –¥–Ω–µ–π",
				firstPrice: 0, //
				price: 1990, //
				priceSentence: "",
			},
			{
				name: "6 –º–µ—Å",
				moreAbout:
					"–®–µ—Å—Ç—å –º–µ—Å—è—Ü–µ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞—à–µ–º –ú–û–©–ù–û–ú —Ö–æ—Å—Ç–∏–Ω–≥–µ, —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞!",
				location: "–ú–æ—Å–∫–≤–∞ üá∑üá∫",
				lifeTime: "180 –¥–Ω–µ–π",
				firstPrice: 0, // 4400
				price: 4199, // 3990
				priceSentence: "",
			},
		],
		type: "server",
	},
	{
		name: `–°–µ—Ä–≤–µ—Ä –∑–∞ —Ä—É–±–µ–∂–æ–º`,
		variations: [
			{
				name: "1 –Ω–µ–¥",
				moreAbout:
					"–ù–µ–¥–µ–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞—à–µ–º –ú–û–©–ù–û–ú –∑–∞—Ä—É–±–µ–∂–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ. –ù—É–∂–µ–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ ChatGPT –∏ —Ç–¥",
				location: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±",
				lifeTime: "7 –¥–Ω–µ–π",
				firstPrice: 0,
				price: 199, // 180 —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
				priceSentence: "",
			},
			{
				name: "1 –º–µ—Å",
				moreAbout:
					"–ú–µ—Å—è—Ü —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞—à–µ–º –ú–û–©–ù–û–ú –∑–∞—Ä—É–±–µ–∂–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ. –ù—É–∂–µ–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ ChatGPT –∏ —Ç–¥",
				location: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±",
				lifeTime: "30 –¥–Ω–µ–π",
				firstPrice: 0, // 850
				price: 799, // 799 (760 —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å)
				priceSentence: "",
			},
			{
				name: "3 –º–µ—Å",
				moreAbout:
					"–¢—Ä–∏ –º–µ—Å—è—Ü–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞—à–µ–º –ú–û–©–ù–û–ú –∑–∞—Ä—É–±–µ–∂–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ. –ù—É–∂–µ–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ ChatGPT –∏ —Ç–¥",
				location: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±",
				lifeTime: "90 –¥–Ω–µ–π",
				firstPrice: 0, //
				price: 2399, // (2280 —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å)
				priceSentence: "",
			},
			{
				name: "6 –º–µ—Å",
				moreAbout:
					"–®–µ—Å—Ç—å –º–µ—Å—è—Ü–µ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞—à–µ–º –ú–û–©–ù–û–ú –∑–∞—Ä—É–±–µ–∂–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ. –ù—É–∂–µ–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ ChatGPT –∏ —Ç–¥",
				location: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±",
				lifeTime: "180 –¥–Ω–µ–π",
				firstPrice: 0, // 5200
				price: 4990, // 4990 (4628 —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å)
				priceSentence: "",
			},
		],
		type: "server",
	},
];

if (services)
	//? –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –°–¢–†–û–ß–ö–ò –ü–†–ê–ô–°–ê
	for (let i = 0; i < services.length; i++) {
		const obj = services[i];

		if (obj.type == "bot") {
			obj.priceSentence = `${
				obj.firstPrice
					? `<s>${obj.firstPrice}</s> <b><i>${obj.price}‚ÇΩ (-${Math.floor(
							((obj.firstPrice - obj.price) / obj.firstPrice) * 100
						)}%)</i></b>`
					: `<b><i>${obj.price}‚ÇΩ</i></b>`
			}`;
		}
		if (obj.type == "server") {
			for (let j = 0; j < obj.variations.length; j++) {
				const element = obj.variations[j];

				element.priceSentence = `${
					element.firstPrice
						? `<s>${element.firstPrice}</s> <b><i>${
								element.price
							}‚ÇΩ (–≤—ã–≥–æ–¥–∞ ${Math.round((element.firstPrice - element.price) / 10) * 10}‚ÇΩ)</i></b>`
						: `<b><i>${element.price}‚ÇΩ</i></b>`
				}`;
			}
		}
	}

const ourProjects = [
	{
		name: `–ù–µ–π—Ä–æ–ú–µ—Ç–æ–¥ –¥–ª—è –ò–í–õ–ò–ï–í–û–ô üßë‚Äçüî¨`,
		botName: "neuro_method_bot",
		moreAboutText: `üî• –ò–ò –ø–æ –ú–µ—Ç–æ–¥—É –ò–≤–ª–∏–µ–≤–æ–π ‚Äî –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—É—Ä—Å–∞ –ú–ï–¢–û–î. –ó–∞–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏—è–º —Å –ò–ò.`,
		serviceSentence: `${services[2].name} - <a href="https://t.me/${BotName}/?start=catalogOfServices${2}">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> <b><i>${35000}‚ÇΩ  (–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è)</i></b>`,
	},
	{
		name: `–ø—Ä–æ–≤–µ—Ä—áÃÅ–∏–∫ ‚úíÔ∏è`,
		botName: "digtionary",
		moreAboutText: `–°–∞–º—ã–π –º–æ—â–Ω—ã–π –ò–ò –≤ –º–∏—Ä–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏! –ü—Ä–∏—Å—ã–ª–∞–µ—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç - –æ–Ω –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç –∏ –æ–±—å—è—Å–Ω–∏—Ç`,
		serviceSentence: `${services[1].name} - <a href="https://t.me/${BotName}/?start=catalogOfServices${2}">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${services[1].priceSentence}`,
	},
	{
		name: `–ù–µ–π—Ä–æ ‚ú®`,
		botName: "digneurobot",
		moreAboutText: `–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–±–æ—Ç—ã —Å –ò–ò. –ü–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ, —É–ø—Ä–æ—â–∞—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–æ–≤–µ–π—à–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏`,
		serviceSentence: `${services[1].name} - <a href="https://t.me/${BotName}/?start=catalogOfServices${2}">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${services[1].priceSentence}`,
	},
	{
		name: `–ê–¢–õ–ê–ù–¢ –¥–ª—è –ê–ü–û–õ–õ–û ü§µ‚Äç‚ôÇÔ∏è`,
		botName: "atlasum_bot",
		moreAboutText: `üî• –ò–ò-—Ç—Ä–µ–Ω–µ—Ä –ê–ü–û–õ–õ–û ‚Äî –±–ª–æ–≥–µ—Ä–∞ –ø–æ–ª—É–º–∏–ª–ª–∏–æ–Ω–Ω–∏–∫–∞ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–ª–æ, –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å`,
		serviceSentence: `${services[2].name} - <a href="https://t.me/${BotName}/?start=catalogOfServices${2}">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${services[2].priceSentence}`,
	},
	{
		name: `KungFuFighter ü•ä`,
		botName: "KungFuFighter_bot",
		moreAboutText: `–£–∑–Ω–∞–π—Ç–µ –≤—Å—ë –æ –∫–ª—É–±–µ Kung-Fu Fighter –∑–∞ —Å–µ–∫—É–Ω–¥—ã —Å –ò–ò! –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω—ã, —Ç—Ä–µ–Ω–µ—Ä—ã - –í–°–ï!`,
		serviceSentence: `${services[2].name} - <a href="https://t.me/${BotName}/?start=catalogOfServices${3}">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${services[2].priceSentence}`,
	},

	{
		name: `–¶–∏—Ñ—Ä–æ–≤–∏—á–æ–∫ üè´`,
		botName: "digschbot",
		moreAboutText: `–®–∫–æ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —É–ø—Ä–æ—â–∞—é—â–∏–π —É—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —à–∫–æ–ª—å–Ω–æ–º—É –ø–æ—Ä—Ç–∞–ª—É –≤ Telegram`,
		serviceSentence: `${services[2].name} - <a href="https://t.me/${BotName}/?start=catalogOfServices${3}">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${services[2].priceSentence}`,
	},
	{
		name: `digfusion | —É—Å–ª—É–≥–∏ ‚òëÔ∏è`,
		botName: "digfusionbot",
		moreAboutText: `–î–∞, —ç—Ç–æ –Ω–∞—à –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –°–µ—Ä—å—ë–∑–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞, –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤.`,
		serviceSentence: `${services[2].name} - <a href="https://t.me/${BotName}/?start=catalogOfServices${3}">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${services[2].priceSentence}`,
	},
	{
		name: `–ê–ª–≥–µ–±—Ä–∞–≤–∏—á–æ–∫ üßÆ`,
		botName: "digmathbot",
		moreAboutText: `–õ–∏—á–Ω—ã–π —Ä–µ–ø–∏—Ç–∏—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∫–∏ –ø–æ –≤–∞—à–µ–º—É —É—Ä–æ–≤–Ω—é –∑–Ω–∞–Ω–∏–π. –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å—á—ë—Ç–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ —Ñ–æ—Ä–º–µ.`,
		serviceSentence: `${services[1].name} - <a href="https://t.me/${BotName}/?start=catalogOfServices${2}">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${services[1].priceSentence}`,
	},
	{
		name: `–°–ø–æ—Ä—Ç–∏–≤–∏—á–æ–∫ üèÄ`,
		botName: "digjudgebot",
		moreAboutText: `–ò–¥–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç—è–∑–∞–Ω–∏–π! –û–Ω –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—á–µ—Ç –º–∞—Ç—á–∞, –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–∏—è—Ö, —Å—á–µ—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã –∏ –º–Ω–æ–≥–æ–º –¥—Ä—É–≥–æ–º.`,
		serviceSentence: `${services[1].name} - <a href="https://t.me/${BotName}/?start=catalogOfServices${2}">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${services[1].priceSentence}`,
	},
];

let moreAboutUsText = [
	`<blockquote><b>üìÇ –ì—Ä–æ–º–∫–∏–µ –∫–µ–π—Å—ã</b>\n–° –Ω–∞–º–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ –ê–ü–û–õ–õ–û (500–∫ –ø–æ–¥–ø), –ò–í–õ–ò–ï–í–ê (400–∫ –ø–æ–¥–ø) –∏ –¥—Ä.\n\n<b>ü§ù –ü–æ—Å—Ç–æ–ø–ª–∞—Ç–∞</b>\n–†–∞—Å—á–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–æ–π –≤ 50%\n\n<b>üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ</b>\n–ó–¥–µ—Å—å –±–µ–∑ –∫–æ–Ω—Å–∫–∏—Ö —Ü–µ–Ω–Ω–∏–∫–æ–≤, –ø–ª–∞—Ç–∏—Ç–µ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ</blockquote>\n<b>–í–∞—à –ø—Ä–æ–µ–∫—Ç - –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞!</b>`,

	"<b>–≠—Ç–æ digfusion ‚Äî Telegram-–±–æ—Ç—ã –ø–æ–¥ –∫–ª—é—á</b>\n\n–ë—ã—Å—Ç—Ä–æ, –Ω–∞–¥–µ–∂–Ω–æ –∏ —Å —É–º–æ–º. –ù–∞–º –¥–æ–≤–µ—Ä—è—é—Ç <b>–ü–û–ü–£–õ–Ø–†–ù–´–ï –ª–∏—á–Ω–æ—Å—Ç–∏.</b> –ú—ã –¥–µ–ª–∞–µ–º <b>–Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç</b>\n\n<blockquote><i>üòÅ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∏–¥–µ—è - –º—ã –µ–µ —Ä–µ–∞–ª–∏–∑—É–µ–º!</i></blockquote>",

	`<b><blockquote><i><a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%B2%D1%8B-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D1%82%D1%8C-%D0%BE%D1%82-%D0%BD%D0%B0%D1%81">–ù–∞—à–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å–≤–∞</a>\n<a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%BC%D1%8B-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D0%B5%D0%BC-%D0%BE%D1%82-%D0%B2%D0%B0%D1%81">–ß—Ç–æ –º—ã –æ–∂–∏–¥–∞–µ–º –æ—Ç –≤–∞—Å</a>\n<a href="https://telegra.ph/digfusion--Politika-08-08#%D0%9F%D1%80%D0%B5%D0%B4%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D1%83%D1%81%D0%BB%D1%83%D0%B3">–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥</a>\n<a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A1%D0%B5%D1%80%D0%B2%D0%B5%D1%80-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0">–°–µ—Ä–≤–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞</a></i></blockquote></b>`,

	// "–û–∫–æ–ª–æ –≥–æ–¥–∞ <b>–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏</b> –ø–æ—Å–µ—â–∞–ª <b>–ú–æ—Å–∫–æ–≤—Å–∫—É—é –®–∫–æ–ª—É –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ (–ú–®–ü),</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–∏–º–∞—è—Å—å –∏ <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ</b> –ø–æ–≥—Ä—É–∂–∞—è—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—è <b>–ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è</b> —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤,</b> –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Å–æ–∑–¥–∞–≤–∞–ª –∏–∑ —Å–≤–æ–µ–≥–æ <b>–æ–≥—Ä–æ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –ø—Ä–µ—É—Å–ø–µ—Ç—å</b> –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏. –£–∂–µ —Å–µ–≥–æ–¥–Ω—è, —Å–ø—É—Å—Ç—è <b>–Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç</b> —Å –Ω–∞—á–∞–ª–∞ —Å–≤–æ–µ–π <b>–∫–∞—Ä—å–µ—Ä—ã –≤ IT</b> –æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç <b>–º–∞–∫—Å–∏–º—É–º</b> —Å–≤–æ–∏—Ö <b>–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π</b> –≤ <b><i>—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i></b> –∏ <i><b>–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥</b></i> –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —á–∞—Ç-–±–æ—Ç–æ–≤.\n\n–ù–æ, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ <b>–≤—ã–±–æ—Ä –æ—Ç—Ä–∞—Å–ª–∏ –Ω–µ –±—ã–ª –æ—á–µ–≤–∏–¥–Ω—ã–º,</b> —Å–Ω–∞—á–∞–ª–∞ —ç—Ç–æ –±—ã–ª–∞ <b>—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π,</b> –∑–∞—Ç–µ–º —É–ø–æ—Ä –Ω–∞ <b>–¥–∏—Å–∫—Ä–µ—Ç–Ω—É—é –º–∞—Ç–µ–º–∞—Ç–∏–∫—É,</b> –¥–∞–ª–µ–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ <b>–≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è Windows, gameDev,</b> –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º, –ø–æ –ø–æ—Ä—É—á–µ–Ω–∏—é <b>–≥–ª–∞–≤–Ω–æ–∫–æ–º–∞–Ω–¥—É—é—â–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ —à–∫–æ–ª—ã,</b> –æ–Ω —É–≥–ª—É–±–∏–ª—Å—è –≤ <b>–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—É—é</b> –∏ <b>—Å–ª–æ–∂–Ω—É—é –æ—Ç—Ä–∞—Å–ª—å</b> —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ ‚Äì <b>—Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–æ–≤ –≤ Telegram. –ü–æ—Ä—É—á–µ–Ω–∏–µ</b> –∑–∞–∫–ª—é—á–∞–ª–æ—Å—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ <b>—à–∫–æ–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞,</b> –∫–æ—Ç–æ—Ä—ã–π –±—ã <b>–ø–æ–∫–∞–∑—ã–≤–∞–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø–æ–º–∏–Ω–∞–ª –æ –∑–≤–æ–Ω–∫–∞—Ö, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –º–µ–Ω—é —Å—Ç–æ–ª–æ–≤–æ–π</b> –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ! –ï—Å–ª–∏ –≤—ã <b>–æ–∑–Ω–∞–∫–∞–º–ª–∏–≤–∞–ª–∏—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏,</b> —Ç–æ –Ω–µ —Å–ª–æ–∂–Ω–æ –¥–æ–≥–∞–¥–∞—Ç—å—Å—è, —ç—Ç–æ—Ç <b>–ø—Ä–æ—Ä—ã–≤–Ω–æ–π</b> –ø—Ä–æ–µ–∫—Ç ‚Äì <b>¬´–¶–∏—Ñ—Ä–æ–≤–∏—á–æ–∫¬ª,</b> –∫–æ—Ç–æ—Ä—ã–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≥–æ–¥–∏–ª—Å—è <b>–¥–µ—Å—è—Ç–∫–∞–º –ª—é–¥–µ–π –∫–∞–∫ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!</b>",

	// "\n\n<b>–í–æ–∑–Ω–∏–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å,</b> –æ—Ç–∫—É–¥–∞ –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–∞–∑–≤–∞–Ω–∏–µ <b>¬´digfusion¬ª?</b> –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ <b>¬´–¶–∏—Ñ—Ä–æ–≤–∏—á–∫–∞¬ª</b> —è –≤—ã–±–∏—Ä–∞–ª <b>–¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è,</b> –∏ <b>—Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö</b> –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–æ–º –±—ã–ª–∏ –∏–º–µ–Ω–∞, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ <b>–¥–≤—É—Ö —Å–ª–æ–≤ ‚Äì ¬´digital¬ª</b> –∏ <b>¬´school¬ª. Telegram</b> –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–ª <b>–ø–æ –¥–ª–∏–Ω–µ</b> –≤—Å–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑ —ç—Ç–∏—Ö <b>–ø–æ–ª–Ω—ã—Ö</b> —Å–ª–æ–≤ –∏–º–µ–Ω–∞, –ø–æ—ç—Ç–æ–º—É –≤ –≥–æ–ª–æ–≤—É –ø—Ä–∏—à–ª–∏ <b>–≥–µ–Ω–∏–∞–ª—å–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è,</b> —Ç–∞–∫–∏–µ –∫–∞–∫ <b>¬´dig¬ª</b> –∏ <b>¬´sch¬ª</b>, —á—Ç–æ –¥–∞–µ—Ç - <b>digsch</b>. <b>–í—Ç–æ—Ä—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º</b> –æ–∫–∞–∑–∞–ª—Å—è <b>¬´–°–ø–æ—Ä—Ç–∏–≤–∏—á–µ–∫¬ª,</b> –ø–æ –ø—Ä–æ—Å—å–±–µ <b>—Ñ–∏–∑—Ä—É–∫–∞,</b> –∏ –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è <b>—Å—É–¥–µ–π—Å—Ç–≤–∞,</b> —Å–ª–æ–≤–æ <b>¬´sch¬ª (school)</b> –º—ã –∑–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ <b>¬´judge¬ª</b>. –ò–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É <b>–≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∏</b> –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å <b>¬´dig¬ª (digital),</b> –∏ <b>–Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è</b> —Ç–æ–∂–µ –≤–∑—è–ª–∞ —Å–µ–±–µ —Ç–∞–∫—É—é <b>–æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏—Ä–º–µ–Ω–Ω—É—é –ø—Ä–∏—Å—Ç–∞–≤–∫—É!</b>\n\n<b>–ò–¥–µ—è –µ—ë –æ—Å–Ω–æ–≤–∞–Ω–∏—è</b> –≤–æ–∑–Ω–∏–∫–ª–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫, —Ö–æ—Ä–æ—à–æ –∑–∞–¥—É–º–∞–≤—à–∏—Å—å, –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å <b>–º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ</b> –∏ –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –Ω–µ —Ç–æ–ª—å–∫–æ <b>–∏–∑ —Å–≤–æ–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è,</b> –Ω–æ –∏ <b>–ø–æ –≤—Å–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.</b>\n\n<b>–í–æ—Ç –∏ –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º,</b> –º—ã –Ω–∏—á–µ–≥–æ <b>–Ω–µ –¥–µ—Ä–∂–∏–º –≤ —Å–µ–∫—Ä–µ—Ç–µ</b> –æ—Ç —Å–≤–æ–∏—Ö <b>–∫–ª–∏–µ–Ω—Ç–æ–≤! –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> –∏ <b>–≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã</b> –Ω–∞—Ö–æ–¥—è—Ç—Å—è <b>–Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏!</b> –ï—Å–ª–∏ –≤—ã <b>–Ω–∞–º –¥–æ–≤–µ—Ä—è–µ—Ç–µ</b> –∏ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ <b>–≤–µ—Å—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–ø–∞—Å–∏–±–æ –≤–∞–º –æ–≥—Ä–æ–º–Ω–æ–µ! –ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –≤–∞—Å! ‚ù§Ô∏è</b>",
];

bot.setMyCommands([
	{
		command: "/restart",
		description: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîÑÔ∏è",
	},
	{
		command: "/services",
		description: "–ö–∞—Ç–∞–ª–æ–≥ —Å –ò–ò ‚ú®",
	},
	{
		command: "/consultation",
		description: "–°–≤—è–∑—å üßë‚Äçüíª",
	},
	{
		command: "/profile",
		description: "–ü—Ä–æ—Ñ–∏–ª—å ‚öôÔ∏è",
	},
]);

let textToSayHello, match, rndId, clientChatId;

async function firstMeeting(chatId, stageNum = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	dataAboutUser.action = `firstMeeting${stageNum}`;

	try {
		switch (stageNum) {
			case 1:
				await bot.editMessageText(
					`<b>–ü—Ä–∏–≤–µ—Ç! üëã</b>\n${moreAboutUsText[1]}\n\n<b>–ü–æ—á–µ–º—É –Ω–∞—Å –≤—ã–±–∏—Ä–∞—é—Ç? üëá</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								// [
								// 	{
								// 		text: "–ß—Ç–æ —Ç–∞–∫–æ–µ —á–∞—Ç-–±–æ—Ç‚ùì",
								// 		callback_data: "firstMeeting5",
								// 	},
								// ],
								[
									{
										text: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚û°Ô∏è",
										callback_data: "firstMeeting2",
									},
								],
							],
						},
					}
				);
				break;
			case 2:
				await bot.editMessageText(
					`<b>–ü–æ—á–µ–º—É –Ω–∞—Å –≤—ã–±–∏—Ä–∞—é—Ç?</b>${moreAboutUsText[0]}\n\n<b>–î–∞–ª–µ–µ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é üëá</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								// [
								// 	{
								// 		text: "–ß—Ç–æ —Ç–∞–∫–æ–µ —á–∞—Ç-–±–æ—Ç‚ùì",
								// 		callback_data: "firstMeeting5",
								// 	},
								// ],
								[
									{
										text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
										callback_data: "firstMeeting1",
									},
									{
										text: "–î–∞–ª–µ–µ‚û°Ô∏è",
										callback_data: "firstMeeting3",
									},
								],
							],
						},
					}
				);
				break;
			case 3:
				menuHome(chatId, false, true);

				// dataAboutUser.action = "firstMeeting3";

				// await bot.editMessageText(
				// 	`<b>–ú—ã</b> —É–∂–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ <b>–æ —Å–µ–±–µ,</b> —Ç–µ–ø–µ—Ä—å <b>–≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!</b> üòä\n\n<b><a href="https://telegra.ph/digfusion--Politika-08-08">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ digfusion</a></b>\n<i>–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ –≤—Å–µ–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏ digfusion!</i>\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,</b> –Ω–∞–ø–∏—à–∏—Ç–µ <b>–∫–∞–∫ –º–æ–∂–Ω–æ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è</b> –¥–ª—è <b>–¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è?</b> ü§î`,
				// 	{
				// 		parse_mode: "html",
				// 		chat_id: chatId,
				// 		message_id: usersData.find(
				// 			(obj) => obj.chatId == chatId
				// 		).messageId,
				// 		disable_web_page_preview: true,
				// 		reply_markup: {
				// 			inline_keyboard: [
				// 				[
				// 					{
				// 						text: `–ò–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å ${dataAboutUser.login} ‚úÖ`,
				// 						callback_data: "firstMeeting4",
				// 					},
				// 				],
				// 				[
				// 					{
				// 						text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
				// 						callback_data: "firstMeeting2",
				// 					},
				// 				],
				// 			],
				// 		},
				// 	}
				// );
				break;
			case 4:
				// dataAboutUser.action = "firstMeeting4";
				// await bot.editMessageText(
				// 	`<b>${dataAboutUser.login},</b> –æ—á–µ–Ω—å –ø—Ä—è—Ç–Ω–æ! üòÅ\n\n–ù–∞ <b>–ø–æ—Å–ª–µ–¥–Ω–µ–º —ç—Ç–∞–ø–µ</b> —è –ø–æ–ø—Ä–æ—à—É <b>–≤–∞—Å</b> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –¥–ª—è <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.</b> üòä`,
				// 	{
				// 		parse_mode: "html",
				// 		chat_id: chatId,
				// 		message_id: usersData.find((obj) => obj.chatId == chatId)
				// 			.messageId,
				// 		disable_web_page_preview: true,
				// 		// reply_markup: {
				// 		// 	inline_keyboard: [[{ text: "", callback_data: "-" }]],
				// 		// },
				// 	}
				// );

				// await bot
				// 	.sendMessage(
				// 		chatId,
				// 		`–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>—É–¥–æ–±–Ω–æ–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ! ‚¨áÔ∏è</b>`,
				// 		{
				// 			parse_mode: "HTML",
				// 			disable_web_page_preview: true,
				// 			reply_markup: {
				// 				keyboard: [
				// 					[
				// 						{
				// 							text: "–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–º–µ—Ä",
				// 							request_contact: true,
				// 							resize_keyboard: true,
				// 						},
				// 					],
				// 				],
				// 			},
				// 		}
				// 	)
				// 	.then((message) => {
				// 		dataAboutUser.messageIdOther = message.message_id;
				// 	});

				break;
			case 5:
				// await bot.editMessageText(
				// 	`<b><i>–ß—Ç–æ —Ç–∞–∫–æ–µ —á–∞—Ç-–±–æ—Ç‚ùì</i></b>\n\n–≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, <b>–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å—ã</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–¥–∏–∞–ª–æ–≥–∞ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ,</b> —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ <b>—ç—Ç–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫,</b> —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ <b>–≤—ã</b> —á–∏—Ç–∞–µ—Ç–µ. üòä\n\n<blockquote>–¢–∞–∫–æ–π <b>–ø—Ä–æ–¥—É–∫—Ç –º–æ–∂–µ—Ç</b> —Å—Ç–∞—Ç—å –∫–∞–∫ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è <b>–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏,</b> —Ç–∞–∫ –∏ <b>–æ–±—ã—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–∫—Ü–∏–π</b>.</blockquote>\n<b>–í –ø—Ä–∏–º–µ—Ä</b> –º—ã –ø—Ä–∏–≤–µ–¥–µ–º –Ω–∞—à–∏ <b>—É—Å–ø–µ—à–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</b> ‚¨áÔ∏è`,
				// 	{
				// 		parse_mode: "html",
				// 		chat_id: chatId,
				// 		message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				// 		disable_web_page_preview: true,
				// 		reply_markup: {
				// 			inline_keyboard: [
				// 				[
				// 					{
				// 						text: ourProjects[1].name,
				// 						url: `https://t.me/${ourProjects[1].botName}`,
				// 					},
				// 				],
				// 				[
				// 					{
				// 						text: ourProjects[2].name,
				// 						url: `https://t.me/${ourProjects[2].botName}`,
				// 					},
				// 					{
				// 						text: ourProjects[5].name,
				// 						url: `https://t.me/${ourProjects[5].botName}`,
				// 					},
				// 				],
				// 				[
				// 					{
				// 						text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
				// 						callback_data:
				// 							dataAboutUser.action == "firstMeeting1"
				// 								? "firstMeeting1"
				// 								: dataAboutUser.action == "firstMeeting2"
				// 									? "firstMeeting2"
				// 									: "",
				// 					},
				// 				],
				// 			],
				// 		},
				// 	}
				// );
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function menuHome(chatId, navigationListIsActive = false, afterFirstMeeting = false) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	const dateNowHHNN = new Date().getHours() * 100 + new Date().getMinutes();

	if (dateNowHHNN < 1200 && dateNowHHNN >= 600) textToSayHello = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
	else if (dateNowHHNN < 1700 && dateNowHHNN >= 1200) textToSayHello = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
	else if (dateNowHHNN < 2200 && dateNowHHNN >= 1700) textToSayHello = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
	else if (dateNowHHNN >= 2200 || dateNowHHNN < 600) textToSayHello = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";

	try {
		dataAboutUser.supportiveCount = 1;

		dataAboutUser.currentFeedbackId = null;

		dataAboutUser.action = "menuHome";

		// 1 –≤–∞—Ä–∏–∞–Ω—Ç let navigationListText = `<b>"–ö–∞—Ç–∞–ª–æ–≥ —Å –ò–ò ‚ú®"</b> - —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, –∞ —Ç–∞–∫–∂–µ —É–¥–æ–±–Ω—ã–π –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ —Å –ò–ò.\n\n<b>"–ò–¥–µ–∏üí°"</b> - —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π –¥–ª—è –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n<b>"–°–≤—è–∑—å üßë‚Äçüíª"</b> - –≤ –∂–∏–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ –ø–æ–¥—Å–∫–∞–∂–µ–º –∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º –≤–∞—Å –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É!\n\n<b>"–ù–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã üì±"</b> - —Å–ø–∏—Å–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n<b>"–û –Ω–∞—Å üë•"</b> - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–π –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –∏ –Ω–∞—à–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö.\n\n<b>"–û—Ç–∑—ã–≤—ã üìß"</b> - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–Ω–µ–Ω–∏–π –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.\n\n<b>"–ü—Ä–æ—Ñ–∏–ª—å ‚öôÔ∏è"</b> - –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏ –ø—Ä–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.`;

		// 2 –≤–∞—Ä–∏–∞–Ω—Ç let navigationListText = `<b>"–ö–∞—Ç–∞–ª–æ–≥ —Å –ò–ò ‚ú®"</b> - —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, –∞ —Ç–∞–∫–∂–µ –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ —Å –ò–ò.\n\n<b>"–°–≤—è–∑—å üßë‚Äçüíª"</b> - –≤ –∂–∏–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ –ø–æ–¥—Å–∫–∞–∂–µ–º –∏ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!\n\n<b>"–ò–¥–µ–∏üí°"</b> - —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π –ø–æ–¥ –∫–∞–∂–¥—É—é –∏–∑ —É—Å–ª—É–≥.\n\n<b>"–ü—Ä–æ—Ñ–∏–ª—å ‚öôÔ∏è"</b> - –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å—Å–Ω–æ—Å—Ç–∏ –∏ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.`;

		// ${
		// 	navigationListIsActive
		// 		? `<b><a href="https://t.me/${BotName}/?start=hideNavigationListInMenuHome">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á©</a></b><blockquote>${navigationListText}<b>\n\n<a href="https://t.me/${BotName}/?start=hideNavigationListInMenuHome">–°–∫—Ä—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é</a></b></blockquote>`
		// 		: `<b><a href="https://t.me/${BotName}/?start=showNavigationListInMenuHome">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</a></b>`
		// }\n\n

		await bot.editMessageText(
			`${
				afterFirstMeeting
					? `<b>${dataAboutUser.login}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üôè</b>`
					: `<b>${textToSayHello}, ${dataAboutUser.login}!</b>`
			}\n\n<blockquote><b>–ù–∞—à–∞ –≥–æ—Ä–¥–æ—Å—Ç—å - <a href="https://digfusion.github.io/digfusion.ru/">digfusion.ru</a></b></blockquote>\n\n<b>–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ü§î</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ —Å –ò–ò ‚ú®",
								callback_data: "catalog0",
							},
						],
						[
							{
								text: "–û—Ç–∑—ã–≤—ã üìß",
								callback_data: "feedbacksList",
							},
							{
								text: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è üßë‚Äçüíª",
								callback_data: "consultation",
							},
						],
						[
							{
								text: "–ü—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç üî•",
								callback_data: "ourProjectsList1",
							},
						],
						[
							{
								text: "–ò–¥–µ–∏üí°",
								callback_data: "ideasForProjects",
							},
							{
								text: "–û –Ω–∞—Å üë•",
								callback_data: "moreAboutUs1",
							},
						],
						[
							{
								text: "–ü—Ä–æ—Ñ–∏–ª—å ‚öôÔ∏è",
								callback_data: "profile",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function catalogOfServices(chatId, catalogNum = 0) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	dataAboutUser.action = `catalog${catalogNum}`;
	try {
		let serviceNum =
			dataAboutUser.action === "catalog1"
				? dataAboutUser.selectedService?.bot?.serviceNum
				: dataAboutUser.selectedService?.server?.serviceNum;
		let variationNum = dataAboutUser.selectedService?.server?.variationNum;

		let text = "";
		switch (catalogNum) {
			case 0:
				await bot.editMessageText(
					`<b><i>üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ —Å –ò–ò üõí</i></b>\n\n<blockquote><b><i>üí•–£–¥–æ–±–Ω–µ–π—à–∏–π –ø–æ–¥–±–æ—Ä —É—Å–ª—É–≥–∏ —Å –ò–ò —É–∂–µ –∑–¥–µ—Å—å!</i></b></blockquote>\n\n<b>–ö–∞–∫–æ–π —Ç–∏–ø —É—Å–ª—É–≥ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω? ü§î</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `üî•–ü–æ–¥–±–æ—Ä —É—Å–ª—É–≥–∏ —Å –ò–ò ‚ú®`,
										callback_data: "aiSelector",
									},
								],
								[
									{
										text: "–ë–æ—Ç—ã ü§ñ",
										callback_data: "catalog1",
									},
									{
										text: "–°–µ—Ä–≤–µ—Ä—ã üíæ",
										callback_data: "catalog2",
									},
								],
								[
									{
										text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
										callback_data: "exit",
									},
								],
							],
						},
					}
				);
				break;
			case 1:
				text = "";
				for (let i = 1; i <= services.length; i++) {
					if (services[i - 1].type == "bot") {
						text += `${
							serviceNum == i
								? `\n\n<b>‚Ä¢ ${i}. ${
										services[serviceNum - 1].name
									} ‚Ä¢\n</b><blockquote><b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> ${services[serviceNum - 1].moreAbout}${
										services[serviceNum - 1].lifeTime
											? `\n\n<b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> ${
													services[serviceNum - 1].lifeTime
												}`
											: ``
									}${
										services[serviceNum - 1].executionDate
											? `\n\n<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> ${
													services[serviceNum - 1].executionDate
												} ‚åõ`
											: ``
									}\n\n<b>–¶–µ–Ω–∞:</b> ${services[serviceNum - 1].priceSentence} üí∞${
										serviceNum != 4
											? `\n\n<b><a href="https://t.me/${BotName}/?start=ideasForProjects">–ò–¥–µ–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞</a></b>`
											: ``
									}</blockquote>`
								: `\n\n<b><a href="https://t.me/${BotName}/?start=catalogOfServices${i}">${i}.</a> </b>${services[i - 1].name}${
										services[i - 1].firstPrice
											? `<i> (-${Math.floor(
													((services[i - 1].firstPrice -
														services[i - 1].price) /
														services[i - 1].firstPrice) *
														100
												)}%)</i>`
											: ``
									}`
						}`;
					}
				}

				await bot.editMessageText(
					`<b><i>üõí –ö–∞—Ç–∞–ª–æ–≥ ‚Ä¢ –ë–æ—Ç—ã ü§ñ</i></b>${text}\n\n<b><a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%B2%D1%8B-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D1%82%D1%8C-%D0%BE%D1%82-%D0%BD%D0%B0%D1%81">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ digfusion</a></b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `‚¨ÜÔ∏è`,
										callback_data: "previousServiceNum",
									},
									{
										text: `‚Ññ${serviceNum} ‚Ä¢ ${services[serviceNum - 1].price}‚ÇΩ`,
										callback_data: `warningOrderService`,
									},
									{
										text: `‚¨áÔ∏è`,
										callback_data: "nextServiceNum",
									},
								],
								[
									{
										text: `–í—ã–±—Ä–∞—Ç—å "${services[serviceNum - 1].name}" ‚úÖ`,
										callback_data: `warningOrderService`,
									},
								],
								[
									{
										text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
										callback_data: "catalog0",
									},
									{
										text: "–ò–¥–µ–∏üí°",
										callback_data: "ideasForProjects",
									},
								],
							],
						},
					}
				);
				break;
			case 2:
				text = "";
				for (let i = 1; i <= services.length; i++) {
					if (services[i - 1].type == "server") {
						const element = services[serviceNum - 1];

						text += `${
							serviceNum == i
								? `\n\n<b>‚Ä¢ ${i}. ${
										element.name
									} (${services[serviceNum - 1].variations[variationNum - 1].name}) ‚Ä¢\n</b><blockquote><b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> ${
										element.variations[variationNum - 1].moreAbout
									}\n\n<b>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> ${
										element.variations[variationNum - 1].location
									}\n<b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> ${
										element.variations[variationNum - 1].lifeTime
									} (${services[serviceNum - 1].variations[variationNum - 1].name})\n\n<b>–¶–µ–Ω–∞:</b> ${
										element.variations[variationNum - 1].priceSentence
									} üí∞</blockquote>`
								: `\n\n<b><a href="https://t.me/${BotName}/?start=catalogOfServices${i}">${i}.</a> </b>${services[i - 1].name}`
						}`;
					}
				}

				await bot.editMessageText(
					`<b><i>üõí –ö–∞—Ç–∞–ª–æ–≥ ‚Ä¢ –°–µ—Ä–≤–µ—Ä—ã üíæ</i></b>${text}\n\n<b><a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%B2%D1%8B-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D1%82%D1%8C-%D0%BE%D1%82-%D0%BD%D0%B0%D1%81">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ digfusion</a></b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									variationNum === 1
										? {
												text: `‚Ä¢ ${services[serviceNum - 1].variations[0].name} ‚Ä¢`,
												callback_data: "-",
											}
										: {
												text: services[serviceNum - 1].variations[0].name,
												callback_data: "variationNum1",
											},

									variationNum === 2
										? {
												text: `‚Ä¢ ${services[serviceNum - 1].variations[1].name} ‚Ä¢`,
												callback_data: "-",
											}
										: {
												text: services[serviceNum - 1].variations[1].name,
												callback_data: "variationNum2",
											},

									variationNum === 3
										? {
												text: `‚Ä¢ ${services[serviceNum - 1].variations[2].name} ‚Ä¢`,
												callback_data: "-",
											}
										: {
												text: services[serviceNum - 1].variations[2].name,
												callback_data: "variationNum3",
											},

									variationNum === 4
										? {
												text: `‚Ä¢ ${services[serviceNum - 1].variations[3].name} ‚Ä¢`,
												callback_data: "-",
											}
										: {
												text: services[serviceNum - 1].variations[3].name,
												callback_data: "variationNum4",
											},
								],
								[
									{
										text: `‚¨ÜÔ∏è`,
										callback_data: "previousServiceNum",
									},
									{
										text: `‚Ññ${serviceNum} ‚Ä¢ ${
											services[serviceNum - 1].variations[variationNum - 1]
												.price
										}‚ÇΩ`,
										callback_data: `warningOrderService`,
									},
									{
										text: `‚¨áÔ∏è`,
										callback_data: "nextServiceNum",
									},
								],
								[
									{
										text: `"${services[serviceNum - 1].name} (–Ω–∞ ${services[serviceNum - 1].variations[variationNum - 1].name})" ‚úÖ`,
										callback_data: `warningOrderService`,
									},
								],
								[
									{
										text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
										callback_data: "catalog0",
									},
								],
							],
						},
					}
				);
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function getResponse(chatId, request = null) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		const url = "https://openrouter.ai/api/v1/chat/completions";
		const headers = {
			Authorization: `Bearer ${config.metaKey}`, // API –∫–ª—é—á —Å —Å–∞–π—Ç–∞
			"Content-Type": "application/json",
		};

		const payload = {
			model: "meta-llama/llama-4-maverick",
			messages: [
				{
					role: "system", // —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
					content: "‚ùó–ù–ò–ß–ï–ì–û –ö–†–û–ú–ï –û–¢–í–ï–¢–ê JSON –†–ê–ó–ú–ï–¢–ö–û–ô!!!",
				},
				{
					role: "user", // –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					content: `–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${request}"
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫–∞–∫–∞—è –∏–∑ —Ç—Ä—ë—Ö —É—Å–ª—É–≥ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ–¥ –Ω–æ–º–µ—Ä–∞–º–∏ 1, 2 –∏–ª–∏ 3) –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º –ø–æ–¥–æ–π–¥—ë—Ç –¥–ª—è –∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π. –í–µ—Ä–Ω–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ JSON-–æ–±—ä–µ–∫—Ç –≤–∏–¥–∞:
{ 
    "serviceNum": <–Ω–æ–º–µ—Ä_—É—Å–ª—É–≥–∏_1_2_–∏–ª–∏_3_–∏–ª–∏_null>, 
    "explanation": "<–∫—Ä–∞—Ç–∫–æ–µ_–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ_–ø—Ä–∏—á–∏–Ω>" 
}

!!–ò–ù–°–¢–†–£–ö–¶–ò–Ø:

1. –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 1. –û–¥–Ω–æ—Ç–∏–ø–Ω—ã–π –±–æ—Ç (–î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–∞–∫ \n‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ FAQ\n‚Ä¢ –ó–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n‚Ä¢ –°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —É—Å–ª—É–≥–∏ –∏ —Ç.–¥.), –≤–µ—Ä–Ω–∏—Ç–µ:
{ 
    "serviceNum": 1, 
    "explanation": "–≠—Ç–∞ —É—Å–ª—É–≥–∞ –ø–æ–¥–æ–π–¥—ë—Ç, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–∞–∫–∞—è –∫–∞–∫ [–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏]" 
} 

2. –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 2. –ë–æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞ (–î–ª—è –æ–¥–Ω–æ–≥–æ –≤–µ–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫, \n‚Ä¢ –û–±—å—è–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–π/–Ω–æ–≤–æ—Å—Ç–µ–π\n‚Ä¢ –ü–æ–º–æ—â–Ω–∏–∫ ChatGPT\n‚Ä¢ –ê–ª–µ—Ä—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤), –≤–µ—Ä–Ω–∏—Ç–µ:
{ 
    "serviceNum": 2, 
    "explanation": "–≠—Ç–∞ —É—Å–ª—É–≥–∞ –ø–æ–¥–æ–π–¥—ë—Ç, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, —Ç–∞–∫–æ–π –∫–∞–∫ [–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏]" 
}

3. –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 3. –°–ª–æ–∂–Ω–æ—Å–æ—Å—Ç–∞–≤–Ω–æ–π –±–æ—Ç (–ü–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, \n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω\n‚Ä¢ –û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞/–∫—É—Ä—Å\n‚Ä¢ –°–ª–æ–∂–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ò–ò –∏ —Ç.–¥.), –≤–µ—Ä–Ω–∏—Ç–µ:
{ 
    "serviceNum": 3, 
    "explanation": "–≠—Ç–∞ —É—Å–ª—É–≥–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç –≤–∞–º, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è [–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ä–∞–∑–¥–µ–ª—ã, –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ —Ç.–¥.]" 
}

4. –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ª–∏–±–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü—Ä–∏–≤–µ—Ç", "–ö–∞–∫–æ–π –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏?", "–°–¥–µ–ª–∞–π –±–æ—Ç–∞"), –≤–µ—Ä–Ω–∏—Ç–µ:
{ 
    "serviceNum": null, 
    "explanation": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —É—Å–ª—É–≥—É."
}

5. –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ, –Ω–æ –µ—Å—Ç—å —á–∞—Å—Ç–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–∞—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
{ 
    "serviceNum": null, 
    "explanation": "–ú–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ. [–ß—Ç–æ –Ω–∞–¥–æ —É—Ç–æ—á–Ω–∏—Ç—å]"
}`,
				},
			],
		};

		const response = await fetch(url, {
			method: "POST",
			headers,
			body: JSON.stringify(payload),
		});

		const data = await response.json();

		return data.choices[0].message.content;
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}\n\n‚ùóGPT_ERROR`);

		return {
			serviceNum: null,
			explanation: "GPT_ERROR",
		};
	}
}

async function aiSelector(chatId, request = null) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.action = `aiSelector`;

		if (request) dataAboutUser.aiSelectorData.request = request;

		await bot.editMessageText(
			`<b>üõí –ü–æ–¥–±–æ—Ä —É—Å–ª—É–≥–∏ —Å –ò–ò ‚ú®</b>\n\n${dataAboutUser.aiSelectorData?.request ? (dataAboutUser.aiSelectorData?.response?.explanation == "GPT_ERROR" ? `<b><i>‚ùå –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –ù–µ–π—Ä–æ —Å–µ–π—á–∞—Å –≤ –æ—Ç–ø—É—Å–∫–µ, –Ω–æ –æ–Ω –≤–µ—Ä–Ω–µ—Ç—Å—è!</i>\n\n<a href="https://t.me/qu1z3x">üëâ –ü–û–ú–û–ñ–ï–ú –í –ü–ï–†–ï–ü–ò–°–ö–ï</a></b>` : `<b>‚úçÔ∏è –í–∞—à –∑–∞–ø—Ä–æ—Å:</b>\n<blockquote><i>${dataAboutUser.aiSelectorData.request}</i></blockquote>\n\n<b>‚ú®–û—Ç–≤–µ—Ç –æ—Ç –ò–ò:</b>\n<blockquote><i>${dataAboutUser.aiSelectorData?.response ? `${dataAboutUser.aiSelectorData?.response?.serviceNum ? `–ö –≤–∞—à–∏–º –∑–∞–¥–∞—á–∞–º —É—Å–ª—É–≥–∞: <b>"${services[dataAboutUser.aiSelectorData.response.serviceNum - 1].name}"!</b>` : `<b>–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Å–ª—É–≥—É! üòì</b>`}\n\n${dataAboutUser.aiSelectorData.response.explanation}` : `–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é, —Å–µ–∫—É–Ω–¥—É.. ‚åõ`}</i></blockquote>\n\n<b>–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç, –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è üëÜ</b>`) : `<i><b>–≠—Ç–æ <a href="https://t.me/digneurobot">–ù–µ–π—Ä–æ-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç,</a></b> –Ω–∞—à –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–µ–∫—Ç —Å —É–∫–ª–æ–Ω–æ–º –Ω–∞ –ø–æ–¥–±–æ—Ä —É—Å–ª—É–≥ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º.</i>\n\n<b>–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω—É–∂–Ω–æ –ø–æ–∫—Ä—ã—Ç—å? ‚úçÔ∏è</b>`}`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							dataAboutUser.aiSelectorData?.response?.serviceNum
								? {
										text: `–í—ã–±—Ä–∞—Ç—å "${services[dataAboutUser.aiSelectorData.response.serviceNum - 1].name}" ‚úÖ`,
										callback_data: `warningOrderService`,
									}
								: dataAboutUser.aiSelectorData?.response?.explanation == "GPT_ERROR"
									? {
											text: "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º (–≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã) üí≠",
											url: "https://t.me/qu1z3x",
										}
									: {
											text: ``,
											callback_data: `-`,
										},
						],
						[
							{
								text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`,
								callback_data: `catalog0`,
							},
							dataAboutUser.aiSelectorData?.response?.serviceNum ||
							dataAboutUser.aiSelectorData?.response?.explanation
								? {
										text: `–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üîÑÔ∏è`,
										callback_data: `resetAiSelector`,
									}
								: {
										text: ``,
										callback_data: `-`,
									},

							// {
							// 	text: `–î–∏–∞–ª–æ–≥ üß†`,
							// 	url: "https://t.me/digneurobot",
							// },
						],
					],
				},
			}
		);

		if (request) {
			bot.sendChatAction(chatId, "typing");

			dataAboutUser.aiSelectorData.response = JSON.parse(
				(await getResponse(chatId, request))
					.replace("```", "")
					.replace("```", "")
					.replace("json", "")
					.replace("JSON", "")
					.replace(/\„Äê.*?„Äë/g, "")
			);

			dataAboutUser.selectedService.bot.serviceNum = dataAboutUser.aiSelectorData?.response
				?.serviceNum
				? dataAboutUser.aiSelectorData.response.serviceNum
				: null;

			dataAboutUser.selectedService.server.variationNum = 1;

			bot.sendChatAction(chatId, "cancel");

			if (dataAboutUser.action == "aiSelector") {
				aiSelector(chatId);
			}
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function ideasForProjects(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	dataAboutUser.action = "ideasForProjects";
	try {
		await bot.editMessageText(
			`<b><i>üí≠ –ò–¥–µ–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞üí°</i></b>\n\n–ú—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏ <b><i>–Ω–µ–±–æ–ª—å—à–æ–π</i> —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π –¥–ª—è –Ω–∞—à–∏—Ö —É—Å–ª—É–≥:\n\n1. ${services[0].name}</b> - <a href="https://t.me/${BotName}/?start=catalogOfServices1">–∫ —É—Å–ª—É–≥–µ</a><b><blockquote>–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:\n‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n‚Ä¢ –ó–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ FAQ</blockquote>\n2. ${services[1].name}</b> - <a href="https://t.me/${BotName}/?start=catalogOfServices2">–∫ —É—Å–ª—É–≥–µ</a><b><blockquote>–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:\n‚Ä¢ –û–±—å—è–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–π/–Ω–æ–≤–æ—Å—Ç–µ–π\n‚Ä¢ –ü–æ–º–æ—â–Ω–∏–∫ ChatGPT\n‚Ä¢ –ê–ª–µ—Ä—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤</blockquote>\n3. ${services[2].name}</b> - <a href="https://t.me/${BotName}/?start=catalogOfServices3">–∫ —É—Å–ª—É–≥–µ</a><b><blockquote>–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:\n‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω\n‚Ä¢ –û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞/–∫—É—Ä—Å\n‚Ä¢ –°–ª–æ–∂–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ò–ò</blockquote>\n\n–ü–æ—è–≤–∏–ª–∏—Å—å –º—ã—Å–ª–∏? - –°–∫–æ—Ä–µ–µ –ø–∏—à–∏—Ç–µ!! ‚ò∫Ô∏è</b> `,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ —Å –ò–ò ‚ú®",
								callback_data: "catalog0",
							},
						],
						[
							{
								text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
								callback_data: "exit",
							},
							{
								text: "–°–≤—è–∑—å üßë‚Äçüíª",
								callback_data: "consultation",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function orderService(chatId, stageNum) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		let serviceNum =
			dataAboutUser.action != "catalog2"
				? dataAboutUser.selectedService.bot.serviceNum
				: dataAboutUser.selectedService.server.serviceNum;
		let variationNum = dataAboutUser.selectedService.server.variationNum;

		const element = services[serviceNum - 1];

		// \n\n<b><a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%B2%D1%8B-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D1%82%D1%8C-%D0%BE%D1%82-%D0%BD%D0%B0%D1%81">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ digfusion</a></b>\n<i>–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ –≤—Å–µ–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏ digfusion!</i>

		switch (stageNum) {
			case 1:
				await bot.editMessageText(
					`<b>${dataAboutUser.login},</b> –≤—ã –≤—ã–±—Ä–∞–ª–∏ ${
						dataAboutUser.action != "catalog2"
							? `<b>—É—Å–ª—É–≥—É ‚Ññ${serviceNum}:\n\n<a href="https://t.me/${BotName}/?start=catalogOfServices${serviceNum}">${serviceNum}. ${
									element.name
								}</a>\n</b><blockquote><b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> ${element.moreAbout}\n\n<b>–¶–µ–Ω–∞:</b> ${
									element.priceSentence
								} üí∞</blockquote>\n\n<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞. –ú—ã –æ—Ç–≤–µ—Ç–∏–º! üòä</b>`
							: `<b>—Ç–∞—Ä–∏—Ñ —Å–µ—Ä–≤–µ—Ä–∞:\n\n${serviceNum}. ${
									element.name
								} (–Ω–∞ ${element.variations[variationNum - 1].name})\n</b><blockquote><b>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> ${
									element.variations[variationNum - 1].location
								}\n<b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> ${
									element.variations[variationNum - 1].lifeTime
								} (${element.variations[variationNum - 1].name})\n\n<b>–¶–µ–Ω–∞:</b> ${
									element.variations[variationNum - 1].priceSentence
								} üí∞</blockquote>\n\n<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏. –ú—ã –æ—Ç–≤–µ—Ç–∏–º! üòä</b>`
					}`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
										callback_data: dataAboutUser.action,
									},
									{
										text: "–ù–∞–ø–∏—Å–∞—Ç—å ‚úÖ",
										callback_data: `consultation`,
									},
								],
							],
						},
					}
				);

				//? –î–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø 7.11
				// await bot.editMessageMedia(
				// 	{
				// 		type: "photo",
				// 		media: "attach://media/logoBlank.png",
				// 	},
				// 	{
				// 		chat_id: chatId,
				// 		message_id: usersData.find(
				// 			(obj) => obj.chatId == chatId
				// 		).messageId,
				// 	}
				// );
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function consultation(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	dataAboutUser.action = "consultation";

	try {
		await bot.editMessageText(
			`<b><i>üí≠ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è üßë‚Äçüíª</i>\n\n</b><blockquote><i>üìå –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –≤ 50%</i></blockquote>\n\n–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: <b>–î–∞–≤–∏–¥ –∏–ª–∏ –§–µ–¥–æ—Ä</b>\n–° <b>10:00</b> –ø–æ <b>21:00, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `–ú—ã –≤—Å–µ.. –Ω–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å) üí≠`,
								url: "https://t.me/qu1z3x",
							},
						],
						[
							{
								text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
								callback_data: "exit",
							},
							{
								text: "–ö–∞—Ç–∞–ª–æ–≥ üõí",
								callback_data: "catalog0",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function ourProjectsList(chatId, projectNum = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.action = "ourProjectsList";

		await bot.editMessageText(
			`<b><i>üõ†Ô∏è –ù–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ üì±</i></b>\n\n–ü—Ä–æ–µ–∫—Ç: <b>${
				ourProjects[projectNum - 1].name
			}\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b><blockquote><b>–î–ª—è —á–µ–≥–æ:</b> ${
				ourProjects[projectNum - 1].moreAboutText
			}\n\n<b>–£—Å–ª—É–≥–∞:</b> ${ourProjects[projectNum - 1].serviceSentence}</blockquote>\n\n${
				ourProjects[projectNum - 1].botName != "-"
					? ourProjects[projectNum - 1].botName == "digfusionbot"
						? `<b>–í—ã —É–∂–µ –≤ —ç—Ç–æ–º –±–æ—Ç–µ! ü§ó</b>`
						: `<b><a href = "https://t.me/${
								ourProjects[projectNum - 1].botName
							}">üëâ –ö –ë–û–¢–£</a> ‚Ä¢ <a href="https://t.me/digfeedbacks">–û–¢–ó–´–í–´</a></b>`
					: `<b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ü´§</b>`
			}`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `${
									projectNum == 1
										? `‚Ä¢ ${ourProjects[projectNum - 1].name} ‚Ä¢`
										: `${ourProjects[0].name}`
								}`,
								callback_data: `${projectNum == 1 ? "-" : "ourProjectsList1"}`,
							},
						],
						[
							{
								text: `${
									projectNum == 2
										? `‚Ä¢ ${ourProjects[projectNum - 1].name} ‚Ä¢`
										: `${ourProjects[1].name}`
								}`,
								callback_data: `${projectNum == 2 ? "-" : "ourProjectsList2"}`,
							},
							{
								text: `${
									projectNum == 3
										? `‚Ä¢ ${ourProjects[projectNum - 1].name} ‚Ä¢`
										: `${ourProjects[2].name}`
								}`,
								callback_data: `${projectNum == 3 ? "-" : "ourProjectsList3"}`,
							},
						],
						[
							{
								text: `${
									projectNum == 4
										? `‚Ä¢ ${ourProjects[projectNum - 1].name} ‚Ä¢`
										: `${ourProjects[3].name}`
								}`,
								callback_data: `${projectNum == 4 ? "-" : "ourProjectsList4"}`,
							},
						],
						[
							{
								text: `${
									projectNum == 5
										? `‚Ä¢ ${ourProjects[projectNum - 1].name} ‚Ä¢`
										: `${ourProjects[4].name}`
								}`,
								callback_data: `${projectNum == 5 ? "-" : "ourProjectsList5"}`,
							},
							{
								text: `${
									projectNum == 6
										? `‚Ä¢ ${ourProjects[projectNum - 1].name} ‚Ä¢`
										: `${ourProjects[5].name}`
								}`,
								callback_data: `${projectNum == 6 ? "-" : "ourProjectsList6"}`,
							},
						],
						[
							{
								text: `${
									projectNum == 7
										? `‚Ä¢ ${ourProjects[projectNum - 1].name} ‚Ä¢`
										: `${ourProjects[6].name}`
								}`,
								callback_data: `${projectNum == 7 ? "-" : "ourProjectsList7"}`,
							},
						],
						[
							{
								text: `${
									projectNum == 8
										? `‚Ä¢ ${ourProjects[projectNum - 1].name} ‚Ä¢`
										: `${ourProjects[7].name}`
								}`,
								callback_data: `${projectNum == 8 ? "-" : "ourProjectsList8"}`,
							},
							{
								text: `${
									projectNum == 9
										? `‚Ä¢ ${ourProjects[projectNum - 1].name} ‚Ä¢`
										: `${ourProjects[8].name}`
								}`,
								callback_data: `${projectNum == 9 ? "-" : "ourProjectsList9"}`,
							},
						],
						[
							{
								text: `‚¨ÖÔ∏è–í –º–µ–Ω—é`,
								callback_data: "exit",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function moreAboutUs(chatId, stageNum = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.action = "moreAboutUs";

		// <b>–ò—Å—Ç–æ—Ä–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∏—è</b> –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ <b>–Ω–µ–æ–±—ã—á–Ω–∞</b> –∏ <b>–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞,</b> –æ–Ω–∞ –ª–µ–∂–∏—Ç <b>–Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –Ω–∏–∫–∞–∫–∏—Ö —Ç–∞–π–Ω! üòâ</b>\n\n
		await bot.editMessageText(
			`<b><i>üë• –û –Ω–∞—Å ‚Ä¢ ${
				stageNum == 1
					? `–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ üèÜ`
					: stageNum == 2
						? "–ö—Ç–æ –º—ã ü§î"
						: stageNum == 3
							? "–ü–æ–ª–∏—Ç–∏–∫–∞ üìñ"
							: ``
			}</i></b>\n\n${
				stageNum == 1
					? `<b>–ö–æ—Ä–æ—Ç–∫–æ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö:</b>${
							moreAboutUsText[stageNum - 1]
						}\n\n<b><a href="https://digfusion.github.io/digfusion.ru/">–°–∞–π—Ç</a> ‚Ä¢ <a href="https://t.me/digfusion">–ö–∞–Ω–∞–ª</a> ‚Ä¢ <a href="https://t.me/digfeedbacks">–û—Ç–∑—ã–≤—ã</a></b>`
					: stageNum == 2
						? `<b>–ß—É—Ç–æ—á–∫—É –æ –Ω–∞—Å üëá</b>\n${
								moreAboutUsText[stageNum - 1]
							}\n\n<b><a href="https://digfusion.github.io/digfusion.ru/">–°–∞–π—Ç</a> ‚Ä¢ <a href="https://t.me/digfusion">–ö–∞–Ω–∞–ª</a> ‚Ä¢ <a href="https://t.me/digfeedbacks">–û—Ç–∑—ã–≤—ã</a></b>`
						: stageNum == 3
							? `–ö–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É ‚Äî <b>—á–µ–≥–æ –∂–¥–∞—Ç—å –æ—Ç –Ω–∞—Å –∏ –æ—Ç –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã:</b>${
									moreAboutUsText[stageNum - 1]
								}<b><a href ="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%B2%D1%8B-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D1%82%D1%8C-%D0%BE%D1%82-%D0%BD%D0%B0%D1%81">–ü–æ–ª–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç digfusion</a></b>`
							: ``
			}`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `${
									stageNum == 1 ? `‚Ä¢ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ üèÜ ‚Ä¢` : "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ üèÜ"
								}`,
								callback_data: `${stageNum == 1 ? `-` : "moreAboutUs1"}`,
							},
						],
						[
							{
								text: `${stageNum == 2 ? `‚Ä¢ –ö—Ç–æ –º—ã ü§î ‚Ä¢` : "–ö—Ç–æ –º—ã ü§î"}`,
								callback_data: `${stageNum == 2 ? `-` : "moreAboutUs2"}`,
							},
							{
								text: `${stageNum == 3 ? `‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫–∞ üìñ ‚Ä¢` : "–ü–æ–ª–∏—Ç–∏–∫–∞ üìñ"}`,
								callback_data: `${stageNum == 3 ? `-` : "moreAboutUs3"}`,
							},
						],
						[
							{
								text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
								callback_data: "exit",
							},
							{
								text: "–ù–∞–ø–∏—Å–∞—Ç—å üí≠",
								callback_data: "consultation",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

function truncateString(text, maxLength) {
	if (text && text.length > maxLength) {
		return text.substring(0, maxLength - 3) + "...";
	}
	return text;
}

function declension(count, one, two, ten) {
	const lastDigit = count % 10;
	const lastTwoDigits = count % 100;

	if (lastTwoDigits >= 11 && lastTwoDigits <= 20) {
		return `${count} ${ten}`;
	}

	if (lastDigit === 1) {
		return `${count} ${one}`;
	}

	if (lastDigit >= 2 && lastDigit <= 4) {
		return `${count} ${two}`;
	}

	return `${count} ${ten}`;
}

async function feedbacksList(chatId, listNum = 1, feedbackId = null) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	let text = "";
	let count = 0;
	let countOfLists = 1;

	dataAboutUser.currentFeedbackId = null;

	try {
		if (feedbackId) {
			let allFeedbacksData = [];
			usersData.forEach((user) => {
				if (user.feedbacksData)
					user.feedbacksData.forEach((element) => {
						allFeedbacksData.push(element);
					});
			});

			const dataAboutFeedback = allFeedbacksData.find((obj) => obj.feedbackId == feedbackId);

			await bot.editMessageText(
				`<b><i>üìß –û—Ç–∑—ã–≤ ‚Ä¢ <code>${feedbackId}</code> üë§\n\n</i>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b><blockquote><b>${
					dataAboutFeedback.from
				}  ‚Ä¢  ${dataAboutFeedback.opinionRating}</b>\n\n<b>${
					dataAboutFeedback.serviceNum
						? `‚Ññ${dataAboutFeedback.serviceNum} "${
								services[dataAboutFeedback.serviceNum - 1].name
							}" - <a href="https://t.me/${BotName}/?start=catalogOfServices${
								dataAboutFeedback.serviceNum
							}">–∫ —É—Å–ª—É–≥–µ</a>`
						: `–£—Å–ª—É–≥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞`
				}</b>\n\n<b>–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>\n<i>"${
					dataAboutFeedback.feedbackText
				}</i>"</blockquote>\n<b>${dataAboutFeedback.creationTime}</b> - ${
					dataAboutFeedback.creationDate
				}\n\n<b><i>–û—Ç–∑—ã–≤ <a href="https://t.me/digfeedbacks">–ø–æ–¥–ª–∏–Ω–µ–Ω.</a></i></b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: dataAboutFeedback.productLink
										? `üëâ –°–ú–û–¢–†–ï–¢–¨ –†–ï–ó–£–õ–¨–¢–ê–¢ üëà`
										: ``,
									url: dataAboutFeedback.productLink
										? `${dataAboutFeedback.productLink}`
										: "https://t.me/digfusionbot",
								},
							],
							[
								{
									text:
										(chatId == digsupportId || chatId == qu1z3xId) &&
										!dataAboutFeedback.isVerified
											? `–£–¥–∞–ª–∏—Ç—å ‚ùå`
											: ``,
									callback_data: `deleteFeedbackWithId${feedbackId}`,
								},
								{
									text:
										chatId == digsupportId || chatId == qu1z3xId
											? !dataAboutFeedback.isVerified
												? `–ü–æ–∫–∞–∑–∞—Ç—å üëÅÔ∏è`
												: ""
											: ``,
									callback_data: `verifiedFeedbackWithId${feedbackId}`,
								},
							],
							[
								{
									text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
									callback_data:
										dataAboutUser.action == "feedbacksList1"
											? "feedbacksList"
											: dataAboutUser.action == "feedbacksList3"
												? "unverifiedFeedbacksAdmin"
												: "feedbacksList",
								},
								{
									text:
										(chatId == digsupportId || chatId == qu1z3xId) &&
										dataAboutFeedback.isVerified
											? `–°–∫—Ä—ã—Ç—å ü§∑‚Äç‚ôÇÔ∏è`
											: "",
									callback_data: `unverifiedFeedbackWithId${feedbackId}`,
								},
							],
							[
								{
									text:
										chatId == qu1z3xId
											? `–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–∑—ã–≤—É ‚¨áÔ∏è`
											: "",
									callback_data: `digfeedbacksSignAboutFeedbackWithId${feedbackId}`,
								},
							],
						],
					},
				}
			);
		} else {
			let allFeedbacksData;
			switch (listNum) {
				case 1:
					if (dataAboutUser.feedbacksData?.length > 0) {
						dataAboutUser.feedbacksData = dataAboutUser.feedbacksData.filter(
							(obj) => obj.isCreated
						);
					}

					count = 0;
					countOfLists = 1;
					text = [""]; // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

					allFeedbacksData = [];
					usersData.forEach((user) => {
						if (user.feedbacksData) {
							allFeedbacksData.push(...user.feedbacksData); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ spread –æ–ø–µ—Ä–∞—Ç–æ—Ä
						}
					});

					if (allFeedbacksData.length > 0) {
						for (let i = allFeedbacksData.length - 1; i >= 0; i--) {
							const element = allFeedbacksData[i];

							if (element.isVerified) {
								count++;
								text[countOfLists - 1] += `<b>${count}. ${element.from}  ‚Ä¢  ${
									element.opinionRating
								}\n</b>–£—Å–ª—É–≥–∞<b> ${
									element.serviceNum ? `‚Ññ${element.serviceNum}` : `–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ ü§∑‚Äç‚ôÇÔ∏è`
								} ${
									element.isVerified ? `` : `</b>- –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ üîé<b>`
								}\n–¢–µ–∫—Å—Ç:</b><i> "${truncateString(element.feedbackText, 65)}"</i>\n<b><a href="https://t.me/${BotName}/?start=feedbackWithId${element.feedbackId}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—Ç–∑—ã–≤–µ</a></b>\n\n`;

								// –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 3 –æ—Ç–∑—ã–≤–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
								if (count % 3 === 0 && i > 0) {
									countOfLists++;
									text[countOfLists - 1] = "";
								}
							}
						}
					} else {
						text[0] = "–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞..ü§∑‚Äç‚ôÇÔ∏è\n\n";
					}

					dataAboutUser.action = `feedbacksList1`;

					await bot.editMessageText(
						`<b><i>üë• –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ üìß\n\n${
							countOfLists > 1
								? `${dataAboutUser.supportiveCount} / ${countOfLists} —Å—Ç—Ä ‚Ä¢ `
								: ``
						}${declension(count, "–æ—Ç–∑—ã–≤", "–æ—Ç–∑—ã–≤–∞", "–æ—Ç–∑—ã–≤–æ–≤")}</i></b>\n\n${
							text[dataAboutUser.supportiveCount - 1]
								? `${text[dataAboutUser.supportiveCount - 1]}<b>–¢–∞–∫–∂–µ –Ω–∞ <a href="https://digfusion.github.io/digfusion.ru/">digfusion.ru</a> –∏ –≤ <a href="https://t.me/digfeedbacks">–æ—Ç–∑—ã–≤—ã</a></b>`
								: ``
						}`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									countOfLists > 1
										? [
												{
													text:
														dataAboutUser.supportiveCount > 1
															? "‚¨ÖÔ∏è"
															: "üö´",
													callback_data:
														dataAboutUser.supportiveCount > 1
															? "previousPage"
															: "-",
												},
												{
													text: `${dataAboutUser.supportiveCount} / ${countOfLists} —Å—Ç—Ä`,
													callback_data: "firstPage",
												},
												{
													text:
														dataAboutUser.supportiveCount < countOfLists
															? "‚û°Ô∏è"
															: "üö´",
													callback_data:
														dataAboutUser.supportiveCount < countOfLists
															? "nextPage"
															: "-",
												},
											]
										: [],
									[
										{
											text:
												dataAboutUser.feedbacksData?.length > 0
													? `–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã (${
															dataAboutUser.feedbacksData.filter(
																(obj) => obj.isCreated
															).length
														}) üìß`
													: ``,
											callback_data: "myFeedbacks",
										},
									],
									[
										{
											text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
											callback_data: "exit",
										},
										{
											text: "–°–æ–∑–¥–∞—Ç—å ‚ûï",
											callback_data: "writeFeedbacks",
										},
									],
								],
							},
						}
					);
					break;
				case 2:
					let dataAboutUserFeedbacks = dataAboutUser?.feedbacksData || null;

					count = 0;
					countOfLists = 1;
					text = [""]; // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

					if (dataAboutUserFeedbacks) {
						for (let i = 0; i < dataAboutUserFeedbacks.length; i++) {
							if (count % 3 == 0 && count != 0) {
								countOfLists++; // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–∞–µ–º –ª–∏–º–∏—Ç–∞ –≤ 3 –æ—Ç–∑—ã–≤–∞
								text[countOfLists - 1] = "";
							}

							count++;
							text[countOfLists - 1] += `<b>${count}. ${
								dataAboutUserFeedbacks[i].from
							}  ‚Ä¢  –£—Å–ª—É–≥–∞ ${
								dataAboutUserFeedbacks[i].serviceNum
									? `‚Ññ${dataAboutUserFeedbacks[i].serviceNum}`
									: `–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ ü§∑‚Äç‚ôÇÔ∏è`
							}  ‚Ä¢  ${dataAboutUserFeedbacks[i].opinionRating}${
								dataAboutUserFeedbacks[i].isVerified ? `` : `üîé`
							}\n–¢–µ–∫—Å—Ç: </b><i>"${truncateString(
								dataAboutUserFeedbacks[i].feedbackText,
								65
							)}"</i>\n<b><a href="https://t.me/${BotName}/?start=feedbackWithId${
								dataAboutUserFeedbacks[i].feedbackId
							}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—Ç–∑—ã–≤–µ</a></b>\n\n`;
						}
					}

					dataAboutUser.action = "feedbacksList2";

					await bot.editMessageText(
						`<b><i>üë§ –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã üìß\n\n${
							countOfLists > 1
								? `${dataAboutUser.supportiveCount} / ${countOfLists} —Å—Ç—Ä ‚Ä¢ `
								: ``
						}${declension(count, "–æ—Ç–∑—ã–≤", "–æ—Ç–∑—ã–≤–∞", "–æ—Ç–∑—ã–≤–æ–≤")}</i></b>\n\n${
							text[dataAboutUser.supportiveCount - 1]
								? `${text[dataAboutUser.supportiveCount - 1]}${
										dataAboutUser.feedbacksData.find((obj) => !obj.isVerified)
											? `<i>üîé - –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</i>`
											: ``
									}`
								: `–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞..ü§∑‚Äç‚ôÇÔ∏è`
						}`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									countOfLists > 1
										? [
												{
													text:
														dataAboutUser.supportiveCount > 1
															? "‚¨ÖÔ∏è"
															: "üö´",
													callback_data:
														dataAboutUser.supportiveCount > 1
															? "previousPage"
															: "-",
												},
												{
													text: `${dataAboutUser.supportiveCount} —Å—Ç—Ä`,
													callback_data: "firstPage",
												},
												{
													text:
														dataAboutUser.supportiveCount < countOfLists
															? "‚û°Ô∏è"
															: "üö´",
													callback_data:
														dataAboutUser.supportiveCount < countOfLists
															? "nextPage"
															: "-",
												},
											]
										: [],
									[
										{
											text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
											callback_data: `feedbacksList`,
										},
										{
											text: "–ï—â–µ ‚úçÔ∏è",
											callback_data: "writeFeedbacks",
										},
									],
								],
							},
						}
					);
					break;
				case 3:
					allFeedbacksData = [];
					usersData.forEach((user) => {
						if (user.feedbacksData)
							user.feedbacksData.forEach((element) => {
								allFeedbacksData.push(element);
							});
					});

					count = 0;

					if (allFeedbacksData)
						for (let i = 0; i < allFeedbacksData.length; i++) {
							if (!allFeedbacksData[i].isVerified && allFeedbacksData[i].isCreated) {
								count++;
								text += `<b>${count}. ${
									allFeedbacksData[i].from
								}  ‚Ä¢  –£—Å–ª—É–≥–∞ ${allFeedbacksData[i].serviceNum ? `‚Ññ${allFeedbacksData[i].serviceNum}` : `–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ ü§∑‚Äç‚ôÇÔ∏è`}  ‚Ä¢  ${
									element.opinionRating
								}${
									allFeedbacksData[i].isVerified ? `` : `üîé`
								}\n–¢–µ–∫—Å—Ç: </b><i>"${truncateString(
									allFeedbacksData[i].feedbackText,
									65
								)}"</i>\n<b><a href="https://t.me/${BotName}/?start=feedbackWithId${
									allFeedbacksData[i].feedbackId
								}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—Ç–∑—ã–≤–µ</a></b>\n\n`;
							}
						}

					dataAboutUser.action = "feedbacksList3";

					await bot.editMessageText(
						`<b><i>üìß –û—Ç–∑—ã–≤—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ üîé</i></b>\n\n<b>${declension(count, "–æ—Ç–∑—ã–≤", "–æ—Ç–∑—ã–≤–∞", "–æ—Ç–∑—ã–≤–æ–≤")}</b>\n\n${text != "" ? `${text}` : `–í—Å–µ –æ—Ç–∑—ã–≤—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã! üòâ`}`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
											callback_data: "adminMenu",
										},
										{
											text: "–í —Å–ø–∏—Å–æ–∫üìß",
											callback_data: "feedbacksList",
										},
									],
								],
							},
						}
					);
					break;
			}
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function writeFeedbacks(chatId, stageNum = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		let dataAboutFeedback = usersData
			.find(
				(obj) =>
					obj.feedbacksData &&
					obj.feedbacksData.find(
						(element) =>
							dataAboutUser.currentFeedbackId &&
							element.feedbackId == dataAboutUser.currentFeedbackId
					)
			)
			?.feedbacksData.at(-1);

		switch (stageNum) {
			case 1:
				await bot.editMessageText(
					`<b><i>üìß –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ ‚úçÔ∏è</i></b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ, –Ω–∞–º –≤ –ª–∏—á–∫—É! üòä\n\n<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ —Å —Ä–∞–∑—É–º–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º, –±—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –∏–∑–ª–∞–≥–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ —Ç–µ–º–µ, –∫–æ—Ç–æ—Ä–∞—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ–º–æ–∂–µ—Ç —Å–æ—Ç–Ω—è–º –∫–ª–∏–µ–Ω—Ç–æ–≤! üôè</i>\n\n<b><a href="https://t.me/qu1z3x">–ü–ï–†–ï–ô–¢–ò –í –õ–ò–ß–ö–£ / –û–°–¢–ê–í–ò–¢–¨ –û–¢–ó–´–í</a></b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
										callback_data: "feedbacksList",
									},
									{
										text: dataAboutUser.canWriteFeedbacks ? "–û—Å—Ç–∞–≤–∏—Ç—å ‚úçÔ∏è" : ``,
										url: "https://t.me/qu1z3x",
									},
								],
							],
						},
					}
				);
				break;
			case 2:
				dataAboutUser.action = "writeFeedbacks2";

				if (!dataAboutFeedback) {
					let isUnique = false;
					while (!isUnique) {
						rndId = Math.floor(Math.random() * 9999);
						isUnique = true;

						if (usersData) {
							for (let i = 0; i < usersData.length; i++) {
								if (usersData[i].feedbacksData)
									for (let j = 0; j < usersData[i].feedbacksData.length; j++) {
										if (usersData[i].feedbacksData[j].feedbackId === rndId) {
											isUnique = false;
											break;
										}
									}
								if (!isUnique) break;
							}
						} else break;
					}

					if (dataAboutUser.feedbacksData) {
						dataAboutUser.feedbacksData.push({
							from: dataAboutUser.login,
							userStatus: dataAboutUser.userStatus,
							serviceNum: null,

							opinionRating: "ü§©",
							feedbackText: "",
							productLink: "",

							creationTime: `${String(new Date().getHours()).padStart(
								2,
								"0"
							)}:${String(new Date().getMinutes()).padStart(2, "0")}`,
							creationDate: `${new Date().getDate().toString().padStart(2, "0")}.${(
								new Date().getMonth() + 1
							)
								.toString()
								.padStart(2, "0")}.${(new Date().getFullYear() % 100)
								.toString()
								.padStart(2, "0")}`,
							date: new Date(),

							feedbackId: rndId,
							isVerified: false,
							isCreated: true,
						});
					}

					dataAboutUser.currentFeedbackId = rndId;

					writeFeedbacks(chatId, 2);
				}

				if (dataAboutFeedback) {
					await bot.editMessageText(
						`<b><i>üìß –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ ‚úçÔ∏è\n\n–í–∞—à –æ—Ç–∑—ã–≤:</i></b><blockquote><b>${
							dataAboutFeedback.from
						} ‚Ä¢ –£—Å–ª—É–≥–∞ ${
							dataAboutFeedback.serviceNum
								? `‚Ññ${dataAboutFeedback.serviceNum}`
								: "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞‚ùï"
						}\n\n–ü—Ä–æ–¥—É–∫—Ç:</b> ${
							dataAboutFeedback.productLink
								? `<a href="${dataAboutFeedback.productLink}">–∫ –±–æ—Ç—É</a>`
								: `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É`
						}\n\n<b>–û—Ç–∑—ã–≤:</b>\n<i>"${
							dataAboutFeedback.feedbackText
						}</i>"\n\n<b>–û—Ü–µ–Ω–∫–∞:</b> ${
							dataAboutFeedback.opinionRating
								? dataAboutFeedback.opinionRating
								: `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ`
						}</blockquote><b>\n\n${
							dataAboutFeedback.opinionRating && dataAboutFeedback.serviceNum
								? dataAboutFeedback.productLink
									? `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞—à –æ—Ç–∑—ã–≤? ü§î`
									: `–ü–æ –∂–µ–ª–∞–Ω–∏—é, –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç!\n\n–ü—Ä–∏–º–µ—Ä:\n<code>https://t.me/–±–æ—Ç</code> –∏–ª–∏ <code>@–±–æ—Ç</code>`
								: `–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É!`
						}</b>`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: `üõí ${
												dataAboutFeedback.serviceNum ||
												dataAboutFeedback.opinionRating
													? `–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞ ${dataAboutFeedback.serviceNum ? `‚Ññ${dataAboutFeedback.serviceNum}` : "..."} –∏ –æ—Ü–µ–Ω–∫–∞ "${dataAboutFeedback.opinionRating ? dataAboutFeedback.opinionRating : "..."}"`
													: "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏ –æ—Ü–µ–Ω–∫—É ‚¨áÔ∏è"
											}`,
											callback_data: "-",
										},
									],
									[
										{
											text: `${
												dataAboutFeedback.opinionRating == "ü§¨"
													? `‚Ä¢ü§¨‚Ä¢`
													: `ü§¨`
											}`,
											callback_data: "setOpinionRating1",
										},
										{
											text: `${
												dataAboutFeedback.opinionRating == "üò†"
													? `‚Ä¢üò†‚Ä¢`
													: `üò†`
											}`,
											callback_data: "setOpinionRating2",
										},
										{
											text: `${
												dataAboutFeedback.opinionRating == "üòê"
													? `‚Ä¢üòê‚Ä¢`
													: `üòê`
											}`,
											callback_data: "setOpinionRating3",
										},
										{
											text: `${
												dataAboutFeedback.opinionRating == "üòä"
													? `‚Ä¢üòä‚Ä¢`
													: `üòä`
											}`,
											callback_data: "setOpinionRating4",
										},
										{
											text: `${
												dataAboutFeedback.opinionRating == "ü§©"
													? `‚Ä¢ü§©‚Ä¢`
													: `ü§©`
											}`,
											callback_data: "setOpinionRating5",
										},
									],

									[
										{
											text: `${
												dataAboutFeedback.serviceNum == 1 ? `‚Ä¢ ‚Ññ1 ‚Ä¢` : `‚Ññ1`
											}`,
											callback_data: "setServiceNum1",
										},
										{
											text: `${
												dataAboutFeedback.serviceNum == 2 ? `‚Ä¢ ‚Ññ2 ‚Ä¢` : `‚Ññ2`
											}`,
											callback_data: "setServiceNum2",
										},
										{
											text: `${
												dataAboutFeedback.serviceNum == 3 ? `‚Ä¢ ‚Ññ3 ‚Ä¢` : `‚Ññ3`
											}`,
											callback_data: "setServiceNum3",
										},
										{
											text: `${
												dataAboutFeedback.serviceNum == 4 ? `‚Ä¢ ‚Ññ4 ‚Ä¢` : `‚Ññ4`
											}`,
											callback_data: "setServiceNum4",
										},
										{
											text: `${
												dataAboutFeedback.serviceNum == 5 ? `‚Ä¢ ‚Ññ5 ‚Ä¢` : `‚Ññ5`
											}`,
											callback_data: "setServiceNum5",
										},
									],
									[
										{
											text: "‚¨ÖÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å",
											callback_data: "feedbacksList",
										},
										{
											text: `${
												dataAboutFeedback.opinionRating &&
												dataAboutFeedback.serviceNum
													? "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ"
													: ``
											}`,
											callback_data: `sendMyFeedback`,
										},
									],
								],
							},
						}
					);
				}
				break;
			case 3:
				dataAboutUser.action = "writeFeedbacks3";

				if (dataAboutFeedback) {
					dataAboutFeedback.isCreated = true;

					if (chatId == qu1z3xId) {
						dataAboutFeedback.isVerified = true;

						feedbacksList(chatId);
					} else {
						await bot.editMessageText(
							`<b>–°–ø–∞—Å–∏–±–æ</b> –∑–∞ –≤–∞—à <b>—Ñ–∏–¥–±–µ–∫, ${dataAboutUser.login}! üòä</b>\n\n<b>–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! ‚ù§Ô∏è</b>\n\n–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω <b>–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!</b> üòâ`,
							{
								parse_mode: "html",
								chat_id: chatId,
								message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
								disable_web_page_preview: true,
								reply_markup: {
									inline_keyboard: [
										[
											{
												text: `${
													dataAboutUser.feedbacksData?.length > 0
														? `–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã (${
																dataAboutUser.feedbacksData.filter(
																	(obj) => obj.isCreated
																).length
															}) üìß`
														: ``
												}`,
												callback_data: "myFeedbacks",
											},
										],
										[
											{
												text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
												callback_data: "feedbacksList",
											},
											{
												text: "–ï—â–µ ‚úçÔ∏è",
												callback_data: "writeFeedbacks",
											},
										],
									],
								},
							}
						);
					}
					dataAboutUser.currentFeedbackId = null;
				}

				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function profile(chatId, editLogin = false, afterEdit = false) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	// \n\n<b>–õ–æ—è–ª—å–Ω–æ—Å—Ç—å</b> - <a href="https://t.me/${BotName}/?start=moreAboutUserStatus">–ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n–°—Ç–∞—Ç—É—Å:<b> ${
	// 	dataAboutUser.userStatus
	// }</b>\n–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏:<b> ${
	// 	dataAboutUser.requestsData
	// 		? `${
	// 				dataAboutUser.requestsData.length >= 3
	// 					? "3%"
	// 					: dataAboutUser.requestsData.length >= 6
	// 						? "6%"
	// 						: dataAboutUser.requestsData.length >= 10
	// 							? "10%"
	// 							: dataAboutUser.requestsData.length < 3
	// 								? "–ù–µ—Ç ( 0% )"
	// 								: ""
	// 			}`
	// 		: `–ù–µ—Ç ( 0% )`
	// }</b>

	try {
		if (!editLogin) {
			dataAboutUser.action = "profile";

			await bot.editMessageText(
				`<b><i>üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Ä¢ <code>${
					dataAboutUser.chatId
				}</code> ‚öôÔ∏è</i>\n\n–î–∞–Ω–Ω—ã–µ:\n</b>–õ–æ–≥–∏–Ω: <b>${
					dataAboutUser.login
				}</b> - <a href="https://t.me/${BotName}/?start=editLogin">–∏–∑–º–µ–Ω–∏—Ç—å</a>${
					dataAboutUser.phoneNumber
						? `\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>+${dataAboutUser.phoneNumber}</b>`
						: ``
				}\n\n<b>–ü—Ä–æ—á–µ–µ:</b>\n–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤: <b>${
					dataAboutUser.feedbacksData
						? dataAboutUser.feedbacksData.filter((obj) => obj.isVerified).length
						: "0"
				}${
					dataAboutUser.feedbacksData?.length > 0
						? ` / ${
								dataAboutUser.feedbacksData.filter((obj) => obj.isCreated).length
							} —à—Ç</b> - <a href="https://t.me/${BotName}/?start=myFeedbacks">–≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã</a>`
						: ` —à—Ç</b>`
				}\n–í—ã —Å –Ω–∞–º–∏ —Å <b>${
					dataAboutUser.registrationDate
				}</b>\n\n<b><a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%B2%D1%8B-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D1%82%D1%8C-%D0%BE%D1%82-%D0%BD%D0%B0%D1%81">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ digfusion</a></b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: `${
										chatId == digsupportId || chatId == qu1z3xId
											? `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üí†`
											: ""
									}`,
									callback_data: "adminMenu",
								},
							],
							[
								{
									text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
									callback_data: "exit",
								},
								{
									text: "–ù–∞–ø–∏—Å–∞—Ç—å üí≠",
									callback_data: "consultation",
								},
							],
						],
					},
				}
			);
		}
		if (editLogin) {
			dataAboutUser.action = "editLogin";

			await bot.editMessageText(
				`<i><b>üõ†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ ‚öôÔ∏è\n\n</b>–õ–æ–≥–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üîí</i><b>\n\n${
					afterEdit
						? `–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π: <code>${dataAboutUser.supportiveCount}</code>`
						: `–¢–µ–∫—É—â–∏–π: <code>${dataAboutUser.login}</code>`
				}${
					afterEdit
						? "\n\n–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞? ü§î"
						: "\n\n–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –º–æ–∂–Ω–æ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚úçÔ∏è"
				}</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: `${
										dataAboutUser.login != dataAboutUser.telegramFirstName
											? "–°–±—Ä–æ—Å–∏—Ç—å üîÑÔ∏è"
											: ""
									}`,
									callback_data: "resetLogin",
								},
							],
							[
								{
									text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`,
									callback_data: "profile",
								},
								{
									text: `${afterEdit ? "–ü—Ä–∏–Ω—è—Ç—å‚úÖ" : ""}`,
									callback_data: "editLogin",
								},
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

// async function userStatusInfo(chatId) {
// 	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

// 	try {
// 		await bot.editMessageText(
// 			`<b><i>üëë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ üìä</i></b>\n\n–£ <b>–∫–∞–∂–¥–æ–≥–æ</b> –∫–ª–∏–µ–Ω—Ç–∞ –∏–º–µ–µ—Ç—Å—è <b>—Å—Ç–∞—Ç—É—Å,</b> –∫–æ—Ç–æ—Ä—ã–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ <b>–æ—Ç —É—Ä–æ–≤–Ω—è,</b> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>—Å–∫–∏–¥–∫—É –Ω–∞ –∑–∞–∫–∞–∑</b> –ø—Ä–∏ –µ–≥–æ <b>–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏! üòç\n\n–í–æ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫:</b><blockquote><b>"–ö–ª–∏–µ–Ω—Ç üôÇ"</b> - –±–µ–∑ —Å–∫–∏–¥–∫–∏ (<b>–Ω–∞—á–∞–ª—å–Ω—ã–π</b>) *\n\n<b>"–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç üòé"</b> - 3% (–æ—Ç <b>3 –∑–∞–∫–∞–∑–æ–≤</b>) *\n\n<b>"–û—Å–æ–±—ã–π –∫–ª–∏–µ–Ω—Ç üî•"</b> - 6% (–æ—Ç <b>6 –∑–∞–∫–∞–∑–æ–≤</b>) *\n\n<b>"–õ—É—á—à–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å ü§¥"</b> - 10% (–æ—Ç <b>10 –∑–∞–∫–∞–∑–æ–≤</b>) *\n\n<i>* –°—á–∏—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã</i></blockquote>\n\n–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: <b>${
// 				dataAboutUser.userStatus
// 			}</b>\n\n${
// 				services.find((obj) => obj.firstPrice)
// 					? `<i>–°–∫–∏–¥–∫–∞ –ù–ï —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è —Å —Ç–µ–∫—É—â–µ–π –∞–∫—Ü–∏–µ–π!</i>`
// 					: ``
// 			}`,
// 			{
// 				parse_mode: "html",
// 				chat_id: chatId,
// 				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
// 				disable_web_page_preview: true,
// 				reply_markup: {
// 					inline_keyboard: [
// 						[
// 							{
// 								text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
// 								callback_data: "profile",
// 							},
// 							{
// 								text: "–ö–∞—Ç–∞–ª–æ–≥ üõí",
// 								callback_data: "catalog0",
// 							},
// 						],
// 					],
// 				},
// 			}
// 		);
// 	} catch (error) {
// 		console.log(error);
// 		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
// 	}
// }

// async function dialogBuilder(chatId, textNum = 1) {
// 	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

// 	const dateNowHHNN = new Date().getHours() * 100 + new Date().getMinutes();
// 	let textToSayHelloForEnd = "";

// 	if (dateNowHHNN < 1200 && dateNowHHNN >= 600) {
// 		textToSayHello = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
// 		textToSayHelloForEnd = "–î–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞";
// 	} else if (dateNowHHNN < 1700 && dateNowHHNN >= 1200) {
// 		textToSayHello = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
// 		textToSayHelloForEnd = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è";
// 	} else if (dateNowHHNN < 2200 && dateNowHHNN >= 1700) {
// 		textToSayHello = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
// 		textToSayHelloForEnd = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞";
// 	} else if (dateNowHHNN >= 2200 || dateNowHHNN < 600) {
// 		textToSayHello = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";
// 		textToSayHelloForEnd = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";
// 	}

// 	try {
// 		let dataAboutClient;
// 		if (clientChatId) dataAboutClient = usersData.find((obj) => obj.chatId == clientChatId);

// 		if (textNum == 0) clientChatId = null;

// 		let textsToDialog = [
// 			`${textToSayHello}${
// 				clientChatId ? `, ${dataAboutClient.login}` : ""
// 			}! üëã\n\n–ú–æ–µ –∏–º—è , –∏ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –∫–∞—Å–∞—é—â–∏–º–∏—Å—è –Ω–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –Ø –ª–∏—á–Ω–æ –æ—Ç–≤–µ—á–∞—é –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞–º–∏, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞! üòä`,
// 			`–ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –∏ –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ç–µ, –≤ —Ä–∞–∑–¥–µ–ª–µ "–û –Ω–∞—Å"! üòâ`,
// 			`–£—Å–ª—É–≥–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –æ–ø–∏—Å–∞–Ω—ã –≤ –Ω–∞—à–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–º –±–æ—Ç–µ, –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥". –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∏—Ö –∑–∞–¥–∞–≤–∞—Ç—å! üòâ`,
// 			``,
// 			`–ø–æ–∫–∞ –Ω–µ—Ç`,
// 			`${
// 				clientChatId ? `${dataAboutClient.login}` : "–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç"
// 			}, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ! –ú—ã –æ—á–µ–Ω—å –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏ –≤–∞–º –∑–∞–ø–æ–º–Ω–∏–ª—Å—è, –∏ –º—ã –ø–æ–ª—É—á–∏–º —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —É—Å–ª—É–≥–µ. üôè\n\n–û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–û—Ç–∑—ã–≤—ã"\n\n–ù–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞ –≤ —á–∏—Å–ª–µ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. ${textToSayHelloForEnd}! üòâ`,
// 			``,
// 		];

// 		dataAboutUser.action = "dialogBuilder";

// 		await bot.editMessageText(
// 			`<b><i>üó£Ô∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–∞ ${
// 				clientChatId ? `‚Ä¢ <code>${clientChatId}</code>` : ``
// 			}üõ†Ô∏è</i></b>\n\n<b>–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:</b><blockquote><code>${
// 				textsToDialog[textNum - 1]
// 			}</code></blockquote>\n\n${
// 				!dataAboutClient
// 					? `–í–ø–∏—à–∏—Ç–µ Id –ª—é–±–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ ‚úçÔ∏è`
// 					: `–¢–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç: <b><a href="https://t.me/${BotName}/?start=moreAboutUserWithId${dataAboutClient.chatId}">${dataAboutClient.login}</a></b>`
// 			}`,
// 			{
// 				parse_mode: "html",
// 				chat_id: chatId,
// 				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
// 				disable_web_page_preview: true,
// 				reply_markup: {
// 					inline_keyboard: [
// 						[
// 							{
// 								text: textNum == 1 ? `‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å–≤–∏–µ üëã ‚Ä¢` : `–ü—Ä–∏–≤–µ—Ç—Å–≤–∏–µ üëã`,
// 								callback_data: "dialogBuilder1",
// 							},
// 						],
// 						[
// 							{
// 								text: textNum == 2 ? `‚Ä¢ –ö—Ç–æ –º—ã ü§î ‚Ä¢` : `–ö—Ç–æ –º—ã ü§î`,
// 								callback_data: "dialogBuilder2",
// 							},
// 							{
// 								text: textNum == 3 ? `‚Ä¢ –£—Å–ª—É–≥–∏ üõí ‚Ä¢` : `–£—Å–ª—É–≥–∏ üõí`,
// 								callback_data: "dialogBuilder3",
// 							},
// 						],
// 						[
// 							{
// 								text:
// 									textNum == 4
// 										? `‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üõçÔ∏è ‚Ä¢`
// 										: `–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üõçÔ∏è`,
// 								callback_data: "dialogBuilder4",
// 							},
// 						],
// 						[
// 							{
// 								text: textNum == 5 ? `‚Ä¢ –û–ø–ª–∞—Ç–∞ üí∞ ‚Ä¢` : `–û–ø–ª–∞—Ç–∞ üí∞`,
// 								callback_data: "dialogBuilder5",
// 							},
// 							{
// 								text: textNum == 6 ? `‚Ä¢ –û—Ç–∑—ã–≤ üìß ‚Ä¢` : `–û—Ç–∑—ã–≤ üìß`,
// 								callback_data: "dialogBuilder6",
// 							},
// 						],
// 						[
// 							{
// 								text: textNum == 7 ? `‚Ä¢ –ü—Ä–æ—â–∞–Ω–∏–µ ü´Ç ‚Ä¢` : `–ü—Ä–æ—â–∞–Ω–∏–µ ü´Ç`,
// 								callback_data: "dialogBuilder7",
// 							},
// 						],
// 						[
// 							{
// 								text: `${clientChatId ? `–ö –∫–ª–∏–µ–Ω—Ç—É üë§` : ``}`,
// 								url: `tg://user?id=${clientChatId}`,
// 							},
// 						],
// 						[
// 							{
// 								text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
// 								callback_data: "exit",
// 							},
// 						],
// 					],
// 				},
// 			}
// 		);
// 	} catch (error) {
// 		console.log(error);
// 		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
// 	}
// }

async function adminMenu(chatId) {
	if (chatId == digsupportId || chatId == qu1z3xId) {
		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		let allFeedbacksData = [];
		usersData.forEach((user) => {
			if (user.feedbacksData)
				user.feedbacksData.forEach((element) => {
					allFeedbacksData.push(element);
				});
		});

		try {
			await bot.editMessageText(
				`<b><i>üí† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üí†</i>\n\n</b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>${dataAboutUser.login}!\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å? ü§î</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "–†–µ–µ—Å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üíæ",
									callback_data: "registryDataAdmin",
								},
							],
							[
								{
									text: `–û—Ç–∑—ã–≤—ã ${
										allFeedbacksData &&
										allFeedbacksData.filter(
											(obj) => !obj.isVerified && obj.isCreated
										).length > 0
											? `(${
													allFeedbacksData.filter(
														(obj) => !obj.isVerified && obj.isCreated
													).length
												})`
											: ``
									} üìß`,
									callback_data: "unverifiedFeedbacksAdmin",
								},
								{
									text: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä",
									callback_data: "statisticListAdmin",
								},
							],
							[
								{
									text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
									callback_data: "exit",
								},
							],
						],
					},
				}
			);
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	}
}

async function registryList(chatId, listNum = 1, otherChatId = null) {
	if (chatId == digsupportId || chatId == qu1z3xId) {
		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		let text = "";
		let count = 0;
		let countOfLists = 1;

		try {
			if (otherChatId) {
				const dataAboutClient = usersData.find((obj) => obj.chatId == otherChatId);

				await bot.editMessageText(
					`<b><i>üíæ –ö–ª–∏–µ–Ω—Ç ‚Ä¢ <code>${
						dataAboutClient.chatId
					}</code>üë§</i>\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b><blockquote><b>–î–∞–Ω–Ω—ã–µ:</b>\n–õ–æ–≥–∏–Ω: <b>${
						dataAboutClient.login
					}</b>${
						dataAboutClient.phoneNumber
							? `\n–¢–µ–ª–µ—Ñ–æ–Ω: <code>+${dataAboutClient.phoneNumber}</code>`
							: ``
					}\n–°—Ç–∞—Ç—É—Å: <b>${
						dataAboutClient.userStatus
					}</b>\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n–û—Ç–∑—ã–≤–æ–≤: <b>${
						dataAboutClient.feedbacksData
							? `${
									dataAboutClient.feedbacksData.filter((obj) => obj.isVerified)
										.length
								} / ${
									dataAboutClient.feedbacksData.filter((obj) => obj.isCreated)
										.length
								}`
							: 0
					} —à—Ç</b></blockquote><b>${dataAboutClient.registrationDate}</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text:
											dataAboutClient.chatId != digsupportId
												? `${
														dataAboutClient.inBlackList
															? `–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ‚úÖ`
															: `–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ‚ùå`
													}`
												: ``,
										callback_data: `${
											dataAboutClient.inBlackList
												? `deleteFromBlackListUserWithId${dataAboutClient.chatId}`
												: `addToBlackListUserWithId${dataAboutClient.chatId}`
										}`,
									},
								],
								[
									{
										text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
										callback_data: `registryList1`,
									},
									{
										text: "–ö–ª–∏–µ–Ω—Ç üë§",
										url: `tg://user?id=${dataAboutClient.chatId}`,
									},
								],
							],
						},
					}
				);
			} else {
				switch (listNum) {
					case 1:
						count = 0;
						countOfLists = 1;
						text = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];
						for (let i = 0; i < usersData.length; i++) {
							if (count % 10 == 0 && count != 0) {
								++countOfLists;
							}

							count++;
							text[countOfLists - 1] +=
								`<b>${count}. ${usersData[i].login} ‚Ä¢ <code>${usersData[i].chatId}</code>\n</b>–°—Ç–∞—Ç—É—Å:<b> ${usersData[i].userStatus}\n<a href="https://t.me/${BotName}/?start=moreAboutUserWithId${usersData[i].chatId}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–ª–∏–µ–Ω—Ç–µ</a></b>\n\n`;
						}

						dataAboutUser.action = "registryList1";

						await bot.editMessageText(
							`<b><i>üíæ –†–µ–µ—Å—Ç—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤ üìÅ\n\n${
								countOfLists > 1
									? `${dataAboutUser.supportiveCount} / ${countOfLists} —Å—Ç—Ä ‚Ä¢ `
									: ``
							}${declension(count, "–∫–ª–∏–µ–Ω—Ç", "–∫–ª–∏–µ–Ω—Ç–∞", "–∫–ª–∏–µ–Ω—Ç–æ–≤")}</i></b>\n\n${
								text[dataAboutUser.supportiveCount - 1]
									? `${text[dataAboutUser.supportiveCount - 1]}`
									: `–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞..ü§∑‚Äç‚ôÇÔ∏è`
							}`,
							{
								parse_mode: "html",
								chat_id: chatId,
								message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
								disable_web_page_preview: true,
								reply_markup: {
									inline_keyboard: [
										countOfLists > 1
											? [
													{
														text:
															dataAboutUser.supportiveCount > 1
																? "‚¨ÖÔ∏è"
																: "üö´",
														callback_data:
															dataAboutUser.supportiveCount > 1
																? "previousPage"
																: "-",
													},
													{
														text: `${dataAboutUser.supportiveCount} —Å—Ç—Ä`,
														callback_data: "firstPage",
													},
													{
														text:
															dataAboutUser.supportiveCount <
															countOfLists
																? "‚û°Ô∏è"
																: "üö´",
														callback_data:
															dataAboutUser.supportiveCount <
															countOfLists
																? "nextPage"
																: "-",
													},
												]
											: [],
										[
											{
												text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
												callback_data: "adminMenu",
											},
										],
									],
								},
							}
						);
						break;
					case 2:
						break;
				}
			}
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	}
}

async function statisticList(chatId) {
	if (chatId == digsupportId || chatId == qu1z3xId) {
		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
		try {
			systemData.feedbacksAllTime = null;

			for (let i = 0; i < usersData.length; i++) {
				if (usersData[i].feedbacksData)
					systemData.feedbacksAllTime += usersData[i].feedbacksData.length;
			}

			await bot.editMessageText(
				`<b><i>üì± –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä</i>\n\n–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:\n<blockquote>‚Ä¢ ${declension(usersData.length, "–∫–ª–∏–µ–Ω—Ç", "–∫–ª–∏–µ–Ω—Ç–∞", "–∫–ª–∏–µ–Ω—Ç–æ–≤")}\n‚Ä¢ ${declension(systemData.activityAllTime, "–¥–µ–π—Å—Ç–≤–∏–µ", "–¥–µ–π—Å—Ç–≤–∏—è", "–¥–µ–π—Å—Ç–≤–∏–π")}\n‚Ä¢ ${declension(systemData.feedbacksAllTime, "–æ—Ç–∑—ã–≤", "–æ—Ç–∑—ã–≤–∞", "–æ—Ç–∑—ã–≤–æ–≤")}</blockquote></b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
									callback_data: "adminMenu",
								},
								{
									text: "–û–±–Ω–æ–≤–∏—Ç—åüîÑÔ∏è",
									callback_data: "statisticListAdmin",
								},
							],
						],
					},
				}
			);
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
function runMigration(filePath) {
	// –®–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	const userSchema = {
		chatId: null,
		login: "",
		phoneNumber: null,
		userStatus: "–ö–ª–∏–µ–Ω—Ç",
		messageId: null,
		action: null,
		selectedService: {
			bot: {
				serviceNum: 1,
			},
			server: {
				serviceNum: 1,
				variationNum: 1,
			},
		},
		feedbacksData: [],
		aiSelectorData: {
			query: null,
			response: {
				serviceNum: null,
				explanation: null,
			},
		},
		currentFeedbackId: null,
		messageIdOther: null,
		telegramFirstName: "",
		supportiveCount: 1,
		registrationDate: "",
		inBlackList: false,
		date: new Date(),
	};

	// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π –∏–∑ —Å—Ö–µ–º—ã
	function applySchema(object, schema) {
		for (let key in schema) {
			if (!(key in object)) {
				object[key] = schema[key]; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –ø–æ–ª–µ
			} else if (
				typeof schema[key] === "object" &&
				schema[key] !== null &&
				!Array.isArray(schema[key])
			) {
				if (
					typeof object[key] === "object" &&
					object[key] !== null &&
					!Array.isArray(object[key])
				) {
					applySchema(object[key], schema[key]); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
				} else {
					// –ï—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–±—ä–µ–∫—Ç, –Ω–æ –ø–æ —Å—Ö–µ–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º
					object[key] = schema[key];
				}
			} else if (
				Array.isArray(schema[key]) &&
				schema[key].length > 0 &&
				typeof schema[key][0] === "object"
			) {
				if (Array.isArray(object[key])) {
					object[key].forEach((item) => applySchema(item, schema[key][0])); // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
				} else {
					// –ï—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–∞—Å—Å–∏–≤, –Ω–æ –ø–æ —Å—Ö–µ–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º
					object[key] = schema[key];
				}
			}
		}
	}

	// –ß—Ç–µ–Ω–∏–µ, –º–∏–≥—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	const usersData = JSON.parse(fs.readFileSync(filePath)).usersData || null;
	const systemData = JSON.parse(fs.readFileSync(filePath)).systemData || null;

	usersData.forEach((user) => applySchema(user, userSchema));

	fs.writeFileSync(
		filePath,
		JSON.stringify(
			{
				usersData,
				systemData,
			},
			null,
			2
		)
	);

	console.log("–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
}

async function StartAll() {
	if (TOKEN == config.TOKENs[1]) BotName = "digfusionbot";
	if (TOKEN == config.TOKENs[0]) BotName = "digtestingbot";

	if (fs.readFileSync("DB.json") != "[]" && fs.readFileSync("DB.json") != "") {
		let dataFromDB = JSON.parse(fs.readFileSync("DB.json"));

		usersData = dataFromDB.usersData || null;
		systemData = dataFromDB.systemData || null;
	}

	// bot.on("contact", (message) => {
	// 	const chatId = message.chat.id;
	// 	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	// 	if (dataAboutUser && dataAboutUser.action == "firstMeeting4") {
	// 		dataAboutUser.phoneNumber = message.contact.phone_number;
	// 		menuHome(chatId);

	// 		try {
	// 			bot.deleteMessage(chatId, dataAboutUser.messageIdOther);
	// 			bot.deleteMessage(chatId, message.message_id);
	// 		} catch (error) {}
	// 	}
	// });

	bot.on("photo", (message) => {
		const chatId = message.chat.id;
		const fileId = message.photo[message.photo.length - 1].file_id; // file_id —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ

		console.log(message + "\n\n" + fileId);
	});

	bot.on("text", async (message) => {
		const chatId = message.chat.id;
		let text = message.text;

		// console.log(message);

		let dataAboutUser = usersData?.find((obj) => obj.chatId == chatId);

		try {
			if (!dataAboutUser) {
				usersData.push({
					chatId: chatId,
					login: message.from.first_name,
					phoneNumber: null,
					userStatus: "–ö–ª–∏–µ–Ω—Ç",
					messageId: null,
					action: null,

					selectedService: {
						bot: {
							serviceNum: 1,
						},
						server: {
							serviceNum: 1,
							variationNum: 1,
						},
					},

					feedbacksData: [],
					aiSelectorData: {
						query: null,
						response: {
							serviceNum: null,
							explanation: null,
						},
					},

					currentFeedbackId: null,

					messageIdOther: null,
					telegramFirstName: message.from.first_name,
					supportiveCount: 1,
					inBlackList: false,
					registrationDate: `${new Date().getDate().toString().padStart(2, "0")}.${(
						new Date().getMonth() + 1
					)
						.toString()
						.padStart(2, "0")}.${(new Date().getFullYear() % 100)
						.toString()
						.padStart(2, "0")}`,
					date: new Date(),
				});

				dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
			}

			if (dataAboutUser && !dataAboutUser.inBlackList) {
				if (
					message.forward_origin &&
					!dataAboutUser.currentFeedbackId &&
					chatId == qu1z3xId
				) {
					let dataAboutCertainUser = usersData.find(
						(obj) =>
							obj.chatId == message.forward_origin?.id ||
							usersData.find((obj) => obj.chatId == digsupportId)
					);

					if (dataAboutCertainUser) {
						let isUnique = false;
						while (!isUnique) {
							rndId = Math.floor(Math.random() * 9999);
							isUnique = true;

							if (usersData) {
								for (let i = 0; i < usersData.length; i++) {
									if (usersData[i].feedbacksData)
										for (
											let j = 0;
											j < usersData[i].feedbacksData.length;
											j++
										) {
											if (
												usersData[i].feedbacksData[j].feedbackId === rndId
											) {
												isUnique = false;
												break;
											}
										}
									if (!isUnique) break;
								}
							} else break;
						}

						if (dataAboutCertainUser?.feedbacksData) {
							dataAboutCertainUser.feedbacksData.push({
								from:
									message.forward_origin.sender_user?.first_name ||
									message.forward_origin.sender_user_name?.split(" ")[0],
								userStatus: dataAboutCertainUser.userStatus,
								serviceNum: null,

								opinionRating: "ü§©",
								feedbackText: text,
								productLink: "",

								creationTime: `${String(new Date().getHours()).padStart(
									2,
									"0"
								)}:${String(new Date().getMinutes()).padStart(2, "0")}`,
								creationDate: `${new Date()
									.getDate()
									.toString()
									.padStart(2, "0")}.${(new Date().getMonth() + 1)
									.toString()
									.padStart(2, "0")}.${(new Date().getFullYear() % 100)
									.toString()
									.padStart(2, "0")}`,
								date: new Date(),

								feedbackId: rndId,
								isVerified: false,
								isCreated: true,
							});
						}

						dataAboutUser.currentFeedbackId = rndId;

						writeFeedbacks(chatId, 2);
					}
				}

				if (dataAboutUser.action == "firstMeeting3" && Array.from(text)[0] != "/") {
					dataAboutUser.login = text;

					firstMeeting(chatId, 4);
				}

				if (dataAboutUser.action == "aiSelector" && Array.from(text)[0] != "/") {
					if (dataAboutUser.aiSelectorData?.response) {
						dataAboutUser.aiSelectorData.response = null;
					}

					aiSelector(chatId, text);
				}

				if (
					text.includes("/start showNavigationListInMenuHome") ||
					text.includes("/start hideNavigationListInMenuHome")
				) {
					match = text.match(/^\/start (.*)NavigationListInMenuHome$/);

					match[1] == "show"
						? menuHome(chatId, true)
						: match[1] == "hide"
							? menuHome(chatId, false)
							: null;
				}

				if (text.includes("/start catalogOfServices")) {
					if (text.includes("RESEND")) {
						try {
							bot.deleteMessage(chatId, dataAboutUser.messageId);
						} catch (error) {}

						await bot.sendMessage(chatId, "„Ö§").then((message) => {
							dataAboutUser.messageId = message.message_id;
						});

						match = text.match(/^\/start catalogOfServices(.*)RESEND$/);
					} else {
						match = text.match(/^\/start catalogOfServices(.*)$/);
					}

					let catalogNum = null;
					switch (parseInt(match[1])) {
						case 1:
						case 2:
						case 3:
							catalogNum = 1;
							dataAboutUser.selectedService.bot.serviceNum = parseInt(match[1]);
							break;
						case 4:
						case 5:
							catalogNum = 2;
							dataAboutUser.selectedService.server = {
								serviceNum: parseInt(match[1]),
								variationNum: 1,
							};
							break;
					}

					dataAboutUser.supportiveCount = parseInt(match[1]);

					catalogOfServices(chatId, catalogNum);
				}
			}

			if (
				dataAboutUser.action == "writeFeedbacks1" &&
				Array.from(text)[0] != "/" &&
				chatId == digsupportId
			) {
				let isUnique = false;
				while (!isUnique) {
					rndId = Math.floor(Math.random() * 9999);
					isUnique = true;

					if (usersData) {
						for (let i = 0; i < usersData.length; i++) {
							if (usersData[i].feedbacksData)
								for (let j = 0; j < usersData[i].feedbacksData.length; j++) {
									if (usersData[i].feedbacksData[j].feedbackId === rndId) {
										isUnique = false;
										break;
									}
								}
							if (!isUnique) break;
						}
					} else break;
				}

				if (!dataAboutUser.feedbacksData) dataAboutUser.feedbacksData = [];

				if (dataAboutUser.feedbacksData || chatId == digsupportId)
					dataAboutUser.feedbacksData.push({
						from: dataAboutUser.login,
						userStatus: dataAboutUser.userStatus,
						serviceNum: null,

						opinionRating: null,
						feedbackText: text,
						productLink: null,

						creationTime: `${String(new Date().getHours()).padStart(
							2,
							"0"
						)}:${String(new Date().getMinutes()).padStart(2, "0")}`,
						creationDate: `${new Date().getDate().toString().padStart(2, "0")}.${(
							new Date().getMonth() + 1
						)
							.toString()
							.padStart(2, "0")}.${(new Date().getFullYear() % 100)
							.toString()
							.padStart(2, "0")}`,
						date: new Date(),

						feedbackId: rndId,
						isVerified: false,
						isCreated: false,
					});

				dataAboutUser.currentFeedbackId = rndId;

				writeFeedbacks(chatId, 2);
			}

			if (dataAboutUser.action == "writeFeedbacks2") {
				if (text.includes("https://t.me/") && Array.from(text)[0] != "/") {
					usersData
						.find(
							(obj) =>
								obj.feedbacksData &&
								obj.feedbacksData.find(
									(element) =>
										dataAboutUser.currentFeedbackId &&
										element.feedbackId == dataAboutUser.currentFeedbackId
								)
						)
						.feedbacksData.at(-1).productLink = text;

					writeFeedbacks(chatId, 2);
				} else {
					usersData
						.find(
							(obj) =>
								obj.feedbacksData &&
								obj.feedbacksData.find(
									(element) =>
										dataAboutUser.currentFeedbackId &&
										element.feedbackId == dataAboutUser.currentFeedbackId
								)
						)
						.feedbacksData.at(-1).feedbackText = text;

					writeFeedbacks(chatId, 2);
				}
			}

			if (text.includes("/start feedbackWithId")) {
				match = text.match(/^\/start feedbackWithId(.*)$/);

				feedbacksList(chatId, null, parseInt(match[1]));
			}

			if (
				dataAboutUser.action == "editLogin" &&
				text != dataAboutUser.login &&
				Array.from(text)[0] != "/"
			) {
				dataAboutUser.supportiveCount = text;
				profile(chatId, true, true);
			}

			// if (
			// 	dataAboutUser.action == "dialogBuilder" &&
			// 	usersData.find((obj) => obj.chatId == parseInt(text))
			// ) {
			// 	clientChatId = parseInt(text);

			// 	dialogBuilder(chatId, null);
			// }

			if (
				dataAboutUser.action == "registryList" &&
				usersData.find((obj) => obj.chatId == parseInt(text))
			) {
				registryList(chatId, null, parseInt(text));
			}

			if (
				text.includes("/start moreAboutUserWithId") &&
				(chatId == digsupportId || chatId == qu1z3xId)
			) {
				match = text.match(/^\/start moreAboutUserWithId(.*)$/);

				registryList(chatId, null, parseInt(match[1]));
			}

			if (
				text == "/services" ||
				text == "/consultation" ||
				text == "/profile" ||
				text == "/start catalog0" ||
				text == "/start ourProjectsList0"
			) {
				try {
					bot.deleteMessage(chatId, dataAboutUser.messageId);
				} catch (error) {}

				await bot
					.sendMessage(chatId, "„Ö§")
					.then((message) => (dataAboutUser.messageId = message.message_id));

				switch (text) {
					case "/services":
						catalogOfServices(chatId);
						break;
					case "/consultation":
						consultation(chatId);
						break;
					case "/profile":
						profile(chatId);
						break;
					case "/start catalog0":
						catalogOfServices(chatId);
						break;
					case "/start ourProjectsList0":
						ourProjectsList(chatId, 1);
						break;
				}
			}

			//? –ê–õ–ï–†–¢–´

			if (text.includes("/alert") && (chatId == qu1z3xId || chatId == digsupportId)) {
				let alertData = {};
				switch (text) {
					case "/alert1":
						alertData = {
							text: "",
							entities: [],
							photoId: "",
							buttons: [
								[
									{
										text: "",
										callback_data: "-",
									},
								],
							],
						};
						break;
					case "/alert2":
						break;
				}

				if (alertData) {
					for (let i = 0; i < usersData.length; i++) {
						const element = usersData[i];

						try {
							if (element.chatId != qu1z3xId)
								bot.deleteMessage(element.chatId, element.messageId);
						} catch (error) {}

						try {
							if (alertData.photoId) {
								await bot
									.sendPhoto(element.chatId, alertData.photoId, {
										caption: alertData.text || null,
										caption_entities: alertData.entities || null,
										disable_web_page_preview: true,
										reply_markup: {
											inline_keyboard: alertData.buttons
												? alertData.buttons
												: {
														text: "",
														callback_data: "-",
													},
										},
									})
									.then((message) => {
										element.messageIdOther = message.message_id;
									});
							} else {
								await bot
									.sendMessage(element.chatId, alertData.text, {
										disable_web_page_preview: true,
										entities: alertData.entities || null,
										reply_markup: {
											inline_keyboard: alertData.buttons
												? alertData.buttons
												: {
														text: "",
														callback_data: "-",
													},
										},
									})
									.then((message) => {
										element.messageIdOther = message.message_id;
									});
							}
						} catch (error) {
							console.log(error);
							sendDataAboutError(element.chatId, element.login, `${String(error)}`);
							continue;
						}
					}
				}
			}

			switch (text) {
				case "/restart":
				case "/start":
					try {
						bot.deleteMessage(chatId, dataAboutUser.messageId);
					} catch (error) {}

					await bot.sendMessage(chatId, "„Ö§").then((message) => {
						dataAboutUser.messageId = message.message_id;
					});

					if (text == "/restart") {
						menuHome(chatId);
					} else {
						firstMeeting(chatId, 1);
					}
					break;
				case "/start ideasForProjects":
					ideasForProjects(chatId);
					break;
				case "/start myFeedbacks":
					feedbacksList(chatId, 2);
					break;
				case "/start editLogin":
					profile(chatId, true);
					break;
				// case "/start moreAboutUserStatus":
				// 	userStatusInfo(chatId);
				// 	break;
				case "/start moreAboutUs":
					moreAboutUs(chatId);
					break;
				case "/data":
					if (chatId == digsupportId || chatId == qu1z3xId) {
						const dataToSend = {
							usersData,
							systemData,
						};
						sendDataAboutDataBase(dataToSend);

						console.log("–ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –≤—Å–µ –æ–∫");
					}
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
			}

			bot.deleteMessage(chatId, message.message_id);

			++systemData.activityAllTime;

			if (chatId != qu1z3xId && chatId != digsupportId) {
				sendDataAboutText(chatId, dataAboutUser.login, text);
			}
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser?.login, `${String(error)}`);
		}
	});

	bot.on("callback_query", async (query) => {
		const chatId = query.message.chat.id;
		const data = query.data;

		let dataAboutUser = usersData?.find((obj) => obj.chatId == chatId);

		if (!dataAboutUser) {
			usersData.push({
				chatId: chatId,
				login: query.from.first_name,
				phoneNumber: null,
				userStatus: "–ö–ª–∏–µ–Ω—Ç",
				messageId: query.message.message_id,
				action: null,

				selectedService: {
					bot: {
						serviceNum: 1,
					},
					server: {
						serviceNum: 1,
						variationNum: 1,
					},
				},

				feedbacksData: [],
				aiSelectorData: {
					query: null,
					response: {
						serviceNum: null,
						explanation: null,
					},
				},

				currentFeedbackId: null,

				messageIdOther: null,
				telegramFirstName: query.from.first_name,
				supportiveCount: 1,
				registrationDate: `${new Date().getDate().toString().padStart(2, "0")}.${(
					new Date().getMonth() + 1
				)
					.toString()
					.padStart(2, "0")}.${(new Date().getFullYear() % 100)
					.toString()
					.padStart(2, "0")}`,
				date: new Date(),
				inBlackList: false,
			});

			dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
		}

		if (dataAboutUser) {
			try {
				if (!dataAboutUser.inBlackList) {
					if (query.message.message_id == dataAboutUser.messageIdOther) {
						try {
							bot.deleteMessage(chatId, dataAboutUser.messageIdOther);
						} catch (error) {}

						dataAboutUser.messageIdOther = null;

						await bot.sendMessage(chatId, "„Ö§").then((message) => {
							dataAboutUser.messageId = message.message_id;
						});
					} else dataAboutUser.messageId = query.message.message_id;

					if (data.includes("firstMeeting")) {
						match = data.match(/^firstMeeting(.*)$/);

						firstMeeting(chatId, parseInt(match[1]));
					}

					if (data.includes("catalogOfServices")) {
						match = data.match(/^catalogOfServices(.*)$/);

						let catalogNum = null;
						switch (parseInt(match[1])) {
							case 1:
							case 2:
							case 3:
								catalogNum = 1;
								dataAboutUser.selectedService.bot.serviceNum = parseInt(match[1]);
								break;
							case 4:
							case 5:
								catalogNum = 2;
								dataAboutUser.selectedService.server = {
									serviceNum: parseInt(match[1]),
									variationNum: 1,
								};
								break;
						}

						dataAboutUser.supportiveCount = parseInt(match[1]);

						catalogOfServices(chatId, catalogNum);
					} else if (data.includes("catalog")) {
						match = data.match(/^catalog(.*)$/);

						let serviceNum = null;
						switch (parseInt(match[1])) {
							case 1:
								serviceNum = 1;

								dataAboutUser.selectedService = {
									bot: {
										serviceNum: serviceNum,
									},
									server: {
										serviceNum: null,
										variationNum: 1,
									},
								};
								break;
							case 2:
								serviceNum = 4;

								dataAboutUser.selectedService = {
									bot: {
										serviceNum: null,
									},
									server: {
										serviceNum: serviceNum,
										variationNum: 1,
									},
								};
								break;
						}

						dataAboutUser.supportiveCount = serviceNum;

						catalogOfServices(chatId, parseInt(match[1]));
					}

					if (data.includes("nextServiceNum") || data.includes("previousServiceNum")) {
						match = data.match(/^(.*)ServiceNum$/);

						const maxServices = dataAboutUser.action === "catalog1" ? 3 : 5;
						const minServices = dataAboutUser.action === "catalog1" ? 1 : 4;

						if (dataAboutUser.supportiveCount == maxServices && match[1] == "next") {
							dataAboutUser.supportiveCount = minServices;
						} else if (
							dataAboutUser.supportiveCount == minServices &&
							match[1] == "previous"
						) {
							dataAboutUser.supportiveCount = maxServices;
						} else {
							match[1] == "next"
								? dataAboutUser.supportiveCount++
								: match[1] == "previous"
									? dataAboutUser.supportiveCount--
									: "";
						}

						dataAboutUser.selectedService = {
							bot: {
								serviceNum:
									dataAboutUser.action === "catalog1"
										? dataAboutUser.supportiveCount
										: null,
							},
							server: {
								serviceNum:
									dataAboutUser.action === "catalog2"
										? dataAboutUser.supportiveCount
										: null,
								variationNum: 1,
							},
						};

						catalogOfServices(chatId, dataAboutUser.action === "catalog1" ? 1 : 2);
					}

					if (data.includes("variationNum")) {
						match = data.match(/^variationNum(.*)$/);

						dataAboutUser.selectedService.server.variationNum = parseInt(match[1]);

						if (dataAboutUser.action == "catalog2") {
							catalogOfServices(chatId, dataAboutUser.action === "catalog1" ? 1 : 2);
						}
					}

					if (data.includes("ourProjectsList")) {
						match = data.match(/^ourProjectsList(.*)$/);

						ourProjectsList(chatId, parseInt(match[1]));
					}

					if (data.includes("moreAboutUs")) {
						match = data.match(/^moreAboutUs(.*)$/);

						moreAboutUs(chatId, parseInt(match[1]));
					}

					if (data.includes("deleteFeedbackWithId")) {
						match = data.match(/^deleteFeedbackWithId(.*)$/);

						if (chatId == digsupportId || chatId == qu1z3xId) {
							let dataAboutCertainUser =
								usersData.find((obj) =>
									obj.feedbacksData?.some(
										(element) => element.feedbackId == parseInt(match[1])
									)
								) || null;

							if (dataAboutCertainUser) {
								dataAboutCertainUser.feedbacksData.splice(
									dataAboutCertainUser.feedbacksData.indexOf(
										dataAboutCertainUser.feedbacksData.find(
											(obj) => obj.feedbackId == parseInt(match[1])
										),
										1
									)
								);
							}
						}

						feedbacksList(chatId, 1);
					}

					if (data.includes("unverifiedFeedbackWithId")) {
						match = data.match(/^unverifiedFeedbackWithId(.*)$/);

						let allFeedbacksData = [];
						usersData.forEach((user) => {
							if (user.feedbacksData)
								user.feedbacksData.forEach((element) => {
									allFeedbacksData.push(element);
								});
						});

						if (
							(chatId == digsupportId || chatId == qu1z3xId) &&
							allFeedbacksData &&
							allFeedbacksData.find((obj) => obj.feedbackId == parseInt(match[1]))
						) {
							allFeedbacksData.find(
								(obj) => obj.feedbackId == parseInt(match[1])
							).isVerified = false;
						}

						feedbacksList(chatId, null, parseInt(match[1]));
					} else if (data.includes("verifiedFeedbackWithId")) {
						match = data.match(/^verifiedFeedbackWithId(.*)$/);

						let allFeedbacksData = [];
						usersData.forEach((user) => {
							if (user.feedbacksData)
								user.feedbacksData.forEach((element) => {
									allFeedbacksData.push(element);
								});
						});

						if (
							(chatId == digsupportId || chatId == qu1z3xId) &&
							allFeedbacksData &&
							allFeedbacksData.find((obj) => obj.feedbackId == parseInt(match[1]))
						) {
							allFeedbacksData.find(
								(obj) => obj.feedbackId == parseInt(match[1])
							).isVerified = true;
						}
						feedbacksList(chatId, null, parseInt(match[1]));
					} else if (data.includes("digfeedbacksSignAboutFeedbackWithId")) {
						match = data.match(/^digfeedbacksSignAboutFeedbackWithId(.*)$/);

						if (chatId == qu1z3xId) {
							let dataAboutFeedback = usersData
								.find((obj) =>
									obj.feedbacksData?.some(
										(element) => element.feedbackId == match[1]
									)
								)
								?.feedbacksData.find((element) => element.feedbackId == match[1]);

							if (dataAboutFeedback) {
								bot.sendMessage(
									chatId,
									`<b>${dataAboutFeedback.productLink ? `<a href="${dataAboutFeedback.productLink}">–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞</a>\n\n` : ``}–£—Å–ª—É–≥–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞:</b>\n<blockquote><b>${dataAboutFeedback.serviceNum} ${services[dataAboutFeedback.serviceNum - 1].name}\n–¶–µ–Ω–∞:</b> ${services[dataAboutFeedback.serviceNum - 1].priceSentence}</blockquote>\n\n<b><i>digfusion</i>\n<a href="https://t.me/digfusionbot">–£—Å–ª—É–≥–∏</a> ‚Ä¢ <a href="https://t.me/digfusion">–ù–æ–≤–æ—Å—Ç–∏</a> ‚Ä¢ <a href="https://t.me/qu1z3x">–°–≤—è–∑—å</a></b>`,
									{
										parse_mode: "HTML",
										disable_web_page_preview: true,
										disable_notification: true,
										reply_markup: {
											inline_keyboard: [
												[
													{
														text: "–£–¥–∞–ª–∏—Ç—å ‚ùå",
														callback_data: `deleteexcess`,
													},
												],
											],
										},
									}
								);
							}
						}
					} else if (data.includes("setServiceNum")) {
						match = data.match(/^setServiceNum(.*)$/);

						usersData
							.find(
								(obj) =>
									obj.feedbacksData &&
									obj.feedbacksData.find(
										(element) =>
											dataAboutUser.currentFeedbackId &&
											element.feedbackId == dataAboutUser.currentFeedbackId
									)
							)
							.feedbacksData.at(-1).serviceNum = match[1];

						writeFeedbacks(chatId, 2);
					} else if (data.includes("setOpinionRating")) {
						match = data.match(/^setOpinionRating(.*)$/);

						usersData
							.find(
								(obj) =>
									obj.feedbacksData &&
									obj.feedbacksData.find(
										(element) =>
											dataAboutUser.currentFeedbackId &&
											element.feedbackId == dataAboutUser.currentFeedbackId
									)
							)
							.feedbacksData.at(-1).opinionRating =
							match[1] == 1
								? "ü§¨"
								: match[1] == 2
									? "üò†"
									: match[1] == 3
										? "üòê"
										: match[1] == 4
											? "üòä"
											: match[1] == 5
												? "ü§©"
												: null;

						writeFeedbacks(chatId, 2);
					}

					// if (data.includes("dialogBuilder")) {
					// 	match = data.match(/^dialogBuilder(.*)$/);

					// 	dialogBuilder(chatId, parseInt(match[1]));
					// }

					if (
						data.includes("previousPage") ||
						data.includes("nextPage") ||
						data.includes("firstPage")
					) {
						match = data.match(/^(.*)Page$/);

						if (match[1] == "previous" && dataAboutUser.supportiveCount > 1) {
							--dataAboutUser.supportiveCount;
						} else if (match[1] == "next") {
							++dataAboutUser.supportiveCount;
						} else if (match[1] == "first") {
							dataAboutUser.supportiveCount = 1;
						}

						if (dataAboutUser.action == "feedbacksList1") feedbacksList(chatId, 1);
						else if (dataAboutUser.action == "feedbacksList2") feedbacksList(chatId, 2);
						else if (dataAboutUser.action == "registryList1") registryList(chatId, 1);
					}

					// if (data.includes("buildDialogForUserWithId")) {
					// 	match = data.match(/^buildDialogForUserWithId(.*)$/);

					// 	clientChatId = parseInt(match[1]);

					// 	dialogBuilder(chatId, 1);
					// }

					if (
						data.includes("addToBlackListUserWithId") ||
						data.includes("deleteFromBlackListUserWithId")
					) {
						match = data.match(/^(.*)BlackListUserWithId(.*)$/);

						const dataAboutClient =
							usersData.find((obj) => obj.chatId == parseInt(match[2])) || null;

						if (match[1] == "addTo") {
							dataAboutClient.inBlackList = true;
						} else if (match[1] == "deleteFrom") {
							dataAboutClient.inBlackList = false;
						}

						registryList(chatId, null, parseInt(match[2]));
					}

					switch (data) {
						case "exit":
							menuHome(chatId);
							break;
						case "aiSelector":
							if (!dataAboutUser.aiSelectorData?.query) {
								bot.answerCallbackQuery(query.id, {
									text: `–ß–µ–º –±–æ–ª–µ–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª–µ–Ω –≤–∞—à –∑–∞–ø—Ä–æ—Å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –ù–µ–π—Ä–æ –ø–æ–¥–±–µ—Ä–µ—Ç –¥–ª—è –≤–∞—Å —Ä–µ—à–µ–Ω–∏–µ! üéØ`,
									show_alert: true,
								});
							}

							aiSelector(chatId);
							break;
						case "resetAiSelector":
							dataAboutUser.aiSelectorData = {
								query: null,
								response: {
									serviceNum: null,
									explanation: null,
								},
							};
							aiSelector(chatId);
							break;
						case "warningOrderService":
							orderService(chatId, 1);
							break;
						case "orderService":
							orderService(chatId, 2);
							break;
						case "ideasForProjects":
							ideasForProjects(chatId);
							break;
						case "consultation":
							bot.answerCallbackQuery(query.id, {
								text: `‚ùï\n${dataAboutUser.login}, –º—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å..\n\n–í—Å–µ —ç—Ç–æ - –∏—Å—Ç–æ—Ä–∏—è digfusion`,
								show_alert: true,
							});
							consultation(chatId);
							break;
						case "moreAboutUs":
							moreAboutUs(chatId);
							break;
						case "feedbacksList":
							dataAboutUser.supportiveCount = 1;
							feedbacksList(chatId);
							break;
						case "writeFeedbacks":
							writeFeedbacks(chatId, chatId == qu1z3xId ? 2 : 1);
							break;
						case "sendMyFeedback":
							writeFeedbacks(chatId, 3);
							break;
						case "myFeedbacks":
							dataAboutUser.supportiveCount = 1;
							feedbacksList(chatId, 2);
							break;
						case "unverifiedFeedbacksAdmin":
							feedbacksList(chatId, 3);
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "profile":
							profile(chatId);
							break;
						case "resetLogin":
							dataAboutUser.login = dataAboutUser.telegramFirstName;

							bot.answerCallbackQuery(query.id, {
								text: `–í–∞—à –ª–æ–≥–∏–Ω —Å–Ω–æ–≤–∞ \n¬´${dataAboutUser.login}¬ª üòâ`,
								show_alert: true,
							});

							profile(chatId);
							break;
						case "editLogin":
							dataAboutUser.login = dataAboutUser.supportiveCount;

							bot.answerCallbackQuery(query.id, {
								text: `–í–∞—à –ª–æ–≥–∏–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞\n¬´${dataAboutUser.supportiveCount}¬ª üòâ`,
								show_alert: true,
							});

							profile(chatId);
							break;
						case "":
							break;
						case "adminMenu":
							adminMenu(chatId);
							break;
						case "registryList1":
							registryList(chatId);
							break;
						case "registryDataAdmin":
							dataAboutUser.supportiveCount = 1;
							registryList(chatId);
							break;
						case "statisticListAdmin":
							statisticList(chatId);
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "/data":
							if (chatId == qu1z3xId || chatId == digsupportId) {
								fs.writeFileSync(
									"DB.json",
									JSON.stringify(
										{ usersData: usersData, systemData: systemData },
										null,
										2
									)
								);
							}
							break;
						case "deleteexcess":
							try {
								bot.deleteMessage(chatId, query.message.message_id);
							} catch (error) {}
							break;
					}
				} else if (dataAboutUser.inBlackList) {
					dataAboutUser.action = "inBlackList";

					bot.editMessageText(
						`<b>–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –æ–±—â–µ–Ω–∏–∏ —Å –Ω–∞–º–∏! ‚òπÔ∏è\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üóØÔ∏è</b>`,
						{
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
							parse_mode: "html",
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: "–û–±–Ω–æ–≤–∏—Ç—å üîÑÔ∏è",
											callback_data: "exit",
										},
										{
											text: "–ù–∞–ø–∏—Å–∞—Ç—å üí≠",
											url: "https://t.me/qu1z3x",
										},
									],
								],
							},
						}
					);
				}

				++systemData.activityAllTime;

				if (chatId != qu1z3xId && chatId != digsupportId) {
					sendDataAboutButton(chatId, dataAboutUser.login, data);
				}

				// fs.writeFileSync(
				// 	"DB.json",
				// 	JSON.stringify({ usersData: usersData,
				// systemData: systemData, }, null, 2)
				// );
			} catch (error) {
				console.log(error);
				sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
			}
		}
	});

	cron.schedule(`0 */1 * * *`, function () {
		// –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		try {
			if (TOKEN == config.TOKENs[1]) {
				fs.writeFileSync(
					"DB.json",
					JSON.stringify(
						{
							usersData: usersData,
							systemData: systemData,
						},
						null,
						2
					)
				);

				if (new Date().getHours() % 12 == 0)
					sendDataAboutDataBase({
						usersData: usersData,
						systemData: systemData,
					});
			}
		} catch (error) {}
	});
}

// runMigration("DB.json");
StartAll();
