import TelegramBot from "node-telegram-bot-api";
import cron from "node-cron";
import fs from "fs";

import {
	sendDataAboutText,
	sendDataAboutButton,
	sendDataAboutError,
	sendDataAboutDataBase,
} from "./tgterminal.js";

import { initializeApp } from "firebase/app";
import { getDatabase, ref, set, get } from "firebase/database";

import { config } from "./config.js";

const TOKEN = config.TOKENs[0]; // 1 - –æ—Ä–∏–≥–∏–Ω–∞–ª
const bot = new TelegramBot(TOKEN, { polling: true });

// Initialize Firebase
const app = initializeApp(config.firebaseConfig);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Firebase Realtime Database
const db = getDatabase(app);
const dataRef = ref(db);

const qu1z3xId = "923690530";
const jackId = "6815420098";
let BotName = "digfusionbot";

let usersData = [];
let systemData = {
	newRequestsToday: 0,
	activityToday: 0,
	newClientsToday: 0,
	newFeedbacksToday: 0,

	requestsAllTime: 0,
	feedbacksAllTime: 0,
	activityAllTime: 0,

	alertsData: [],
};

let moreAboutUsText = [
	"<blockquote><b>‚Ä¢  –ù–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–æ–π–Ω–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞ - –Ω–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã, –∞ —Ä–∞–∑—É–º–Ω–∞—è —Å—É–º–º–∞! üí∞<b>\n\n‚Ä¢  –°–Ω–∞—á–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ—Ç–æ–º –æ–ø–ª–∞—Ç–∞</b>\n–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç! ü§ó <i>(–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50% –æ—Ç —Å—É–º–º—ã)</i>\n\n<b>‚Ä¢  –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø—Ä–∞–≤–∫–∏</b>\n–ú—ã –¥–æ–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç –¥–æ –∫–æ–Ω—Ü–∞, —É—á–∏—Ç—ã–≤–∞—è –º–Ω–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞. üòâ\n\n<b>‚Ä¢  –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å</b>\n–ú—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º –∏ –Ω–µ –±—É–¥–µ–º —Å–∫—Ä—ã–≤–∞—Ç—å –æ—Ç —Å–≤–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤! üôà</blockquote> ",

	"–ó–∞ –Ω–∞—à–∏–º–∏ –ø–ª–µ—á–∞–º–∏ <b>–±–æ–ª—å—à–æ–π</b> –æ–ø—ã—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ <b>–∫—Ä—É–ø–Ω—ã—Ö</b> –ø—Ä–æ–µ–∫—Ç–æ–≤, –∏ –º—ã –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å <b>–≤–∞—à</b> –ø—Ä–æ–µ–∫—Ç <b>—Ç–∞–∫–∏–º –∂–µ!</b> üòé\n\n<b>–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º,</b> –∏ –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Å–æ–∑–¥–∞—Ç—å <b><i>—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ, —à—É—Å—Ç—Ä–æ–≥–æ</i> –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b> —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è –ª—é–±–æ–π –≤–∞—à–µ–π <b>–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!</b> üòâ",

	`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ <b>–Ω–∞—à–∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π!</b> –ù–∞–º –≤–∞–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –≤–∞—Å, –æ —Ç–æ–º —á—Ç–æ <b>–≤—ã –º–æ–∂–µ—Ç–µ –æ–∂–∏–¥–∞—Ç—å –æ—Ç –Ω–∞—Å</b> –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ <b>—É—Å–ª—É–≥ digfusion,</b> –∏ —á—Ç–æ <b>–º—ã –æ–∂–∏–¥–∞–µ–º –æ—Ç –≤–∞—Å. üòâ\n\n–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É:<blockquote><i><a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%B2%D1%8B-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D1%82%D1%8C-%D0%BE%D1%82-%D0%BD%D0%B0%D1%81">–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∂–∏–¥–∞—Ç—å –æ—Ç –Ω–∞—Å</a>\n<a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%BC%D1%8B-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D0%B5%D0%BC-%D0%BE%D1%82-%D0%B2%D0%B0%D1%81">–ß—Ç–æ –º—ã –æ–∂–∏–¥–∞–µ–º –æ—Ç –≤–∞—Å</a>\n<a href="https://telegra.ph/digfusion--Politika-08-08#%D0%9F%D1%80%D0%B5%D0%B4%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D1%83%D1%81%D0%BB%D1%83%D0%B3">–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥</a>\n<a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A2%D1%80%D0%B5%D0%B1%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-%D0%B4%D0%B8%D0%B0%D0%BB%D0%BE%D0%B3%D0%B5">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ</a></i></blockquote></b>`,

	// "–û–∫–æ–ª–æ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥ <b>–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏</b> –ø–æ—Å–µ—â–∞–ª <b>–ú–æ—Å–∫–æ–≤—Å–∫—É—é –®–∫–æ–ª—É –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ (–ú–®–ü),</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–∏–º–∞—è—Å—å –∏ <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ</b> –ø–æ–≥—Ä—É–∂–∞—è—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—è <b>–ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è</b> —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤,</b> –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Å–æ–∑–¥–∞–≤–∞–ª –∏–∑ —Å–≤–æ–µ–≥–æ <b>–æ–≥—Ä–æ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –ø—Ä–µ—É—Å–ø–µ—Ç—å</b> –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏. –£–∂–µ —Å–µ–≥–æ–¥–Ω—è, —Å–ø—É—Å—Ç—è <b>–Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç</b> —Å –Ω–∞—á–∞–ª–∞ —Å–≤–æ–µ–π <b>–∫–∞—Ä—å–µ—Ä—ã –≤ IT</b> –æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç <b>–º–∞–∫—Å–∏–º—É–º</b> —Å–≤–æ–∏—Ö <b>–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π</b> –≤ <b><i>—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i></b> –∏ <i><b>–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥</b></i> –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —á–∞—Ç-–±–æ—Ç–æ–≤.\n\n–ù–æ, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ <b>–≤—ã–±–æ—Ä –æ—Ç—Ä–∞—Å–ª–∏ –Ω–µ –±—ã–ª –æ—á–µ–≤–∏–¥–Ω—ã–º,</b> —Å–Ω–∞—á–∞–ª–∞ —ç—Ç–æ –±—ã–ª–∞ <b>—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π,</b> –∑–∞—Ç–µ–º —É–ø–æ—Ä –Ω–∞ <b>–¥–∏—Å–∫—Ä–µ—Ç–Ω—É—é –º–∞—Ç–µ–º–∞—Ç–∏–∫—É,</b> –¥–∞–ª–µ–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ <b>–≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è Windows, gameDev,</b> –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º, –ø–æ –ø–æ—Ä—É—á–µ–Ω–∏—é <b>–≥–ª–∞–≤–Ω–æ–∫–æ–º–∞–Ω–¥—É—é—â–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ —à–∫–æ–ª—ã,</b> –æ–Ω —É–≥–ª—É–±–∏–ª—Å—è –≤ <b>–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—É—é</b> –∏ <b>—Å–ª–æ–∂–Ω—É—é –æ—Ç—Ä–∞—Å–ª—å</b> —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ ‚Äì <b>—Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–æ–≤ –≤ Telegram. –ü–æ—Ä—É—á–µ–Ω–∏–µ</b> –∑–∞–∫–ª—é—á–∞–ª–æ—Å—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ <b>—à–∫–æ–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞,</b> –∫–æ—Ç–æ—Ä—ã–π –±—ã <b>–ø–æ–∫–∞–∑—ã–≤–∞–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø–æ–º–∏–Ω–∞–ª –æ –∑–≤–æ–Ω–∫–∞—Ö, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –º–µ–Ω—é —Å—Ç–æ–ª–æ–≤–æ–π</b> –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ! –ï—Å–ª–∏ –≤—ã <b>–æ–∑–Ω–∞–∫–∞–º–ª–∏–≤–∞–ª–∏—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏,</b> —Ç–æ –Ω–µ —Å–ª–æ–∂–Ω–æ –¥–æ–≥–∞–¥–∞—Ç—å—Å—è, —ç—Ç–æ—Ç <b>–ø—Ä–æ—Ä—ã–≤–Ω–æ–π</b> –ø—Ä–æ–µ–∫—Ç ‚Äì <b>¬´–¶–∏—Ñ—Ä–æ–≤–∏—á–æ–∫¬ª,</b> –∫–æ—Ç–æ—Ä—ã–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≥–æ–¥–∏–ª—Å—è <b>–¥–µ—Å—è—Ç–∫–∞–º –ª—é–¥–µ–π –∫–∞–∫ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!</b>",

	// "\n\n<b>–í–æ–∑–Ω–∏–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å,</b> –æ—Ç–∫—É–¥–∞ –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–∞–∑–≤–∞–Ω–∏–µ <b>¬´digfusion¬ª?</b> –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ <b>¬´–¶–∏—Ñ—Ä–æ–≤–∏—á–∫–∞¬ª</b> —è –≤—ã–±–∏—Ä–∞–ª <b>–¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è,</b> –∏ <b>—Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö</b> –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–æ–º –±—ã–ª–∏ –∏–º–µ–Ω–∞, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ <b>–¥–≤—É—Ö —Å–ª–æ–≤ ‚Äì ¬´digital¬ª</b> –∏ <b>¬´school¬ª. Telegram</b> –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–ª <b>–ø–æ –¥–ª–∏–Ω–µ</b> –≤—Å–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑ —ç—Ç–∏—Ö <b>–ø–æ–ª–Ω—ã—Ö</b> —Å–ª–æ–≤ –∏–º–µ–Ω–∞, –ø–æ—ç—Ç–æ–º—É –≤ –≥–æ–ª–æ–≤—É –ø—Ä–∏—à–ª–∏ <b>–≥–µ–Ω–∏–∞–ª—å–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è,</b> —Ç–∞–∫–∏–µ –∫–∞–∫ <b>¬´dig¬ª</b> –∏ <b>¬´sch¬ª</b>, —á—Ç–æ –¥–∞–µ—Ç - <b>digsch</b>. <b>–í—Ç–æ—Ä—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º</b> –æ–∫–∞–∑–∞–ª—Å—è <b>¬´–°–ø–æ—Ä—Ç–∏–≤–∏—á–µ–∫¬ª,</b> –ø–æ –ø—Ä–æ—Å—å–±–µ <b>—Ñ–∏–∑—Ä—É–∫–∞,</b> –∏ –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è <b>—Å—É–¥–µ–π—Å—Ç–≤–∞,</b> —Å–ª–æ–≤–æ <b>¬´sch¬ª (school)</b> –º—ã –∑–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ <b>¬´judge¬ª</b>. –ò–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É <b>–≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∏</b> –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å <b>¬´dig¬ª (digital),</b> –∏ <b>–Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è</b> —Ç–æ–∂–µ –≤–∑—è–ª–∞ —Å–µ–±–µ —Ç–∞–∫—É—é <b>–æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏—Ä–º–µ–Ω–Ω—É—é –ø—Ä–∏—Å—Ç–∞–≤–∫—É!</b>\n\n<b>–ò–¥–µ—è –µ—ë –æ—Å–Ω–æ–≤–∞–Ω–∏—è</b> –≤–æ–∑–Ω–∏–∫–ª–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫, —Ö–æ—Ä–æ—à–æ –∑–∞–¥—É–º–∞–≤—à–∏—Å—å, –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å <b>–º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ</b> –∏ –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –Ω–µ —Ç–æ–ª—å–∫–æ <b>–∏–∑ —Å–≤–æ–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è,</b> –Ω–æ –∏ <b>–ø–æ –≤—Å–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.</b>\n\n<b>–í–æ—Ç –∏ –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º,</b> –º—ã –Ω–∏—á–µ–≥–æ <b>–Ω–µ –¥–µ—Ä–∂–∏–º –≤ —Å–µ–∫—Ä–µ—Ç–µ</b> –æ—Ç —Å–≤–æ–∏—Ö <b>–∫–ª–∏–µ–Ω—Ç–æ–≤! –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> –∏ <b>–≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã</b> –Ω–∞—Ö–æ–¥—è—Ç—Å—è <b>–Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏!</b> –ï—Å–ª–∏ –≤—ã <b>–Ω–∞–º –¥–æ–≤–µ—Ä—è–µ—Ç–µ</b> –∏ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ <b>–≤–µ—Å—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–ø–∞—Å–∏–±–æ –≤–∞–º –æ–≥—Ä–æ–º–Ω–æ–µ! –ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –≤–∞—Å! ‚ù§Ô∏è</b>",
];

let catalogOfServicesText = [
	{
		serviceName: `–û–¥–Ω–æ—Ç–∏–ø–Ω—ã–π –±–æ—Ç`,
		moreAbout:
			"–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.",
		executionDate: "1 - 5 –¥–Ω–µ–π",
		lifeTime: "",
		firstPrice: 0,
		price: 990,
		priceSentence: "",
	},
	{
		serviceName: `–ë–æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞`,
		moreAbout:
			"–û–¥–∏–Ω –≤–µ–¥—É—â–∏–π —Ä–∞–∑–¥–µ–ª —Å –≥–ª–∞–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ª—é–±—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.",

		executionDate: "3 - 8 –¥–Ω–µ–π",
		lifeTime: "",
		firstPrice: 2990,
		price: 1990,
		priceSentence: "",
	},
	{
		serviceName: `–°–ª–æ–∂–Ω–æ—Å–æ—Å—Ç–∞–≤–Ω–æ–π –±–æ—Ç`,
		moreAbout:
			"–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫–æ–Ω—á–µ–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞, —Å–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ä–∞–∑–¥–µ–ª–æ–≤, –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é, –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –∑–∞–¥–∞—á, –∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.",
		executionDate: "8 –∏ –±–æ–ª—å—à–µ –¥–Ω–µ–π",
		lifeTime: "",
		firstPrice: 7990,
		price: 4990,
		priceSentence: "",
	},
	{
		serviceName: `–ù–µ–¥–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`,
		moreAbout:
			"–ù–µ–¥–µ–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞—à–µ–º —Ö–æ—Å—Ç–∏–Ω–≥–µ. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Ö, –∫–æ–º—É –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –∑–∞–º–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º.",
		executionDate: "",
		lifeTime: "7 –¥–Ω–µ–π",
		firstPrice: 0,
		price: 150,
		priceSentence: "",
	},
];

if (catalogOfServicesText)
	for (let i = 0; i < catalogOfServicesText.length; i++) {
		catalogOfServicesText[i].priceSentence = `${
			catalogOfServicesText[i].firstPrice
				? `<s>${catalogOfServicesText[i].firstPrice}</s> <b><i>–æ—Ç ${
						catalogOfServicesText[i].price
					}—Ä (-${Math.floor(
						((catalogOfServicesText[i].firstPrice -
							catalogOfServicesText[i].price) /
							catalogOfServicesText[i].firstPrice) *
							100
					)}%) üî•</i></b>`
				: `<b><i>–æ—Ç ${catalogOfServicesText[i].price}—Ä</i></b>`
		}`;
	}

bot.setMyCommands([
	{
		command: "/restart",
		description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üîÑÔ∏è",
	},
	{
		command: "/catalog",
		description: "–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ üõí",
	},
	{
		command: "/consultation",
		description: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è üßë‚Äçüíª",
	},
	{
		command: "/profile",
		description: "–ü—Ä–æ—Ñ–∏–ª—å ‚öôÔ∏è",
	},
]);

let rndNum, textToSayHello, match, rndId, clientChatId;

async function firstMeeting(chatId, numOfStage = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		switch (numOfStage) {
			case 1:
				dataAboutUser.userAction = "firstMeeting1";

				await bot.editMessageText(
					`<b>–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç</b> –∫–æ–º–ø–∞–Ω–∏—è <b><i>digfusion,</i></b> –≤–∞—à <b>–Ω–∞–¥–µ–∂–Ω—ã–π</b> –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ <b>—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç-–±–æ—Ç–æ–≤!</b> üëã\n\n${moreAboutUsText[1]}`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "–ß—Ç–æ —Ç–∞–∫–æ–µ —á–∞—Ç-–±–æ—Ç‚ùì",
										callback_data: "firstMeeting5",
									},
								],
								[{ text: "–î–∞–ª–µ–µ‚û°Ô∏è", callback_data: "firstMeeting2" }],
							],
						},
					}
				);
				break;
			case 2:
				dataAboutUser.userAction = "firstMeeting2";

				await bot.editMessageText(
					`<b>–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</b> –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ <b>–ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏,</b> —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤–∞–º <b>–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã</b> —Å–∞–º—ã–µ <b>–≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>${moreAboutUsText[0]}`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "–ß—Ç–æ —Ç–∞–∫–æ–µ —á–∞—Ç-–±–æ—Ç‚ùì",
										callback_data: "firstMeeting5",
									},
								],
								[
									{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "firstMeeting1" },
									{
										text: "–î–∞–ª–µ–µ‚û°Ô∏è",
										callback_data: "firstMeeting3",
									},
								],
							],
						},
					}
				);
				break;
			case 3:
				dataAboutUser.userAction = "firstMeeting3";

				await bot.editMessageText(
					`<b>–ú—ã</b> —É–∂–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ <b>–æ —Å–µ–±–µ,</b> —Ç–µ–ø–µ—Ä—å <b>–≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!</b> üòä\n\n<b><a href="https://telegra.ph/digfusion--Politika-08-08">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ digfusion</a></b>\n<i>–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ –≤—Å–µ–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏ digfusion!</i>\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,</b> –Ω–∞–ø–∏—à–∏—Ç–µ <b>–∫–∞–∫ –º–æ–∂–Ω–æ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è</b> –¥–ª—è <b>–¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è?</b> ü§î`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `–ò–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å ${dataAboutUser.login} ‚úÖ`,
										callback_data: "firstMeeting4",
									},
								],
								[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "firstMeeting2" }],
							],
						},
					}
				);
				break;
			case 4:
				menuHome(chatId, false, true);

				// dataAboutUser.userAction = "firstMeeting4";
				// await bot.editMessageText(
				// 	`<b>${dataAboutUser.login},</b> –æ—á–µ–Ω—å –ø—Ä—è—Ç–Ω–æ! üòÅ\n\n–ù–∞ <b>–ø–æ—Å–ª–µ–¥–Ω–µ–º —ç—Ç–∞–ø–µ</b> —è –ø–æ–ø—Ä–æ—à—É <b>–≤–∞—Å</b> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –¥–ª—è <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.</b> üòä`,
				// 	{
				// 		parse_mode: "html",
				// 		chat_id: chatId,
				// 		message_id: usersData.find((obj) => obj.chatId == chatId)
				// 			.messageId,
				// 		disable_web_page_preview: true,
				// 		// reply_markup: {
				// 		// 	inline_keyboard: [[{ text: "", callback_data: "-" }]],
				// 		// },
				// 	}
				// );

				// await bot
				// 	.sendMessage(
				// 		chatId,
				// 		`–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>—É–¥–æ–±–Ω–æ–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ! ‚¨áÔ∏è</b>`,
				// 		{
				// 			parse_mode: "HTML",
				// 			disable_web_page_preview: true,
				// 			reply_markup: {
				// 				keyboard: [
				// 					[
				// 						{
				// 							text: "–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–º–µ—Ä",
				// 							request_contact: true,
				// 							resize_keyboard: true,
				// 						},
				// 					],
				// 				],
				// 			},
				// 		}
				// 	)
				// 	.then((message) => {
				// 		dataAboutUser.messageIdOther = message.message_id;
				// 	});

				break;
			case 5:
				await bot.editMessageText(
					`<b><i>–ß—Ç–æ –∂–µ —Ç–∞–∫–æ–µ —á–∞—Ç-–±–æ—Ç‚ùì</i></b>\n\n–≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, <b>–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π</b> —Ä–∞–∑–ª–∏—á–Ω—ã–µ <b>–∑–∞–ø—Ä–æ—Å—ã</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π <b>–≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∏–∞–ª–æ–≥–∞ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ,</b> —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ <b>—ç—Ç–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫,</b> —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ <b>–≤—ã</b> —Å–µ–π—á–∞—Å —á–∏—Ç–∞–µ—Ç–µ. üòä\n\n<blockquote>–¢–∞–∫–æ–π <b>–ø—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç</b> —Å—Ç–∞—Ç—å –∫–∞–∫ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è <b>–º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏,</b> —Ç–∞–∫ –∏ <b>–æ–±—ã—á–Ω—ã–º –æ–ø—Ä–æ—Å–Ω–∏–∫–æ–º</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö <b>–¥–∞–Ω–Ω—ã—Ö</b> –æ—Ç –≥—Ä—É–ø–ø –ª—é–¥–µ–π.</blockquote>\n\n–í <b>–ø—Ä–∏–º–µ—Ä</b> –º—ã –ø—Ä–∏–≤–µ–¥–µ–º –Ω–∞—à–∏ <b>–∫—Ä—É–ø–Ω—ã–µ</b> –∏ <b>—É—Å–ø–µ—à–Ω—ã–µ —Ä–∞–±–æ—Ç—ã.</b> ‚¨áÔ∏è`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									// {
									// 	text: "–¶–∏—Ñ—Ä–æ–≤–∏—á–æ–∫ ü§ñ",
									// 	url: "https://t.me/digschbot",
									// },
									{
										text: "–ê–ª–≥–µ–±—Ä–∞–≤–∏—á–æ–∫ üßÆ",
										url: "https://t.me/digmathbot",
									},
								],
								[
									{
										text: "–°–ø–æ—Ä—Ç–∏–≤–∏—á–æ–∫ üèÄ",
										url: "https://t.me/digjudgebot",
									},
									{
										text: "Never Finished üèÖ",
										url: "https://t.me/neverfinishedbot",
									},
								],
								[
									{
										text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
										callback_data:
											dataAboutUser.userAction == "firstMeeting1"
												? "firstMeeting1"
												: dataAboutUser.userAction ==
													  "firstMeeting2"
													? "firstMeeting2"
													: "",
									},
								],
							],
						},
					}
				);
				break;
			case 2:
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function menuHome(
	chatId,
	navigationListIsActive = false,
	beforeFirstMeeting = false
) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	const dateNowHHNN = new Date().getHours() * 100 + new Date().getMinutes();

	if (dateNowHHNN < 1200 && dateNowHHNN >= 600) textToSayHello = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
	else if (dateNowHHNN < 1700 && dateNowHHNN >= 1200)
		textToSayHello = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
	else if (dateNowHHNN < 2200 && dateNowHHNN >= 1700)
		textToSayHello = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
	else if (dateNowHHNN >= 2200 || dateNowHHNN < 600)
		textToSayHello = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";

	try {
		beforeFirstMeeting =
			dataAboutUser.userAction == "firstMeeting3" ? true : false;

		dataAboutUser.registrationIsOver = true;
		dataAboutUser.supportiveCount = 1;

		dataAboutUser.userAction = "menuHome";

		dataAboutUser.userStatus =
			dataAboutUser.chatId == jackId
				? "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üëë"
				: (dataAboutUser.requestsData &&
							dataAboutUser.requestsData.length < 3) ||
					  !dataAboutUser.requestsData
					? "–ö–ª–∏–µ–Ω—Ç üôÇ"
					: dataAboutUser.requestsData.length >= 3
						? "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç üòé"
						: dataAboutUser.requestsData.length >= 6
							? "–û—Å–æ–±—ã–π –∫–ª–∏–µ–Ω—Ç ü§©"
							: dataAboutUser.requestsData.length >= 10
								? "–õ—É—á—à–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å ü§¥"
								: "";

		let navigationListText = `<b>"–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ üõí"</b> - —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞.\n\n<b>"–ò–¥–µ–∏ üí°"</b> - —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π –¥–ª—è –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n<b>"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è üßë‚Äçüíª"</b> - –≤ –∂–∏–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ –ø–æ–¥—Å–∫–∞–∂–µ–º –∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º –≤–∞—Å –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É!\n\n<b>"–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã üì±"</b> - —Å–ø–∏—Å–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n<b>"–û –Ω–∞—Å üë•"</b> - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–π –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –∏ –Ω–∞—à–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö.\n\n<b>"–û—Ç–∑—ã–≤—ã üìß"</b> - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–Ω–µ–Ω–∏–π –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.\n\n<b>"–ü—Ä–æ—Ñ–∏–ª—å ‚öôÔ∏è"</b> - –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏ –ø—Ä–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.`;

		await bot.editMessageText(
			`${
				beforeFirstMeeting
					? `<b>${dataAboutUser.login}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üôè</b>\n\n–í–∞—Å –≤—Å—Ç—Ä–µ—á–∞–µ—Ç <b>–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–Ω–æ —Ä–∞—Å—á–∏—Ç–∞—Ç—å –≤ <b>"–ö–∞—Ç–∞–ª–æ–≥–µ —É—Å–ª—É–≥"!</b>`
					: `<b>${textToSayHello}, ${dataAboutUser.login}! </b>`
			}\n\n${
				navigationListIsActive
					? `<b><a href="https://t.me/${BotName}/?start=hideNavigationListInMenuHome">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á©</a></b><blockquote>${navigationListText}<b>\n\n<a href="https://t.me/${BotName}/?start=hideNavigationListInMenuHome">–°–∫—Ä—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é</a></b></blockquote>`
					: `<b><a href="https://t.me/${BotName}/?start=showNavigationListInMenuHome">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</a></b>`
			}\n\n<b>–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ü§î</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `${
									dataAboutUser.requestsData &&
									dataAboutUser.requestsData.find(
										(obj) => obj.isActive
									)
										? `‚ùó–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ${
												dataAboutUser.requestsData.find(
													(obj) => obj.isActive
												).requestId
											} üïë`
										: ""
								}`,
								callback_data: "myRequest",
							},
						],
						[
							{
								text: "–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ üõí",
								callback_data: "catalogOfServices",
							},
						],
						[
							{ text: "–ò–¥–µ–∏ üí°", callback_data: "ideasForProjects" },
							{ text: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è üßë‚Äçüíª", callback_data: "consultation" },
						],
						[
							{
								text: "–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã üì±",
								callback_data: "ourProjectsList0",
							},
						],
						[
							{ text: "–û –Ω–∞—Å üë•", callback_data: "moreAboutUs1" },
							{ text: "–û—Ç–∑—ã–≤—ã üìß", callback_data: "feedbacksList" },
						],

						[{ text: "–ü—Ä–æ—Ñ–∏–ª—å ‚öôÔ∏è", callback_data: "settings" }],
						[
							{
								text: `${
									chatId == jackId || chatId == qu1z3xId
										? "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä üõ†Ô∏è"
										: ""
								}`,
								callback_data: "dialogBuilder1",
							},
							{
								text: `${
									chatId == jackId || chatId == qu1z3xId
										? `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üí†`
										: ""
								}`,
								callback_data: "adminMenu",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function catalogOfServices(chatId, serviceNum = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	const dataAbout–°ertainRequest = dataAboutUser.requestsData
		? dataAboutUser.requestsData.find((obj) => obj.isActive)
		: null;

	try {
		let text = "";
		for (let i = 1; i <= catalogOfServicesText.length; i++) {
			text += `${
				serviceNum == i
					? `\n\n<b>‚Ä¢ ${i}. ${
							catalogOfServicesText[serviceNum - 1].serviceName
						} ‚Ä¢\n</b><blockquote>${
							dataAbout–°ertainRequest &&
							dataAbout–°ertainRequest.serviceNum == i
								? `<i>–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–º–∏ —É—Å–ª—É–≥–∞</i> - <a href="https://t.me/${BotName}/?start=myRequest">–∫ –∑–∞—è–≤–∫–µ</a>\n\n`
								: ``
						}<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> ${
							catalogOfServicesText[serviceNum - 1].moreAbout
						}${
							catalogOfServicesText[serviceNum - 1].lifeTime
								? `\n\n<b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> ${
										catalogOfServicesText[serviceNum - 1].lifeTime
									}`
								: ``
						}${
							catalogOfServicesText[serviceNum - 1].executionDate
								? `\n\n<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> ${
										catalogOfServicesText[serviceNum - 1]
											.executionDate
									} ‚åõ`
								: ``
						}\n\n<b>–¶–µ–Ω–∞:</b> ${
							catalogOfServicesText[serviceNum - 1].priceSentence
						} üí∞${
							serviceNum != 4
								? `\n\n<b><a href="https://t.me/${BotName}/?start=ideasForProjects">–ò–¥–µ–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞</a></b>`
								: ``
						}</blockquote>`
					: `\n\n<b>${i}. </b>${catalogOfServicesText[i - 1].serviceName}${
							dataAbout–°ertainRequest &&
							dataAbout–°ertainRequest.serviceNum == i
								? ` - <b><a href="https://t.me/${BotName}/?start=myRequest">–∫ –∑–∞—è–≤–∫–µ</a></b>`
								: ``
						}`
			}`;
		}

		await bot.editMessageText(
			`<b><i>üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ üõí</i></b>\n\n<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç</b> –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º <b>–¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>${text}${
				dataAbout–°ertainRequest
					? `\n\n<b>–£ –≤–∞—Å</b> —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ <b>—É—Å–ª—É–≥–∞ ‚Ññ${dataAbout–°ertainRequest.serviceNum},</b> –Ω–æ –≤—ã–±–æ—Ä <b>–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å!</b> üòâ`
					: ``
			}\n\n<b><a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%B2%D1%8B-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D1%82%D1%8C-%D0%BE%D1%82-%D0%BD%D0%B0%D1%81">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ digfusion</a></b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `‚¨ÜÔ∏è`,
								callback_data: "previousServiceNum",
							},
							{
								text: `‚Ññ${serviceNum} ‚Ä¢ ${
									catalogOfServicesText[serviceNum - 1].price
								}—Ä`,
								callback_data: `${
									dataAbout–°ertainRequest &&
									dataAbout–°ertainRequest.serviceNum == serviceNum
										? `myRequest`
										: `warning–°onsultationOnService${serviceNum}`
								}`,
							},
							{
								text: `‚¨áÔ∏è`,
								callback_data: "nextServiceNum",
							},
						],
						[
							{
								text: `${
									dataAbout–°ertainRequest &&
									dataAbout–°ertainRequest.serviceNum == serviceNum
										? `${
												dataAbout–°ertainRequest
													? `‚ùó–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ${dataAbout–°ertainRequest.requestId} üïë`
													: ""
											}`
										: `–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ ‚Ññ${serviceNum}üí≠`
								}`,
								callback_data: `${
									dataAbout–°ertainRequest &&
									dataAbout–°ertainRequest.serviceNum == serviceNum
										? `myRequest`
										: `warning–°onsultationOnService${serviceNum}`
								}`,
							},
						],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{
								text: "–ò–¥–µ–∏ üí°",
								callback_data: "ideasForProjects",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function ideasForProjects(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	dataAboutUser.userAction = "ideasForProjects";
	try {
		await bot.editMessageText(
			`<b><i>üí≠ –ò–¥–µ–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ üí°</i></b>\n\n–ú—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏ <b><i>–Ω–µ–±–æ–ª—å—à–æ–π</i> —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π –¥–ª—è –Ω–∞—à–∏—Ö —É—Å–ª—É–≥:\n\n1. ${catalogOfServicesText[0].serviceName}</b> - <a href="https://t.me/${BotName}/?start=catalogOfServices1">–∫ —É—Å–ª—É–≥–µ</a><b><blockquote>–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:\n‚Ä¢ –û–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ-–∑–∞–¥–∞–≤–∞–µ–º—ã –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤\n‚Ä¢ –ó–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</blockquote>\n2. ${catalogOfServicesText[1].serviceName}</b> - <a href="https://t.me/${BotName}/?start=catalogOfServices2">–∫ —É—Å–ª—É–≥–µ</a><b><blockquote>–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:\n‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö\n‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π\n‚Ä¢ –°–±–æ—Ä –ª—é–±–æ–π –∏–Ω—Ñ–æ—Ä–æ–º–∞—Ü–∏–∏</blockquote>\n3. ${catalogOfServicesText[2].serviceName}</b> - <a href="https://t.me/${BotName}/?start=catalogOfServices3">–∫ —É—Å–ª—É–≥–µ</a><b><blockquote>–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —É—Å–ª—É–≥ –∫–æ–º–ø–∞–Ω–∏–∏\n‚Ä¢ –ú–∏–Ω–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω\n‚Ä¢ –ú–∏–Ω–∏ –æ–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞\n‚Ä¢ –£—á–µ–±–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</blockquote>\n\n–ú—ã –æ—á–µ–Ω—å –Ω–∞–¥–µ–µ–º—Å—è, </b>—á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∏–∑ –∏–¥–µ–π <b>–ø—Ä–∏–≤–ª–µ–∫–ª–∞ –≤–∞—Å</b> –∫ <b>–Ω–∞—à–∏–º —É—Å–ª—É–≥–∞–º!</b> ‚ò∫Ô∏è`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ üõí",
								callback_data: "catalogOfServices",
							},
						],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{ text: "–û–±—Å—É–¥–∏—Ç—å üí≠", callback_data: "consultation" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function consultationOnService(chatId, stageNum, serviceNum) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		switch (stageNum) {
			case 1:
				await bot.editMessageText(
					`<b>${
						dataAboutUser.login
					},</b> –≤—ã –≤—ã–±—Ä–∞–ª–∏ <b>—É—Å–ª—É–≥—É ‚Ññ${serviceNum}:\n\n${serviceNum}. ${
						catalogOfServicesText[serviceNum - 1].serviceName
					}\n</b><blockquote><b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> ${
						catalogOfServicesText[serviceNum - 1].moreAbout
					}${
						catalogOfServicesText[serviceNum - 1].lifeTime
							? `\n\n<b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> ${
									catalogOfServicesText[serviceNum - 1].lifeTime
								}`
							: ``
					}${
						catalogOfServicesText[serviceNum - 1].executionDate
							? `\n\n<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> ${
									catalogOfServicesText[serviceNum - 1].executionDate
								} ‚åõ`
							: ``
					}\n\n<b>–¶–µ–Ω–∞:</b> ${
						catalogOfServicesText[serviceNum - 1].priceSentence
					} üí∞</blockquote>\n\n${
						dataAboutUser.requestsData &&
						dataAboutUser.requestsData.find((obj) => obj.isActive)
							? `<b>‚ùó–†–∞–Ω–µ–µ,</b> –≤—ã –≤—ã–±–∏—Ä–∞–ª–∏ <b>—É—Å–ª—É–≥—É ‚Ññ${
									dataAboutUser.requestsData.find(
										(obj) => obj.isActive
									).serviceNum
								} "${
									catalogOfServicesText[
										dataAboutUser.requestsData.find(
											(obj) => obj.isActive
										).serviceNum - 1
									].serviceName
								}".</b>\n\n<b><a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%B2%D1%8B-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D1%82%D1%8C-%D0%BE%D1%82-%D0%BD%D0%B0%D1%81">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ digfusion</a></b>\n<i>–ù–∞–∂–∏–º–∞—è ¬´–ü–æ–ª—É—á–∏—Ç—å!¬ª, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ –≤—Å–µ–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏ digfusion!</i>\n\n–•–æ—Ç–∏—Ç–µ –ª–∏ <b>–∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä</b> –∏ <b>–ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</b> –ø–æ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–µ? ü§î`
							: `<b><a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%B2%D1%8B-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D1%82%D1%8C-%D0%BE%D1%82-%D0%BD%D0%B0%D1%81">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ digfusion</a></b>\n<i>–ù–∞–∂–∏–º–∞—è ¬´–ü–æ–ª—É—á–∏—Ç—å!¬ª, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ –≤—Å–µ–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏ digfusion!</i>\n\n–í—ã <b>–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ</b> —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å <b>–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —ç—Ç–æ–π —É—Å–ª—É–≥–µ?</b> ü§î`
					}`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
										callback_data: "catalogOfServices",
									},
									{
										text: "–ü–æ–ª—É—á–∏—Ç—å! ‚úÖ",
										callback_data: `consultationOnService${serviceNum}`,
									},
								],
							],
						},
					}
				);
				break;
			case 2:
				if (
					dataAboutUser.requestsData &&
					dataAboutUser.requestsData.find((obj) => obj.isActive)
				)
					dataAboutUser.requestsData.at(-1).isActive = false;

				let isUnique = false;
				while (!isUnique) {
					rndId = Math.floor(Math.random() * 9999);
					isUnique = true;

					if (usersData) {
						for (let i = 0; i < usersData.length; i++) {
							if (usersData[i].requestsData)
								for (
									let j = 0;
									j < usersData[i].requestsData.length;
									j++
								) {
									if (
										usersData[i].requestsData[j].requestId === rndId
									) {
										isUnique = false;
										break;
									}
								}
							if (!isUnique) break;
						}
					} else break;
				}

				if (!dataAboutUser.requestsData) {
					dataAboutUser.requestsData = [];
				}

				dataAboutUser.requestsData.push({
					serviceNum: dataAboutUser.selectedService,

					creationTime: `${String(new Date().getHours()).padStart(
						2,
						"0"
					)}:${String(new Date().getMinutes()).padStart(2, "0")}`,
					creationDate: `${new Date()
						.getDate()
						.toString()
						.padStart(2, "0")}.${(new Date().getMonth() + 1)
						.toString()
						.padStart(2, "0")}.${(new Date().getFullYear() % 100)
						.toString()
						.padStart(2, "0")}`,
					date: new Date(),

					requestId: rndId,
					isActive: true,
				});

				await bot.editMessageText(
					`<b>–í–∞—à–∞ <a href="https://t.me/${BotName}/?start=myRequest">–∑–∞—è–≤–∫–∞ ‚Ññ${rndId}</a></b> –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <b>–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ! üïë</b>\n\n<b>–í—ã</b> –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å <b>–Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é</b> –∏–ª–∏ <b>–¥–æ–∂–¥–∞—Ç—å—Å—è</b> –Ω–∞—à–µ–π <b>—Å–≤—è–∑–∏ —Å –≤–∞–º–∏! üòâ</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é üí≠",
										callback_data: "consultation",
									},
								],
								[
									{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
									{
										text: "–ö –∑–∞—è–≤–∫–µü™™",
										callback_data: "myRequest",
									},
								],
							],
						},
					}
				);
				++systemData.newRequestsToday;

				//! –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ê–î–ú–ò–ù–£ –û –ó–ê–Ø–í–ö–ï

				await bot
					.sendMessage(
						jackId,
						`<b>–î–∞–≤–∏–¥, –ø–æ—Å—Ç—É–ø–∏–ª–∞</b> –∑–∞—è–≤–∫–∞ –Ω–∞ <b>—É—Å–ª—É–≥—É ‚Ññ${dataAboutUser.selectedService}‚ùó\n\n–û—Ç: <a href="tg://user?id=${dataAboutUser.chatId}">${dataAboutUser.login}</a> ‚Ä¢ <code>${dataAboutUser.chatId}</code>\n\n–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–µ —Å—Ä–∞–∑—É? üßê</b>`,
						{
							parse_mode: "HTML",
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: `–ö –∑–∞—è–≤–∫–µ ü™™`,
											callback_data: `requestWithId${rndId}`,
										},
									],
									[
										{
											text: "–ö–ª–∏–µ–Ω—Ç üë§",
											url: `tg://user?id=${dataAboutUser.chatId}`,
										},
										{
											text: "–í—Å–µ –∑–∞—è–≤–∫–∏ üßë‚Äçüíª",
											callback_data: `requestsList1`,
										},
									],
									[
										{
											text: "–ü–æ–∑–∂–µ ‚ùå",
											callback_data: "deleteexcess",
										},
									],
								],
							},
						}
					)
					.then((message) => {
						dataAboutUser.messageIdOther = message.message_id;
					});
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function consultation(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	dataAboutUser.userAction = "consultation";

	try {
		await bot.editMessageText(
			`<b><i>üí≠ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —É—Å–ª—É–≥–∞–º üßë‚Äçüíª</i></b>\n\n–ü–µ—Ä–µ–¥ –¥–∏–∞–ª–æ–≥–æ–º, <b>–ø–æ–∂–∞–ª—É–π—Å—Ç–∞,</b> –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å <b>—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –Ω–∞–º–∏!\n\n<a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A2%D1%80%D0%B5%D0%B1%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-%D0%B4%D0%B8%D0%B0%D0%BB%D0%BE%D0%B3%D0%B5">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è digfusion –≤ –¥–∏–∞–ª–æ–≥–µ</a></b>\n<i>–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ –≤—Å–µ–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏ digfusion!</i>\n\n–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: <b>–î–∞–≤–∏–¥ üßë‚Äçüíª</b>\n–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å <b>10:00</b> –ø–æ <b>21:00, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</b>${
				dataAboutUser.requestsData &&
				dataAboutUser.requestsData.find((obj) => obj.isActive)
					? `\n\n<b>‚ùï–°–∫–æ–ø–∏—Ä—É–π—Ç–µ</b> –Ω–æ–º–µ—Ä <b>–≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:</b> <code>‚Ññ${
							dataAboutUser.requestsData.find((obj) => obj.isActive)
								.requestId
						}</code>`
					: ``
			}`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üí≠`,
								url: "https://t.me/digfusionsupport",
							},
						],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{ text: "–ö–∞—Ç–∞–ª–æ–≥ üõí", callback_data: "catalogOfServices" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function ourProjectsList(chatId, projectNum = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	let ourProjectsInfo = [
		// {
		// 	nameLink: `–¶–∏—Ñ—Ä–æ–≤–∏—á–æ–∫ ü§ñ`,
		// 	botName: "digschbot",
		// 	moreAboutText: `–¶–∏—Ñ—Ä–æ–≤–æ–π —à–∫–æ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —Ü–µ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äî —É–ª—É—á—à–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ —Å —É—á–µ–±–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º. –≠—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —à–∫–æ–ª—å–Ω–æ–º—É –ø–æ—Ä—Ç–∞–ª—É, –ª–∏—à—ë–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –≤ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö, –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤ –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.`,
		// 	serviceName: `${catalogOfServicesText[2].serviceName} - <a href="https://t.me/${BotName}/?start=catalogOfServices3">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${catalogOfServicesText[2].priceSentence}`,
		// },
		{
			nameLink: `digfusion | —É—Å–ª—É–≥–∏ ‚òëÔ∏è`,
			botName: "digfusionbot",
			moreAboutText: `–î–∞, —ç—Ç–æ –Ω–∞—à –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –°–µ—Ä—å—ë–∑–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞, –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–º —Å–∞–º–∏, –≤–µ–¥—å —Å–µ–π—á–∞—Å –≤—ã —á–∏—Ç–∞–µ—Ç–µ —Ç–µ–∫—Å—Ç —ç—Ç–æ–≥–æ –±–æ—Ç–∞! üòâ`,
			serviceName: `${catalogOfServicesText[2].serviceName} - <a href="https://t.me/${BotName}/?start=catalogOfServices2">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${catalogOfServicesText[2].priceSentence}`,
		},
		{
			nameLink: `–ê–ª–≥–µ–±—Ä–∞–≤–∏—á–æ–∫ üßÆ`,
			botName: "digmathbot",
			moreAboutText: `–õ–∏—á–Ω—ã–π —Ä–µ–ø–∏—Ç–∏—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∫–∏ –ø–æ –≤–∞—à–µ–º—É —É—Ä–æ–≤–Ω—é –∑–Ω–∞–Ω–∏–π. –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å—á—ë—Ç–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ —Ñ–æ—Ä–º–µ.`,
			serviceName: `${catalogOfServicesText[2].serviceName} - <a href="https://t.me/${BotName}/?start=catalogOfServices3">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${catalogOfServicesText[2].priceSentence}`,
		},
		{
			nameLink: `–°–ø–æ—Ä—Ç–∏–≤–∏—á–æ–∫ üèÄ`,
			botName: "digjudgebot",
			moreAboutText: `–ò–¥–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç—è–∑–∞–Ω–∏–π! –û–Ω –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—á–µ—Ç –º–∞—Ç—á–∞, –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–∏—è—Ö, —Å—á–µ—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã –∏ –º–Ω–æ–≥–æ–º –¥—Ä—É–≥–æ–º.`,
			serviceName: `${catalogOfServicesText[1].serviceName} - <a href="https://t.me/${BotName}/?start=catalogOfServices2">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${catalogOfServicesText[1].priceSentence}`,
		},
		{
			nameLink: `Never Finished üèÖ`,
			botName: "neverfinishedbot",
			moreAboutText: `–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã! –í–µ–¥–∏ —É—á–µ—Ç —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω—è–π –≤–∞–∂–Ω—ã–µ –º—ã—Å–ª–∏ –∏ —Å–ª–µ–¥–∏ –∑–∞ —Ö–æ—Ä–æ—à–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏. –ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å –∏ —Å—Ç–∞–Ω—å –ª—É—á—à–µ –≤–º–µ—Å—Ç–µ —Å Never Finished!`,
			serviceName: `${catalogOfServicesText[1].serviceName} - <a href="https://t.me/${BotName}/?start=catalogOfServices2">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${catalogOfServicesText[1].priceSentence}`,
		},
		{
			nameLink: `–û–ø—Ä–æ—Å–Ω–∏—á–æ–∫‚ùì`,
			botName: "digformsbot",
			moreAboutText: `–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–µ–º–∞—Ç–∏–∫–∞–º. –ê–∫—Ç–∏–≤–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤.`,
			serviceName: `${catalogOfServicesText[0].serviceName} - <a href="https://t.me/${BotName}/?start=catalogOfServices1">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${catalogOfServicesText[0].priceSentence}`,
		},
		// {
		// 	nameLink: `–¢–µ—Å—Ç–∏—Ä–æ–≤–∏—á–æ–∫ ‚öôÔ∏è`,
		// 	botName: "-",
		// 	moreAboutText: `–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ‚Äî –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ª—é–±–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –ù–µ –Ω–µ—Å–µ—Ç –∑–∞ —Å–æ–±–æ–π —Å–º—ã—Å–ª–∞ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ. –°—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–∞–∑–º–µ—â–∞—Ç—å –Ω–µ–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ!`,
		// 	serviceName: `–†–∞–∑–ª–∏—á–Ω—ã–µ\n\n<b>–¶–µ–Ω–∞:</b> –ù–µ—Ç`,
		// },
		// {
		// 	nameLink: `–û—Ç–ª–∞–¥–æ–≤–∏—á–æ–∫ üìä`,
		// 	botName: "digconsolebot",
		// 	moreAboutText: `–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º, –æ–± –æ—à–∏–±–∫–∞—Ö –≤ —Ä–∞–±–æ—Ç–µ –∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ù–µ –Ω–µ—Å–µ—Ç –∑–∞ —Å–æ–±–æ–π —Å–º—ã—Å–ª–∞ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.`,
		// 	serviceName: `${catalogOfServicesText[0].serviceName} - <a href="https://t.me/${BotName}/?start=catalogOfServices1">–∫ —É—Å–ª—É–≥–µ</a>\n\n<b>–¶–µ–Ω–∞:</b> ${catalogOfServicesText[0].priceSentence}`,
		// },
	];

	try {
		dataAboutUser.userAction = "ourProjectsList";

		await bot.editMessageText(
			`<b><i>üõ†Ô∏è –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã üì±</i></b>\n\n${
				projectNum == 0
					? `–í —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã <b>–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b> –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ <b>–∑–∞–∫–∞–∑–æ–≤ –æ—Ç –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤! üõçÔ∏è</b><i>\n\n(–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã, –ø–æ –ø—Ä–æ—Å—å–±–µ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –∏—Ö –ø—Ä–∞–≤–∞—Ö)</i>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π <b>–ø—Ä–æ–µ–∫—Ç</b> –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å <b>–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</b> –∏ <b>–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª! üòâ</b>`
					: `–ü—Ä–æ–µ–∫—Ç: <b>${
							ourProjectsInfo[projectNum - 1].nameLink
						}\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b><blockquote><b>–î–ª—è —á–µ–≥–æ:</b> ${
							ourProjectsInfo[projectNum - 1].moreAboutText
						}\n\n<b>–£—Å–ª—É–≥–∞:</b> ${
							ourProjectsInfo[projectNum - 1].serviceName
						}</blockquote>\n\n${
							ourProjectsInfo[projectNum - 1].botName != "-"
								? ourProjectsInfo[projectNum - 1].botName ==
									"digfusionbot"
									? `<b>–í—ã —É–∂–µ –≤ —ç—Ç–æ–º –±–æ—Ç–µ! ü§ó</b>`
									: `<b><a href = "https://t.me/${
											ourProjectsInfo[projectNum - 1].botName
										}">–û–ø—Ä–æ–±—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</a></b>`
								: `<b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ü´§</b>`
						}`
			}`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `${
									projectNum == 1
										? "‚Ä¢ digfusion | —É—Å–ª—É–≥–∏ ‚òëÔ∏è ‚Ä¢"
										: "digfusion | —É—Å–ª—É–≥–∏ ‚òëÔ∏è"
								}`,
								callback_data: `${
									projectNum == 1 ? "-" : "ourProjectsList1"
								}`,
							},
						],
						[
							{
								text: `${
									projectNum == 2
										? "‚Ä¢ –ê–ª–≥–µ–±—Ä–∞–≤–∏—á–æ–∫ üßÆ ‚Ä¢"
										: "–ê–ª–≥–µ–±—Ä–∞–≤–∏—á–æ–∫ üßÆ"
								}`,
								callback_data: `${
									projectNum == 2 ? "-" : "ourProjectsList2"
								}`,
							},
							{
								text: `${
									projectNum == 3
										? "‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–∏—á–æ–∫ üèÄ ‚Ä¢"
										: "–°–ø–æ—Ä—Ç–∏–≤–∏—á–æ–∫ üèÄ"
								}`,
								callback_data: `${
									projectNum == 3 ? "-" : "ourProjectsList3"
								}`,
							},
						],
						[
							{
								text: `${
									projectNum == 4
										? "‚Ä¢ Never Finished üèÖ ‚Ä¢"
										: "Never Finished üèÖ "
								}`,
								callback_data: `${
									projectNum == 4 ? "-" : "ourProjectsList4"
								}`,
							},
							{
								text: `${
									projectNum == 5
										? "‚Ä¢ –û–ø—Ä–æ—Å–Ω–∏—á–æ–∫ ‚ùì ‚Ä¢"
										: "–û–ø—Ä–æ—Å–Ω–∏—á–æ–∫ ‚ùì"
								}`,
								callback_data: `${
									projectNum == 5 ? "-" : "ourProjectsList5"
								}`,
							},
						],
						// [
						// 	{
						// 		text: `${
						// 			projectNum == 6
						// 				? "‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∏—á–æ–∫ ‚öôÔ∏è ‚Ä¢"
						// 				: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∏—á–æ–∫ ‚öôÔ∏è"
						// 		}`,
						// 		callback_data: `${
						// 			projectNum == 6 ? "-" : "ourProjectsList6"
						// 		}`,
						// 	},
						// 	{
						// 		text: `${
						// 			projectNum == 7
						// 				? "‚Ä¢ –û—Ç–ª–∞–¥–æ–≤–∏—á–æ–∫ üìä ‚Ä¢"
						// 				: "–û—Ç–ª–∞–¥–æ–≤–∏—á–æ–∫ üìä"
						// 		}`,
						// 		callback_data: `${
						// 			projectNum == 7 ? "-" : "ourProjectsList7"
						// 		}`,
						// 	},
						// ],
						[
							{
								text: `‚¨ÖÔ∏è–í –º–µ–Ω—é`,
								callback_data: "exit",
							},
							{
								text: `–û—Ç–∑—ã–≤—ã üìß`,
								callback_data: "feedbacksList",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function moreAboutUs(chatId, numOfStage = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "moreAboutUs";

		// <b>–ò—Å—Ç–æ—Ä–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∏—è</b> –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ <b>–Ω–µ–æ–±—ã—á–Ω–∞</b> –∏ <b>–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞,</b> –æ–Ω–∞ –ª–µ–∂–∏—Ç <b>–Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –Ω–∏–∫–∞–∫–∏—Ö —Ç–∞–π–Ω! üòâ</b>\n\n
		await bot.editMessageText(
			`<b><i>üë• –û –Ω–∞—Å ‚Ä¢ ${
				numOfStage == 1
					? `–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ üèÜ`
					: numOfStage == 2
						? "–û –∫–æ–º–ø–∞–Ω–∏–∏ ‚ÑπÔ∏è"
						: numOfStage == 3
							? "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ üìñ"
							: ``
			}</i></b>\n\n${
				numOfStage == 1
					? `<b>–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</b> –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ <b>–ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏,</b> —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤–∞–º <b>–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã</b> —Å–∞–º—ã–µ <b>–≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>${
							moreAboutUsText[numOfStage - 1]
						}<b>\n<a href="https://t.me/digfusion">digfusion | –∏–Ω—Ñ–æ</a> ‚Ä¢ <a href="https://t.me/digfusionsupport">digfusion | –ø–æ–¥–¥–µ—Ä–∂–∫–∞</a></b>`
					: numOfStage == 2
						? `–ö–æ–º–ø–∞–Ω–∏—è <b><i>digfusion</i></b> - <b>–Ω–∞—á–∏–Ω–∞—é—â–∏–π —Å—Ç–∞—Ä—Ç–∞–ø</b> –≤ —Å—Ñ–µ—Ä–µ —É—Å–ª—É–≥ –∏ –≤–∞—à <b>–Ω–∞–¥–µ–∂–Ω—ã–π</b> –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ <b>—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç-–±–æ—Ç–æ–≤!</b> üòâ\n\n${
								moreAboutUsText[numOfStage - 1]
							}\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å <b>¬´–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –≤–∞–º —Å—Ç–æ–∏—Ç –∏–º–µ—Ç—å —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è —Å–≤–æ–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π¬ª</b> –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º <b>Telegram –∫–∞–Ω–∞–ª–µ! ü§ó\n\n<a href="https://t.me/digfusion">digfusion | –∏–Ω—Ñ–æ</a> ‚Ä¢ <a href="https://t.me/digfusionsupport">digfusion | –ø–æ–¥–¥–µ—Ä–∂–∫–∞</a></b>`
						: numOfStage == 3
							? `${
									moreAboutUsText[numOfStage - 1]
								}<b><a href ="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%B2%D1%8B-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D1%82%D1%8C-%D0%BE%D1%82-%D0%BD%D0%B0%D1%81">–ü–æ–ª–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç digfusion</a></b>`
							: ``
			}`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `${
									numOfStage == 1
										? `‚Ä¢ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ üèÜ ‚Ä¢`
										: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ üèÜ"
								}`,
								callback_data: `${
									numOfStage == 1 ? `-` : "moreAboutUs1"
								}`,
							},
						],
						[
							{
								text: `${
									numOfStage == 2
										? `‚Ä¢ –û –∫–æ–º–ø–∞–Ω–∏–∏ ‚ÑπÔ∏è ‚Ä¢`
										: "–û –∫–æ–º–ø–∞–Ω–∏–∏ ‚ÑπÔ∏è"
								}`,
								callback_data: `${
									numOfStage == 2 ? `-` : "moreAboutUs2"
								}`,
							},
							{
								text: `${
									numOfStage == 3 ? `‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫–∞ üìñ ‚Ä¢` : "–ü–æ–ª–∏—Ç–∏–∫–∞ üìñ"
								}`,
								callback_data: `${
									numOfStage == 3 ? `-` : "moreAboutUs3"
								}`,
							},
						],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{ text: "–°–≤—è–∑—å üí≠", callback_data: "consultation" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

function truncateString(text, maxLength) {
	if (text && text.length > maxLength) {
		return text.substring(0, maxLength - 3) + "..";
	}
	return text;
}

async function feedbacksList(chatId, listNum = 1, feedbackId = null) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	let text = "";
	let count = 0;
	let countOfLists = 1;

	try {
		if (feedbackId) {
			let allFeedbacksData = [];
			usersData.forEach((user) => {
				if (user.feedbacksData)
					user.feedbacksData.forEach((feedback) => {
						allFeedbacksData.push(feedback);
					});
			});

			const dataAboutFeedback = allFeedbacksData.find(
				(obj) => obj.feedbackId == feedbackId
			);

			await bot.editMessageText(
				`<b><i>üìß –û—Ç–∑—ã–≤ ‚Ä¢ <code>${feedbackId}</code> üë§\n\n</i>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b><blockquote><b>${
					dataAboutFeedback.from
				} ‚Ä¢ ${
					usersData.find(
						(user) =>
							user.feedbacksData &&
							user.feedbacksData.find(
								(feedback) => feedback.feedbackId == feedbackId
							)
					).userStatus
				}\n\n‚Ññ${dataAboutFeedback.serviceNum} "${
					catalogOfServicesText[dataAboutFeedback.serviceNum - 1]
						.serviceName
				}" - <a href="https://t.me/${BotName}/?start=catalogOfServices${
					dataAboutFeedback.serviceNum
				}">–∫ —É—Å–ª—É–≥–µ</a></b>${
					dataAboutFeedback.productLink
						? `\n\n<b>–ü—Ä–æ–¥—É–∫—Ç:</b> <a href="${dataAboutFeedback.productLink}">–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞</a>`
						: ``
				}\n\n<b>–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>\n<i>"${
					dataAboutFeedback.feedbackText
				}</i>"\n\n<b>–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:</b> ${
					dataAboutFeedback.opinionRating
				}</blockquote>\n<b>${dataAboutFeedback.creationTime}</b> - ${
					dataAboutFeedback.creationDate
				}`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text:
										(chatId == jackId || chatId == qu1z3xId) &&
										!dataAboutFeedback.isVerified
											? `–£–¥–∞–ª–∏—Ç—å ‚ùå`
											: ``,
									callback_data: `deleteFeedbackWithId${feedbackId}`,
								},
								{
									text:
										chatId == jackId || chatId == qu1z3xId
											? !dataAboutFeedback.isVerified
												? `–ü–æ–∫–∞–∑–∞—Ç—å ‚úÖ`
												: ""
											: ``,
									callback_data: `verifiedFeedbackWithId${feedbackId}`,
								},
							],
							[
								{
									text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
									callback_data:
										dataAboutUser.userAction == "feedbacksList1"
											? "feedbacksList"
											: dataAboutUser.userAction == "feedbacksList3"
												? "unverifiedFeedbacksAdmin"
												: "feedbacksList",
								},
								{
									text:
										(chatId == jackId || chatId == qu1z3xId) &&
										dataAboutFeedback.isVerified
											? `–°–∫—Ä—ã—Ç—å ü§∑‚Äç‚ôÇÔ∏è`
											: "",
									callback_data: `unverifiedFeedbackWithId${feedbackId}`,
								},
							],
						],
					},
				}
			);
		} else {
			let allFeedbacksData;
			switch (listNum) {
				case 1:
					if (
						dataAboutUser.feedbacksData &&
						dataAboutUser.feedbacksData.length > 0
					) {
						dataAboutUser.feedbacksData =
							dataAboutUser.feedbacksData.filter((obj) => obj.isCreated);
					}

					count = 0;
					countOfLists = 1;
					text = ["", "", "", "", "", "", "", "", "", ""];

					allFeedbacksData = [];
					usersData.forEach((user) => {
						if (user.feedbacksData)
							user.feedbacksData.forEach((feedback) => {
								allFeedbacksData.push(feedback);
							});
					});

					if (allFeedbacksData)
						for (let i = allFeedbacksData.length - 1; i >= 0; i--) {
							const dataAboutUser–°ertainFeedback = usersData.find(
								(user) =>
									user.feedbacksData &&
									user.feedbacksData.find(
										(feedback) =>
											feedback.feedbackId ==
											allFeedbacksData[i].feedbackId
									)
							);

							if (count % 3 == 0 && count != 0) {
								++countOfLists;
							}

							if (allFeedbacksData[i].isVerified) {
								count++;
								text[countOfLists - 1] += `<b>${count}. ${
									allFeedbacksData[i].from
								} ‚Ä¢ ${
									dataAboutUser–°ertainFeedback.userStatus
								}\n</b>–£—Å–ª—É–≥–∞<b> ‚Ññ${allFeedbacksData[i].serviceNum} ${
									allFeedbacksData[i].isVerified
										? ``
										: `</b>- –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ üîé<b>`
								}\n–¢–µ–∫—Å—Ç:</b><i> "${truncateString(
									allFeedbacksData[i].feedbackText,
									100
								)}" - ${
									allFeedbacksData[i].opinionRating
								}</i>\n<b><a href="https://t.me/${BotName}/?start=feedbackWithId${
									allFeedbacksData[i].feedbackId
								}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—Ç–∑—ã–≤–µ</a></b>\n\n`;
							}
						}

					dataAboutUser.userAction = "feedbacksList1";

					await bot.editMessageText(
						`<b><i>üë• –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ üìß\n\n${
							countOfLists > 1
								? `${dataAboutUser.supportiveCount} / ${countOfLists} —Å—Ç—Ä ‚Ä¢ `
								: ``
						}${count} ${
							(count >= 5 && count <= 20) ||
							(count % 10 >= 5 && count % 10 <= 9) ||
							count % 10 == 0
								? "–æ—Ç–∑—ã–≤–æ–≤"
								: `${
										count % 10 == 1
											? "–æ—Ç–∑—ã–≤"
											: `${
													count % 10 >= 2 && count % 10 <= 4
														? "–æ—Ç–∑—ã–≤–∞"
														: ``
												}`
									}`
						}</i></b>\n\n${
							text[dataAboutUser.supportiveCount - 1]
								? `${
										text[dataAboutUser.supportiveCount - 1]
									}<b><i>–í—Å–µ –æ—Ç–∑—ã–≤—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.</i></b>`
								: `–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞..ü§∑‚Äç‚ôÇÔ∏è`
						}`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId)
								.messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text:
												countOfLists > 1
													? dataAboutUser.supportiveCount > 1
														? "‚¨ÖÔ∏è"
														: "üö´"
													: "",
											callback_data:
												dataAboutUser.supportiveCount > 1
													? "previousPage"
													: "-",
										},
										{
											text:
												countOfLists > 1
													? `${dataAboutUser.supportiveCount} —Å—Ç—Ä`
													: "",
											callback_data: "firstPage",
										},
										{
											text:
												countOfLists > 1
													? text[dataAboutUser.supportiveCount]
														? "‚û°Ô∏è"
														: "üö´"
													: "",
											callback_data: text[
												dataAboutUser.supportiveCount
											]
												? "nextPage"
												: "-",
										},
									],
									[
										{
											text: `${
												dataAboutUser.feedbacksData
													? `–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã (${
															dataAboutUser.feedbacksData.filter(
																(obj) => obj.isCreated
															).length
														}) üìß`
													: ``
											}`,
											callback_data: "myFeedbacks",
										},
									],

									[
										{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
										{
											text: "–û—Å—Ç–∞–≤–∏—Ç—å ‚úçÔ∏è",
											callback_data: "writeFeedbacks",
										},
									],
								],
							},
						}
					);
					break;
				case 2:
					let dataAboutUserFeedbacks = null;
					if (dataAboutUser.feedbacksData)
						dataAboutUserFeedbacks = dataAboutUser.feedbacksData || null;

					count = 0;
					countOfLists = 1;
					text = ["", "", "", "", "", "", "", "", "", "", "", "", "", ""];

					if (dataAboutUserFeedbacks)
						for (let i = 0; i < dataAboutUserFeedbacks.length; i++) {
							if (count % 3 == 0 && count != 0) {
								++countOfLists;
							}

							count++;
							text[countOfLists - 1] += `<b>${count}. ${
								dataAboutUserFeedbacks[i].from
							} ‚Ä¢ –£—Å–ª—É–≥–∞ ‚Ññ${dataAboutUserFeedbacks[i].serviceNum} ${
								dataAboutUserFeedbacks[i].isVerified ? `` : `üîé`
							}\n–¢–µ–∫—Å—Ç: </b><i>"${truncateString(
								dataAboutUserFeedbacks[i].feedbackText,
								100
							)}" - ${
								dataAboutUserFeedbacks[i].opinionRating
							}</i>\n<b><a href="https://t.me/${BotName}/?start=feedbackWithId${
								dataAboutUserFeedbacks[i].feedbackId
							}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—Ç–∑—ã–≤–µ</a></b>\n\n`;
						}

					dataAboutUser.userAction = "feedbacksList2";

					await bot.editMessageText(
						`<b><i>üë§ –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã üìß\n\n${
							countOfLists > 1
								? `${dataAboutUser.supportiveCount} / ${countOfLists} —Å—Ç—Ä ‚Ä¢ `
								: ``
						}${count} ${
							(count >= 5 && count <= 20) ||
							(count % 10 >= 5 && count % 10 <= 9) ||
							count % 10 == 0
								? "–æ—Ç–∑—ã–≤–æ–≤"
								: `${
										count % 10 == 1
											? "–æ—Ç–∑—ã–≤"
											: `${
													count % 10 >= 2 && count % 10 <= 4
														? "–æ—Ç–∑—ã–≤–∞"
														: ``
												}`
									}`
						}</i></b>\n\n${
							text[dataAboutUser.supportiveCount - 1]
								? `${text[dataAboutUser.supportiveCount - 1]}${
										dataAboutUser.feedbacksData.find(
											(obj) => !obj.isVerified
										)
											? `<i>üîé - –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</i>`
											: ``
									}`
								: `–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞..ü§∑‚Äç‚ôÇÔ∏è`
						}`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId)
								.messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text:
												countOfLists > 1
													? dataAboutUser.supportiveCount > 1
														? "‚¨ÖÔ∏è"
														: "üö´"
													: "",
											callback_data:
												dataAboutUser.supportiveCount > 1
													? "previousPage"
													: "-",
										},
										{
											text:
												countOfLists > 1
													? `${dataAboutUser.supportiveCount} —Å—Ç—Ä`
													: "",
											callback_data: "firstPage",
										},
										{
											text:
												countOfLists > 1
													? text[dataAboutUser.supportiveCount]
														? "‚û°Ô∏è"
														: "üö´"
													: "",
											callback_data: text[
												dataAboutUser.supportiveCount
											]
												? "nextPage"
												: "-",
										},
									],
									[
										{
											text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
											callback_data: `feedbacksList`,
										},
										{
											text: "–ï—â–µ ‚úçÔ∏è",
											callback_data: "writeFeedbacks",
										},
									],
								],
							},
						}
					);
					break;
				case 3:
					allFeedbacksData = [];
					usersData.forEach((user) => {
						if (user.feedbacksData)
							user.feedbacksData.forEach((feedback) => {
								allFeedbacksData.push(feedback);
							});
					});

					count = 0;

					if (allFeedbacksData)
						for (let i = 0; i < allFeedbacksData.length; i++) {
							if (
								!allFeedbacksData[i].isVerified &&
								allFeedbacksData[i].isCreated
							) {
								count++;
								text += `<b>${count}. ${
									allFeedbacksData[i].from
								} ‚Ä¢ –£—Å–ª—É–≥–∞ ‚Ññ${allFeedbacksData[i].serviceNum} ${
									allFeedbacksData[i].isVerified ? `` : `üîé`
								}\n–¢–µ–∫—Å—Ç: </b><i>"${truncateString(
									allFeedbacksData[i].feedbackText,
									100
								)}" - ${
									allFeedbacksData[i].opinionRating
								}</i>\n<b><a href="https://t.me/${BotName}/?start=feedbackWithId${
									allFeedbacksData[i].feedbackId
								}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—Ç–∑—ã–≤–µ</a></b>\n\n`;
							}
						}

					dataAboutUser.userAction = "feedbacksList3";

					await bot.editMessageText(
						`<b><i>üìß –û—Ç–∑—ã–≤—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ üîé</i></b>\n\n<b>${count} ${
							(count >= 5 && count <= 20) ||
							(count % 10 >= 5 && count % 10 <= 9) ||
							count % 10 == 0
								? "–æ—Ç–∑—ã–≤–æ–≤"
								: `${
										count % 10 == 1
											? "–æ—Ç–∑—ã–≤"
											: `${
													count % 10 >= 2 && count % 10 <= 4
														? "–æ—Ç–∑—ã–≤–∞"
														: ``
												}`
									}`
						}</b>\n\n${
							text != "" ? `${text}` : `–í—Å–µ –æ—Ç–∑—ã–≤—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã! üòâ`
						}`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId)
								.messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "adminMenu" },
										{
											text: "–í —Å–ø–∏—Å–æ–∫üìß",
											callback_data: "feedbacksList",
										},
									],
								],
							},
						}
					);
					break;
			}
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function writeFeedbacks(chatId, stageNum) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	let dataAboutFeedback = null;
	if (dataAboutUser.feedbacksData)
		dataAboutFeedback = dataAboutUser.feedbacksData.find(
			(obj) => obj.feedbackId == dataAboutUser.currentFeedbackId
		);

	try {
		switch (stageNum) {
			case 1:
				if (dataAboutUser.canWriteFeedbacks) {
					dataAboutUser.userAction = "writeFeedbacks1";
				}

				await bot.editMessageText(
					`<b><i>üìß –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ ‚úçÔ∏è</i></b>\n\n${
						dataAboutUser.requestsData
							? !dataAboutUser.canWriteFeedbacks &&
								dataAboutUser.requestsData.find((obj) => obj.isActive)
								? `<b>${
										dataAboutUser.login
									},</b> –æ—Ç–∑—ã–≤—ã –æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è <b>–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è</b> –∑–∞–∫–∞–∑–∞‚ùó\n\n<b><a href="https://t.me/${BotName}/?start=myRequest">–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ${
										dataAboutUser.requestsData.at(-1).requestId
									}</a></b>`
								: dataAboutUser.canWriteFeedbacks
									? `–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ, –Ω–∞ <b>—É—Å–ª—É–≥—É ‚Ññ${
											dataAboutUser.requestsData.at(-1).serviceNum
										} "${
											catalogOfServicesText[
												dataAboutUser.requestsData.at(-1)
													.serviceNum - 1
											].serviceName
										}"! üòä\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ —Å —Ä–∞–∑—É–º–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º, –±—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –∏–∑–ª–∞–≥–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ —Ç–µ–º–µ, –∫–æ—Ç–æ—Ä–∞—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ–º–æ–∂–µ—Ç —Å–æ—Ç–Ω—è–º –∫–ª–∏–µ–Ω—Ç–æ–≤! üôè</i>`
									: ``
							: !dataAboutUser.requestsData
								? `<b>${dataAboutUser.login},</b> –æ—Ç–∑—ã–≤—ã –æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è <b>–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è</b> –∑–∞–∫–∞–∑–∞‚ùó\n\n<b><a href="https://t.me/${BotName}/?start=catalogOfServices1">–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É</a></b>`
								: `--`
					}`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "feedbacksList" }],
							],
						},
					}
				);
				break;
			case 2:
				dataAboutUser.userAction = "writeFeedbacks2";

				await bot.editMessageText(
					`<b><i>üìß –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ ‚úçÔ∏è\n\n–í–∞—à –æ—Ç–∑—ã–≤:</i></b><blockquote><b>${
						dataAboutUser.login
					} ‚Ä¢ –£—Å–ª—É–≥–∞ ‚Ññ${
						dataAboutUser.requestsData
							? dataAboutUser.requestsData.at(-1).serviceNum
							: 0
					}\n\n–ü—Ä–æ–¥—É–∫—Ç:</b> ${
						dataAboutFeedback.productLink
							? `<a href="${dataAboutFeedback.productLink}">–∫ –±–æ—Ç—É</a>`
							: `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É`
					}\n\n<b>–û—Ç–∑—ã–≤:</b>\n<i>"${
						dataAboutFeedback.feedbackText
					}</i>"\n\n<b>–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:</b> ${
						dataAboutFeedback.opinionRating
							? dataAboutFeedback.opinionRating
							: `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ`
					}</blockquote><b>\n\n${
						dataAboutFeedback.opinionRating
							? dataAboutFeedback.productLink
								? `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞—à –æ—Ç–∑—ã–≤? ü§î`
								: `–ü–æ –∂–µ–ª–∞–Ω–∏—é, –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç!\n\n–ü—Ä–∏–º–µ—Ä:\n<code>https://t.me/–Ω–∏–∫–Ω–µ–π–º_–±–æ—Ç–∞</code>`
							: `–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —à–∫–∞–ª–æ–π –Ω–∏–∂–µ!`
					}</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `${
											dataAboutFeedback.opinionRating == "ü§¨"
												? `‚Ä¢ü§¨‚Ä¢`
												: `ü§¨`
										}`,
										callback_data: "setOpinionRating1",
									},
									{
										text: `${
											dataAboutFeedback.opinionRating == "üò†"
												? `‚Ä¢üò†‚Ä¢`
												: `üò†`
										}`,
										callback_data: "setOpinionRating2",
									},
									{
										text: `${
											dataAboutFeedback.opinionRating == "üòê"
												? `‚Ä¢üòê‚Ä¢`
												: `üòê`
										}`,
										callback_data: "setOpinionRating3",
									},
									{
										text: `${
											dataAboutFeedback.opinionRating == "üòä"
												? `‚Ä¢üòä‚Ä¢`
												: `üòä`
										}`,
										callback_data: "setOpinionRating4",
									},
									{
										text: `${
											dataAboutFeedback.opinionRating == "ü§©"
												? `‚Ä¢ü§©‚Ä¢`
												: `ü§©`
										}`,
										callback_data: "setOpinionRating5",
									},
								],
								[
									{
										text: `${
											dataAboutFeedback.opinionRating
												? "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤ ‚úÖ"
												: ``
										}`,
										callback_data: `sendMyFeedback`,
									},
								],

								[
									{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "feedbacksList" },
									{
										text: `–£–¥–∞–ª–∏—Ç—å‚ùå`,
										callback_data: `feedbacksList`,
									},
								],
							],
						},
					}
				);
				break;
			case 3:
				dataAboutUser.userAction = "writeFeedbacks3";

				await bot.editMessageText(
					`<b>–°–ø–∞—Å–∏–±–æ</b> –∑–∞ –≤–∞—à <b>—Ñ–∏–¥–±–µ–∫, ${dataAboutUser.login}! üòä</b>\n\n<b>–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! ‚ù§Ô∏è</b>\n\n–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω <b>–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!</b> üòâ`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `${
											dataAboutUser.feedbacksData
												? `–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã (${
														dataAboutUser.feedbacksData.filter(
															(obj) => obj.isCreated
														).length
													}) üìß`
												: ``
										}`,
										callback_data: "myFeedbacks",
									},
								],
								[
									{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "feedbacksList" },
									{ text: "–ï—â–µ ‚úçÔ∏è", callback_data: "writeFeedbacks" },
								],
							],
						},
					}
				);
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function settings(chatId, editLogin = false, afterEdit = false) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		if (!editLogin) {
			dataAboutUser.userAction = "settings";

			await bot.editMessageText(
				`<b><i>üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Ä¢ <code>${
					dataAboutUser.chatId
				}</code> ‚öôÔ∏è</i>\n\n–î–∞–Ω–Ω—ã–µ:\n</b>–õ–æ–≥–∏–Ω: <b>${
					dataAboutUser.login
				}</b> - <a href="https://t.me/${BotName}/?start=editLogin">–∏–∑–º–µ–Ω–∏—Ç—å</a>${
					dataAboutUser.phoneNumber
						? `\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>+${dataAboutUser.phoneNumber}</b>`
						: ``
				}\n\n<b>–õ–æ—è–ª—å–Ω–æ—Å—Ç—å</b> - <a href="https://t.me/${BotName}/?start=moreAboutUserStatus">–ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n–°—Ç–∞—Ç—É—Å:<b> ${
					dataAboutUser.userStatus
				}</b>\n–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏:<b> ${
					dataAboutUser.requestsData
						? `${
								dataAboutUser.requestsData.length >= 3
									? "3%"
									: dataAboutUser.requestsData.length >= 6
										? "6%"
										: dataAboutUser.requestsData.length >= 10
											? "10%"
											: dataAboutUser.requestsData.length < 3
												? "–ù–µ—Ç ( 0% )"
												: ""
							}`
						: `–ù–µ—Ç ( 0% )`
				}</b>\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>${
					dataAboutUser.requestsData
						? dataAboutUser.requestsData.length
						: "0"
				} —à—Ç</b>${
					!dataAboutUser.requestsData
						? ` - <a href="https://t.me/${BotName}/?start=catalogOfServices1">–∫ —É—Å–ª—É–≥–∞–º</a>`
						: ``
				}\n–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤: <b>${
					dataAboutUser.feedbacksData
						? dataAboutUser.feedbacksData.filter((obj) => obj.isVerified)
								.length
						: "0"
				}${
					dataAboutUser.feedbacksData
						? ` / ${
								dataAboutUser.feedbacksData.filter(
									(obj) => obj.isCreated
								).length
							} —à—Ç</b> - <a href="https://t.me/${BotName}/?start=myFeedbacks">–≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã</a>`
						: ` —à—Ç</b>`
				}\n\n<b>–ü—Ä–æ—á–µ–µ:</b>\n–í—ã —Å –Ω–∞–º–∏ —Å <b>${
					dataAboutUser.registrationDate
				}</b>\n\n<b><a href="https://telegra.ph/digfusion--Politika-08-08#%D0%A7%D1%82%D0%BE-%D0%B2%D1%8B-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D1%82%D1%8C-%D0%BE%D1%82-%D0%BD%D0%B0%D1%81">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ digfusion</a></b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: `${
										dataAboutUser.requestsData &&
										dataAboutUser.requestsData.at(-1).isActive
											? `‚ùó–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ${
													dataAboutUser.requestsData.at(-1)
														.requestId
												} üïë`
											: dataAboutUser.requestsData &&
												  !dataAboutUser.requestsData.at(-1)
														.isActive
												? `–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞ ‚Ññ${
														dataAboutUser.requestsData.at(-1)
															.requestId
													} üîé`
												: ""
									}`,
									callback_data: "myRequest",
								},
							],
							[
								{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
								{ text: "–°–≤—è–∑—å üí≠", callback_data: "consultation" },
							],
						],
					},
				}
			);
		}
		if (editLogin) {
			dataAboutUser.userAction = "editLogin";

			await bot.editMessageText(
				`<i><b>üõ†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ ‚öôÔ∏è\n\n</b>–õ–æ–≥–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üîí</i><b>\n\n${
					afterEdit
						? `–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π: <code>${dataAboutUser.supportiveCount}</code>`
						: `–¢–µ–∫—É—â–∏–π: <code>${dataAboutUser.login}</code>`
				}${
					afterEdit
						? "\n\n–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞? ü§î"
						: "\n\n–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –º–æ–∂–Ω–æ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚úçÔ∏è"
				}</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: `${
										dataAboutUser.login !=
										dataAboutUser.telegramFirstName
											? "–°–±—Ä–æ—Å–∏—Ç—å‚ùå"
											: ""
									}`,
									callback_data: "resetLogin",
								},
							],
							[
								{
									text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`,
									callback_data: "settings",
								},
								{
									text: `${afterEdit ? "–ü—Ä–∏–Ω—è—Ç—å‚úÖ" : ""}`,
									callback_data: "editLogin",
								},
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function userStatusInfo(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		await bot.editMessageText(
			`<b><i>üëë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ üìä</i></b>\n\n–£ <b>–∫–∞–∂–¥–æ–≥–æ</b> –∫–ª–∏–µ–Ω—Ç–∞ –∏–º–µ–µ—Ç—Å—è <b>—Å—Ç–∞—Ç—É—Å,</b> –∫–æ—Ç–æ—Ä—ã–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ <b>–æ—Ç —É—Ä–æ–≤–Ω—è,</b> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>—Å–∫–∏–¥–∫—É –Ω–∞ –∑–∞–∫–∞–∑</b> –ø—Ä–∏ –µ–≥–æ <b>–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏! üòç\n\n–í–æ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫:</b><blockquote><b>"–ö–ª–∏–µ–Ω—Ç üôÇ"</b> - –±–µ–∑ —Å–∫–∏–¥–∫–∏ (<b>–Ω–∞—á–∞–ª—å–Ω—ã–π</b>) *\n\n<b>"–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç üòé"</b> - 3% (–æ—Ç <b>3 –∑–∞–∫–∞–∑–æ–≤</b>) *\n\n<b>"–û—Å–æ–±—ã–π –∫–ª–∏–µ–Ω—Ç ü§©"</b> - 6% (–æ—Ç <b>6 –∑–∞–∫–∞–∑–æ–≤</b>) *\n\n<b>"–õ—É—á—à–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å ü§¥"</b> - 10% (–æ—Ç <b>10 –∑–∞–∫–∞–∑–æ–≤</b>) *\n\n<i>* –°—á–∏—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã</i></blockquote>\n\n–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: <b>${
				dataAboutUser.userStatus
			}</b>\n–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤: ${
				dataAboutUser.requestsData
					? `<b>${dataAboutUser.requestsData.length} —à—Ç</b>`
					: `<b>0 —à—Ç</b> - <a href="https://t.me/${BotName}/?start=catalogOfServices1">–∫ —É—Å–ª—É–≥–∞–º</a>`
			}\n\n${
				catalogOfServicesText.find((obj) => obj.firstPrice)
					? `<i>–°–∫–∏–¥–∫–∏ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è —Å —Ç–µ–∫—É—â–∏–º–∏ —Å–∫–∏–¥–∫–∞–º–∏ –Ω–∞ —É—Å–ª—É–≥–∏!</i>`
					: ``
			}`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "settings" },
							{ text: "–ö–∞—Ç–∞–ª–æ–≥ üõí", callback_data: "catalogOfServices" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function dialogBuilder(chatId, textNum = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	const dateNowHHNN = new Date().getHours() * 100 + new Date().getMinutes();

	if (dateNowHHNN < 1200 && dateNowHHNN >= 600) textToSayHello = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
	else if (dateNowHHNN < 1700 && dateNowHHNN >= 1200)
		textToSayHello = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
	else if (dateNowHHNN < 2200 && dateNowHHNN >= 1700)
		textToSayHello = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
	else if (dateNowHHNN >= 2200 || dateNowHHNN < 600)
		textToSayHello = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";

	let textToSayHelloForEnd = "";
	if (dateNowHHNN < 1200 && dateNowHHNN >= 600)
		textToSayHelloForEnd = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è";
	else if (dateNowHHNN < 1700 && dateNowHHNN >= 1200)
		textToSayHelloForEnd = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è";
	else if (dateNowHHNN < 2200 && dateNowHHNN >= 1700)
		textToSayHelloForEnd = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞";
	else if (dateNowHHNN >= 2200 || dateNowHHNN < 600)
		textToSayHelloForEnd = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";

	try {
		let dataAboutClient;
		if (clientChatId)
			dataAboutClient = usersData.find((obj) => obj.chatId == clientChatId);

		let dataAbout–°ertainRequest;
		if (dataAboutClient && dataAboutClient.requestsData)
			dataAbout–°ertainRequest = dataAboutClient.requestsData.at(-1);

		if (textNum == 0) clientChatId = null;

		let textsToDialog = [
			`${textToSayHello}${
				clientChatId ? `, ${dataAboutClient.login}` : ""
			}! üëã\n\n–ú–æ–µ –∏–º—è –î–∞–≤–∏–¥, –∏ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –∫–∞—Å–∞—é—â–∏–º–∏—Å—è –Ω–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –Ø –ª–∏—á–Ω–æ –æ—Ç–≤–µ—á–∞—é –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞–º–∏, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞! üòä`,
			`–ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –∏ –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ç–µ, –≤ —Ä–∞–∑–¥–µ–ª–µ "–û –Ω–∞—Å"! üòâ`,
			`–£—Å–ª—É–≥–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –æ–ø–∏—Å–∞–Ω—ã –≤ –Ω–∞—à–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–º –±–æ—Ç–µ, –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥". –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∏—Ö –∑–∞–¥–∞–≤–∞—Ç—å! üòâ`,
			`–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –≤—ã —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —Å —É—Å–ª—É–≥–æ–π –∏ —Å–æ–∑–¥–∞–ª–∏ –Ω–∞ –Ω–µ—ë –∑–∞—è–≤–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–∞–º, —É–∫–∞–∑–∞–≤ –Ω–æ–º–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏. üòâ\n\n–ï—Å–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ–º–µ—Ä –º–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.`,
			`–ø–æ–∫–∞ –Ω–µ—Ç`,
			`${
				clientChatId ? `${dataAboutClient.login}` : "–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç"
			}, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ! –ú—ã –æ—á–µ–Ω—å –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏ –≤–∞–º –∑–∞–ø–æ–º–Ω–∏–ª—Å—è, –∏ –º—ã –ø–æ–ª—É—á–∏–º —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —É—Å–ª—É–≥–µ. üôè\n\n–û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–û—Ç–∑—ã–≤—ã"\n\n–ù–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞ –≤ —á–∏—Å–ª–µ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. ${textToSayHelloForEnd}! üòâ`,
			``,
		];

		dataAboutUser.userAction = "dialogBuilder";

		await bot.editMessageText(
			`<b><i>üó£Ô∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–∞ ${
				dataAbout–°ertainRequest ? `‚Ä¢ <code>${clientChatId}</code>` : ``
			}üõ†Ô∏è</i></b>\n\n<b>–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:</b><blockquote><code>${
				textsToDialog[textNum - 1]
			}</code></blockquote>\n\n${
				!dataAboutClient
					? `–í–ø–∏—à–∏—Ç–µ Id –ª—é–±–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ ‚úçÔ∏è`
					: `–¢–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç: <b><a href="https://t.me/${BotName}/?start=moreAboutUserWithId${dataAboutClient.chatId}">${dataAboutClient.login}</a></b>`
			}`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text:
									textNum == 1 ? `‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å–≤–∏–µ üëã ‚Ä¢` : `–ü—Ä–∏–≤–µ—Ç—Å–≤–∏–µ üëã`,
								callback_data: "dialogBuilder1",
							},
						],
						[
							{
								text: textNum == 2 ? `‚Ä¢ –û –Ω–∞—Å ‚ÑπÔ∏è ‚Ä¢` : `–û –Ω–∞—Å ‚ÑπÔ∏è`,
								callback_data: "dialogBuilder2",
							},
							{
								text: textNum == 3 ? `‚Ä¢ –£—Å–ª—É–≥–∏ üõí ‚Ä¢` : `–£—Å–ª—É–≥–∏ üõí`,
								callback_data: "dialogBuilder3",
							},
						],
						[
							{
								text:
									textNum == 4
										? `‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üõçÔ∏è ‚Ä¢`
										: `–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üõçÔ∏è`,
								callback_data: "dialogBuilder4",
							},
						],
						[
							{
								text: textNum == 5 ? `‚Ä¢ –û–ø–ª–∞—Ç–∞ üí∞ ‚Ä¢` : `–û–ø–ª–∞—Ç–∞ üí∞`,
								callback_data: "dialogBuilder5",
							},
							{
								text: textNum == 6 ? `‚Ä¢ –û—Ç–∑—ã–≤ üìß ‚Ä¢` : `–û—Ç–∑—ã–≤ üìß`,
								callback_data: "dialogBuilder6",
							},
						],
						[
							{
								text: textNum == 7 ? `‚Ä¢ –ü—Ä–æ—â–∞–Ω–∏–µ ü´Ç ‚Ä¢` : `–ü—Ä–æ—â–∞–Ω–∏–µ ü´Ç`,
								callback_data: "dialogBuilder7",
							},
						],
						[
							{
								text: `${
									dataAbout–°ertainRequest ? `–ö –∫–ª–∏–µ–Ω—Ç—É üë§` : ``
								}`,
								url: `tg://user?id=${clientChatId}`,
							},
							{
								text: `${
									dataAbout–°ertainRequest &&
									dataAbout–°ertainRequest.requestsData
										? `–ö –∑–∞—è–≤–∫–µ üßë‚Äçüíª`
										: ``
								}`,
								callback_data: `${
									dataAbout–°ertainRequest &&
									dataAbout–°ertainRequest.requestsData
										? `requestWithId${
												dataAbout–°ertainRequest.requestsData.at(-1)
													.requestId
											}`
										: `-`
								}`,
							},
						],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{
								text: `${
									dataAbout–°ertainRequest ? `–ö —Ç–µ–∫—Å—Ç–∞–º üìñ` : ``
								}`,
								callback_data: `dialogBuilder0`,
							},
						],
					],
				},
			}
		);
		// }
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function adminMenu(chatId) {
	if (chatId == jackId || chatId == qu1z3xId) {
		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		let allRequestsData = [];
		usersData.forEach((user) => {
			if (user.requestsData)
				user.requestsData.forEach((request) => {
					allRequestsData.push(request);
				});
		});

		let allFeedbacksData = [];
		usersData.forEach((user) => {
			if (user.feedbacksData)
				user.feedbacksData.forEach((feedback) => {
					allFeedbacksData.push(feedback);
				});
		});

		try {
			await bot.editMessageText(
				`<b><i>üí† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üí†</i>\n\n</b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>${dataAboutUser.login}!\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? ü§î</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: `${
										allRequestsData &&
										allRequestsData.filter((obj) => obj.isActive)
											.length != 0
											? `‚ùó–ó–∞—è–≤–∫–∏ (${
													allRequestsData.filter(
														(obj) => obj.isActive
													).length
												})`
											: "–ó–∞—è–≤–∫–∏"
									} üßë‚Äçüíª`,
									callback_data: "requestsDataAdmin",
								},
							],
							[
								{
									text: "–†–µ–µ—Å—Ç—Ä üíæ",
									callback_data: "registryDataAdmin",
								},
								{
									text: "–£—Å–ª—É–≥–∏ üí∞",
									callback_data: "editCatalogOfServicesAdmin",
								},
							],
							[
								{
									text: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä",
									callback_data: "statisticListAdmin",
								},
							],
							[
								{ text: "–ê–ª–µ—Ä—Ç—ã üì£", callback_data: "alertsAdmin1" },
								{
									text: `–û—Ç–∑—ã–≤—ã ${
										allFeedbacksData &&
										allFeedbacksData.filter(
											(obj) => !obj.isVerified && obj.isCreated
										).length > 0
											? `(${
													allFeedbacksData.filter(
														(obj) =>
															!obj.isVerified && obj.isCreated
													).length
												})`
											: ``
									} üìß`,
									callback_data: "unverifiedFeedbacksAdmin",
								},
							],
							[{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" }],
						],
					},
				}
			);
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	}
}

async function requestsList(
	chatId,
	listNum = 1,
	requestId = null,
	dataAboutRequestForUser = false
) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		if (dataAboutRequestForUser) {
			let dataAbout–°ertainRequest;
			if (dataAboutUser.requestsData)
				dataAbout–°ertainRequest = dataAboutUser.requestsData.at(-1);

			await bot.editMessageText(
				`<b><i>üßë‚Äçüíª –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ä¢ <code>‚Ññ${
					dataAbout–°ertainRequest.requestId
				}</code> ü™™</i>\n\n–ù–∞ —É—Å–ª—É–≥—É ‚Ññ${
					dataAbout–°ertainRequest.serviceNum
				}:\n</b><blockquote><b>${dataAbout–°ertainRequest.serviceNum}. ${
					catalogOfServicesText[dataAbout–°ertainRequest.serviceNum - 1]
						.serviceName
				} - <a href="https://t.me/${BotName}/?start=catalogOfServices${
					dataAbout–°ertainRequest.serviceNum
				}">–∫ —É—Å–ª—É–≥–µ</a>\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> ${
					catalogOfServicesText[dataAbout–°ertainRequest.serviceNum - 1]
						.moreAbout
				}${
					catalogOfServicesText[dataAbout–°ertainRequest.serviceNum - 1]
						.lifeTime
						? `\n\n<b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> ${
								catalogOfServicesText[
									dataAbout–°ertainRequest.serviceNum - 1
								].lifeTime
							}`
						: ``
				}${
					catalogOfServicesText[dataAbout–°ertainRequest.serviceNum - 1]
						.executionDate
						? `\n\n<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> ${
								catalogOfServicesText[
									dataAbout–°ertainRequest.serviceNum - 1
								].executionDate
							} ‚åõ`
						: ``
				}\n\n<b>–¶–µ–Ω–∞:</b> ${
					catalogOfServicesText[dataAbout–°ertainRequest.serviceNum - 1]
						.priceSentence
				} üí∞</blockquote>\n\n–°—Ç–∞—Ç—É—Å: <b>${
					dataAbout–°ertainRequest.isActive
						? "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.. üïë"
						: "–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞! ‚úÖ"
				}</b>\n\n<b>${dataAbout–°ertainRequest.creationTime}</b> - ${
					dataAbout–°ertainRequest.creationDate
				}`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: dataAbout–°ertainRequest.isActive
										? `–°–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É üîÉ`
										: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è",
									callback_data: dataAbout–°ertainRequest.isActive
										? `catalogOfServices`
										: "writeFeedbacks",
								},
							],
							[
								{
									text: "–°–≤—è–∑—å üí≠",
									callback_data: `consultation`,
								},
								{
									text: dataAbout–°ertainRequest.isActive
										? `–£–¥–∞–ª–∏—Ç—å ‚ùå`
										: `–ö–∞—Ç–∞–ª–æ–≥ üõí`,
									callback_data: dataAbout–°ertainRequest.isActive
										? `deleteRequestQuestionWithId${dataAbout–°ertainRequest.requestId}`
										: `catalogOfServices`,
								},
							],

							[
								{
									text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
									callback_data: "exit",
								},
							],
						],
					},
				}
			);
		} else if (chatId == jackId || chatId == qu1z3xId) {
			if (!requestId) {
				let count = 0;
				let countOfLists = 1;
				let listText = ["", "", "", "", "", "", "", "", "", ""];

				let allRequestsData = [];
				usersData.forEach((user) => {
					if (user.requestsData)
						user.requestsData.forEach((request) => {
							allRequestsData.push(request);
						});
				});

				switch (listNum) {
					case 1:
						dataAboutUser.userAction = "requestsList1";

						if (allRequestsData)
							for (let i = 0; i < allRequestsData.length; i++) {
								if (allRequestsData[i].isActive) {
									let dataAboutUser–°ertainRequest = usersData.find(
										(obj) =>
											obj.requestsData &&
											obj.requestsData.find(
												(request) =>
													request.requestId ==
													allRequestsData[i].requestId
											)
									);

									if (count % 10 == 0 && count != 0) {
										++countOfLists;
									}
									count++;
									listText[countOfLists - 1] +=
										`<b>[${count}] <a href="tg://user?id=${
											dataAboutUser–°ertainRequest.chatId
										}">${
											dataAboutUser–°ertainRequest.login
										}</a> ‚Ä¢ <code>${
											dataAboutUser–°ertainRequest.chatId
										}</code> üïë\n${allRequestsData[i].serviceNum}. ${
											catalogOfServicesText[
												allRequestsData[i].serviceNum - 1
											].serviceName
										}</b>\n<b>${allRequestsData[i].creationTime}</b> - ${
											allRequestsData[i].creationDate
										}<b>\n<a href = "https://t.me/${BotName}/?start=requestWithId${
											allRequestsData[i].requestId
										}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞—è–≤–∫–µ</a></b>\n\n`;
								}
							}
						break;
					case 2:
						dataAboutUser.userAction = "requestsList2";

						if (allRequestsData)
							for (let i = 0; i < allRequestsData.length; i++) {
								let dataAboutUser–°ertainRequest = usersData.find(
									(user) =>
										user.requestsData &&
										user.requestsData.find(
											(request) =>
												request.requestId ==
												allRequestsData[i].requestId
										)
								);

								if (count % 10 == 0 && count != 0) {
									++countOfLists;
								}
								count++;
								listText[countOfLists - 1] +=
									`<b>[${count}] <a href="tg://user?id=${
										dataAboutUser–°ertainRequest.chatId
									}">${dataAboutUser–°ertainRequest.login}</a> ‚Ä¢ <code>${
										dataAboutUser–°ertainRequest.chatId
									}</code> ${
										allRequestsData[i].isActive ? "üïë" : "‚úÖ"
									}\n${allRequestsData[i].serviceNum}. ${
										catalogOfServicesText[
											allRequestsData[i].serviceNum - 1
										].serviceName
									}</b>\n<b>${allRequestsData[i].creationTime}</b> - ${
										allRequestsData[i].creationDate
									}\n<b><a href = "https://t.me/${BotName}/?start=requestWithId${
										allRequestsData[i].requestId
									}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞—è–≤–∫–µ</a></b>\n\n`;
							}
						break;
				}

				await bot.editMessageText(
					`<b><i>üßë‚Äçüíª –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ ‚Ä¢ ${
						listNum == 1
							? "–ù–æ–≤—ã–µ‚ùó"
							: listNum == 2
								? "–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è üìö"
								: ""
					}\n\n${
						countOfLists > 1
							? `${dataAboutUser.supportiveCount} / ${countOfLists} —Å—Ç—Ä ‚Ä¢ `
							: ``
					}${count} ${
						(count >= 5 && count <= 20) ||
						(count % 10 >= 5 && count % 10 <= 9) ||
						count % 10 == 0
							? "–∑–∞—è–≤–æ–∫"
							: `${
									count % 10 == 1
										? "–∑–∞—è–≤–∫–∞"
										: `${
												count % 10 >= 2 && count % 10 <= 4
													? "–∑–∞—è–≤–∫–∏"
													: ``
											}`
								}`
					}</i></b>\n\n${
						listText[dataAboutUser.supportiveCount - 1]
							? `${
									listText[dataAboutUser.supportiveCount - 1]
								}–í–ø–∏—à–∏—Ç–µ Id –ª—é–±–æ–π –∑–∞—è–≤–∫–∏ ‚úçÔ∏è`
							: "–ù–µ –≤–∏–∂—É <b>–Ω–∏ –æ–¥–Ω–æ–π</b> –∑–∞—è–≤–∫–∏.. ü§∑‚Äç‚ôÇÔ∏è"
					}`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text:
											countOfLists > 1
												? dataAboutUser.supportiveCount > 1
													? "‚¨ÖÔ∏è"
													: "üö´"
												: "",
										callback_data:
											dataAboutUser.supportiveCount > 1
												? "previousPage"
												: "-",
									},
									{
										text:
											countOfLists > 1
												? `${dataAboutUser.supportiveCount} —Å—Ç—Ä`
												: "",
										callback_data: "firstPage",
									},
									{
										text:
											countOfLists > 1
												? listText[dataAboutUser.supportiveCount]
													? "‚û°Ô∏è"
													: "üö´"
												: "",
										callback_data: listText[
											dataAboutUser.supportiveCount
										]
											? "nextPage"
											: "-",
									},
								],
								[
									{
										text: `${listNum == 1 ? "‚Ä¢" : ""} –ù–æ–≤—ã–µ ${
											allRequestsData &&
											allRequestsData.filter((obj) => obj.isActive)
												? `(${
														allRequestsData.filter(
															(obj) => obj.isActive
														).length
													} —à—Ç) `
												: ""
										}‚ùó${listNum == 1 ? "‚Ä¢" : ""}`,
										callback_data: "requestsList1",
									},
								],
								[
									{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
									{
										text: `${listNum == 2 ? "‚Ä¢ –í—Å–µ üìö ‚Ä¢" : "–í—Å–µ üìö"}`,
										callback_data: "requestsList2",
									},
								],
							],
						},
					}
				);
			} else if (requestId) {
				let dataAboutUser–°ertainRequest;
				if (
					usersData.find(
						(obj) =>
							obj.requestsData &&
							obj.requestsData.find(
								(request) => request.requestId == requestId
							)
					)
				) {
					dataAboutUser–°ertainRequest = usersData.find(
						(obj) =>
							obj.requestsData &&
							obj.requestsData.find(
								(request) => request.requestId == requestId
							)
					);
				}
				if (
					dataAboutUser–°ertainRequest.requestsData &&
					dataAboutUser–°ertainRequest.requestsData.find(
						(obj) => obj.requestId == requestId
					)
				) {
					const dataAbout–°ertainRequest =
						dataAboutUser–°ertainRequest.requestsData.find(
							(obj) => obj.requestId == requestId
						);

					await bot.editMessageText(
						`<b><i>üßë‚Äçüíª –ó–∞—è–≤–∫–∞ ‚Ä¢ <code>${requestId}</code> ü™™</i></b>\n\n<b><a href="tg://user?id=${
							dataAboutUser–°ertainRequest.chatId
						}">${dataAboutUser–°ertainRequest.login}</a></b> ‚Ä¢ <code>${
							dataAboutUser–°ertainRequest.chatId
						}</code>\n<b>–£—Å–ª—É–≥–∞:</b>\n<blockquote><b>${
							dataAbout–°ertainRequest.serviceNum
						}. ${
							catalogOfServicesText[
								dataAbout–°ertainRequest.serviceNum - 1
							].serviceName
						}\n–¶–µ–Ω–∞: </b>${
							catalogOfServicesText[
								dataAbout–°ertainRequest.serviceNum - 1
							].priceSentence
						}</blockquote>\n<b>${
							dataAbout–°ertainRequest.creationTime
						}</b> - ${dataAbout–°ertainRequest.creationDate} ${
							dataAbout–°ertainRequest.isActive ? "üïó" : `‚úÖ`
						}`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId)
								.messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: "üõ†Ô∏è",
											callback_data: `buildDialogForUserWithId${dataAboutUser–°ertainRequest.chatId}`,
										},
										{
											text: "üë§",
											url: `tg://user?id=${dataAboutUser–°ertainRequest.chatId}`,
										},
										{
											text: `${
												dataAbout–°ertainRequest.isActive
													? "‚úÖ"
													: "üïë"
											}`,
											callback_data: `toggleToActiveRequestWithId${dataAbout–°ertainRequest.requestId}`,
										},
									],
									[
										{
											text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
											callback_data:
												dataAboutUser.userAction ==
													"requestsList1" ||
												dataAboutUser.userAction == "requestsList2"
													? "requestsList1"
													: "exit",
										},
										{
											text: dataAbout–°ertainRequest.isActive
												? "–£–¥–∞–ª–∏—Ç—å‚ùå"
												: "",
											callback_data: `deleteRequest100%WithId${dataAbout–°ertainRequest.requestId}`,
										},
									],
								],
							},
						}
					);
				}
			}
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function registryList(chatId, listNum = 1, otherChatId = null) {
	if (chatId == jackId || chatId == qu1z3xId) {
		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		let text = "";
		let count = 0;
		let countOfLists = 1;

		try {
			if (otherChatId) {
				const dataAboutClient = usersData.find(
					(obj) => obj.chatId == otherChatId
				);

				await bot.editMessageText(
					`<b><i>üíæ –ö–ª–∏–µ–Ω—Ç ‚Ä¢ <code>${
						dataAboutClient.chatId
					}</code>üë§</i>\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b><blockquote><b>–î–∞–Ω–Ω—ã–µ</b>\n–õ–æ–≥–∏–Ω: <b>${
						dataAboutClient.login
					}</b>${
						dataAboutClient.phoneNumber
							? `\n–¢–µ–ª–µ—Ñ–æ–Ω: <code>+${dataAboutClient.phoneNumber}</code>`
							: ``
					}\n–°—Ç–∞—Ç—É—Å: <b>${
						dataAboutClient.userStatus
					}</b>\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n–ó–∞—è–≤–æ–∫: <b>${
						dataAboutClient.requestsData
							? dataAboutClient.requestsData.length
							: 0
					} —à—Ç</b>\n–û—Ç–∑—ã–≤–æ–≤: <b>${
						dataAboutClient.feedbacksData
							? `${
									dataAboutClient.feedbacksData.filter(
										(obj) => obj.isVerified
									).length
								} / ${
									dataAboutClient.feedbacksData.filter(
										(obj) => obj.isCreated
									).length
								}`
							: 0
					} —à—Ç</b></blockquote><b>${dataAboutClient.registrationDate}</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text:
											dataAboutClient.chatId != jackId
												? `${
														dataAboutClient.inBlackList
															? `–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ‚úÖ`
															: `–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ‚ùå`
													}`
												: ``,
										callback_data: `${
											dataAboutClient.inBlackList
												? `deleteFromBlackListUserWithId${dataAboutClient.chatId}`
												: `addToBlackListUserWithId${dataAboutClient.chatId}`
										}`,
									},
								],
								[
									{
										text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
										callback_data: `${
											dataAboutUser.userAction == "registryList1"
												? `registryList1`
												: dataAboutUser.userAction ==
													  "dialogBuilder"
													? `dialogBuilder1`
													: "-"
										}`,
									},
									// {
									// 	text: "–ö–ª–∏–µ–Ω—Ç üë§",
									// 	url: `tg://user?id=${dataAboutClient.chatId}`,
									// },
								],
							],
						},
					}
				);
			} else {
				switch (listNum) {
					case 1:
						count = 0;
						countOfLists = 1;
						text = ["", "", "", "", "", "", "", "", "", ""];
						for (let i = 0; i < usersData.length; i++) {
							if (count % 10 == 0 && count != 0) {
								++countOfLists;
							}

							if (usersData[i].registrationIsOver) {
								count++;
								text[countOfLists - 1] +=
									`<b>${count}. ${usersData[i].login} ‚Ä¢ <code>${usersData[i].chatId}</code>\n</b>–°—Ç–∞—Ç—É—Å:<b> ${usersData[i].userStatus}\n<a href="https://t.me/${BotName}/?start=moreAboutUserWithId${usersData[i].chatId}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–ª–∏–µ–Ω—Ç–µ</a></b>\n\n`;
							}
						}

						dataAboutUser.userAction = "registryList1";

						await bot.editMessageText(
							`<b><i>üíæ –†–µ–µ—Å—Ç—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤ üìÅ\n\n${
								countOfLists > 1
									? `${dataAboutUser.supportiveCount} / ${countOfLists} —Å—Ç—Ä ‚Ä¢ `
									: ``
							}${count} ${
								(count >= 5 && count <= 20) ||
								(count % 10 >= 5 && count % 10 <= 9) ||
								count % 10 == 0
									? "–∫–ª–∏–µ–Ω—Ç–æ–≤"
									: `${
											count % 10 == 1
												? "–∫–ª–∏–µ–Ω—Ç"
												: `${
														count % 10 >= 2 && count % 10 <= 4
															? "–∫–ª–∏–µ–Ω—Ç–∞"
															: ``
													}`
										}`
							}</i></b>\n\n${
								text[dataAboutUser.supportiveCount - 1]
									? `${
											text[dataAboutUser.supportiveCount - 1]
										}–í–ø–∏—à–∏—Ç–µ Id –ª—é–±–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ ‚úçÔ∏è`
									: `–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞..ü§∑‚Äç‚ôÇÔ∏è`
							}`,
							{
								parse_mode: "html",
								chat_id: chatId,
								message_id: usersData.find(
									(obj) => obj.chatId == chatId
								).messageId,
								disable_web_page_preview: true,
								reply_markup: {
									inline_keyboard: [
										[
											{
												text:
													countOfLists > 1
														? dataAboutUser.supportiveCount > 1
															? "‚¨ÖÔ∏è"
															: "üö´"
														: "",
												callback_data:
													dataAboutUser.supportiveCount > 1
														? "previousPage"
														: "-",
											},
											{
												text:
													countOfLists > 1
														? `${dataAboutUser.supportiveCount} —Å—Ç—Ä`
														: "",
												callback_data: "firstPage",
											},
											{
												text:
													countOfLists > 1
														? text[dataAboutUser.supportiveCount]
															? "‚û°Ô∏è"
															: "üö´"
														: "",
												callback_data: text[
													dataAboutUser.supportiveCount
												]
													? "nextPage"
													: "-",
											},
										],
										[
											{
												text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
												callback_data: "adminMenu",
											},
											{
												text: "–ë–î üóÑÔ∏è",
												url: "https://console.firebase.google.com/u/0/project/digfusionco/database/digfusionco-default-rtdb/data",
											},
										],
									],
								},
							}
						);
						break;
					case 2:
						break;
				}
			}
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	}
}

async function statisticList(chatId) {
	if (chatId == jackId || chatId == qu1z3xId) {
		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
		try {
			systemData.requestsAllTime = null;
			systemData.feedbacksAllTime = null;

			for (let i = 0; i < usersData.length; i++) {
				if (usersData[i].requestsData)
					systemData.requestsAllTime += usersData[i].requestsData.length;
				if (usersData[i].feedbacksData)
					systemData.feedbacksAllTime += usersData[i].feedbacksData.length;
			}

			await bot.editMessageText(
				`<b><i>üì± –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä</i>\n\n–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n<b>‚Ä¢ ${
					systemData.newClientsToday
				}</b> ${
					(systemData.newClientsToday >= 5 &&
						systemData.newClientsToday <= 20) ||
					(systemData.newClientsToday % 10 >= 5 &&
						systemData.newClientsToday % 10 <= 9) ||
					systemData.newClientsToday % 10 == 0
						? "–Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
						: `${
								systemData.newClientsToday % 10 == 1
									? "–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"
									: `${
											systemData.newClientsToday % 10 >= 2 &&
											systemData.newClientsToday % 10 <= 4
												? "–Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞"
												: ``
										}`
							}`
				}\n<b>‚Ä¢ ${systemData.activityToday}</b> ${
					(systemData.activityToday >= 5 &&
						systemData.activityToday <= 20) ||
					(systemData.activityToday % 10 >= 5 &&
						systemData.activityToday % 10 <= 9) ||
					systemData.activityToday % 10 == 0
						? "–¥–µ–π—Å—Ç–≤–∏–π"
						: `${
								systemData.activityToday % 10 == 1
									? "–¥–µ–π—Å—Ç–≤–∏–µ"
									: `${
											systemData.activityToday % 10 >= 2 &&
											systemData.activityToday % 10 <= 4
												? "–¥–µ–π—Å—Ç–≤–∏—è"
												: ``
										}`
							}`
				}\n<b>‚Ä¢ ${systemData.newRequestsToday}</b> ${
					(systemData.newRequestsToday >= 5 &&
						systemData.newRequestsToday <= 20) ||
					(systemData.newRequestsToday % 10 >= 5 &&
						systemData.newRequestsToday % 10 <= 9) ||
					systemData.newRequestsToday % 10 == 0
						? "–∑–∞—è–≤–æ–∫"
						: `${
								systemData.newRequestsToday % 10 == 1
									? "–∑–∞—è–≤–∫–∞"
									: `${
											systemData.newRequestsToday % 10 >= 2 &&
											systemData.newRequestsToday % 10 <= 4
												? "–∑–∞—è–≤–∫–∏"
												: ``
										}`
							}`
				}\n<b>‚Ä¢ ${systemData.newFeedbacksToday}</b> ${
					(systemData.newFeedbacksToday >= 5 &&
						systemData.newFeedbacksToday <= 20) ||
					(systemData.newFeedbacksToday % 10 >= 5 &&
						systemData.newFeedbacksToday % 10 <= 9) ||
					systemData.newFeedbacksToday % 10 == 0
						? "–æ—Ç–∑—ã–≤–æ–≤"
						: `${
								systemData.newFeedbacksToday % 10 == 1
									? "–æ—Ç–∑—ã–≤"
									: `${
											systemData.newFeedbacksToday % 10 >= 2 &&
											systemData.newFeedbacksToday % 10 <= 4
												? "–æ—Ç–∑—ã–≤–∞"
												: ``
										}`
							}`
				}\n\n<b>–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b>\n<b>‚Ä¢ ${
					usersData.filter((obj) => obj.registrationIsOver).length
				} / ${usersData.length}</b> –∫–ª–∏–µ–Ω—Ç–æ–≤\n<b>‚Ä¢ ${
					systemData.activityAllTime
				}</b> ${
					(systemData.activityAllTime >= 5 &&
						systemData.activityAllTime <= 20) ||
					(systemData.activityAllTime % 10 >= 5 &&
						systemData.activityAllTime % 10 <= 9) ||
					systemData.activityAllTime % 10 == 0
						? "–¥–µ–π—Å—Ç–≤–∏–π"
						: `${
								systemData.activityAllTime % 10 == 1
									? "–¥–µ–π—Å—Ç–≤–∏–µ"
									: `${
											systemData.activityAllTime % 10 >= 2 &&
											systemData.activityAllTime % 10 <= 4
												? "–¥–µ–π—Å—Ç–≤–∏—è"
												: ``
										}`
							}`
				}\n<b>‚Ä¢ ${systemData.requestsAllTime}</b> ${
					(systemData.requestsAllTime >= 5 &&
						systemData.requestsAllTime <= 20) ||
					(systemData.requestsAllTime % 10 >= 5 &&
						systemData.requestsAllTime % 10 <= 9) ||
					systemData.requestsAllTime % 10 == 0
						? "–∑–∞—è–≤–æ–∫"
						: `${
								systemData.requestsAllTime % 10 == 1
									? "–∑–∞—è–≤–∫–∞"
									: `${
											systemData.requestsAllTime % 10 >= 2 &&
											systemData.requestsAllTime % 10 <= 4
												? "–∑–∞—è–≤–∫–∏"
												: ``
										}`
							}`
				}\n<b>‚Ä¢ ${systemData.feedbacksAllTime}</b> ${
					(systemData.feedbacksAllTime >= 5 &&
						systemData.feedbacksAllTime <= 20) ||
					(systemData.feedbacksAllTime % 10 >= 5 &&
						systemData.feedbacksAllTime % 10 <= 9) ||
					systemData.feedbacksAllTime % 10 == 0
						? "–æ—Ç–∑—ã–≤–æ–≤"
						: `${
								systemData.feedbacksAllTime % 10 == 1
									? "–æ—Ç–∑—ã–≤"
									: `${
											systemData.feedbacksAllTime % 10 >= 2 &&
											systemData.feedbacksAllTime % 10 <= 4
												? "–æ—Ç–∑—ã–≤–∞"
												: ``
										}`
							}`
				}`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
								{
									text: "–û–±–Ω–æ–≤–∏—Ç—åüîÑÔ∏è",
									callback_data: "statisticListAdmin",
								},
							],
						],
					},
				}
			);
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	}
}

async function editCatalogOfServices(chatId) {
	if (chatId == jackId || chatId == qu1z3xId) {
		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		try {
			await bot.editMessageText(
				`<b><i>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥ üõí</i></b>\n\n`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" }],
						],
					},
				}
			);
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	}
}

async function alertsAdmin(
	chatId,
	alertId,
	numOfStage = 1,
	blockingOfSending = true
) {
	if (chatId == jackId || chatId == qu1z3xId) {
		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		let dataAboutAlert;
		if (systemData.alertsData)
			dataAboutAlert = systemData.alertsData.find(
				(obj) => obj.alertId == dataAboutUser.currentAlertId
			);

		dataAboutUser.userAction = `alertsAdmin${numOfStage}`;

		try {
			if (alertId && systemData.alertsData) {
				dataAboutUser.currentAlertId = alertId;
				numOfStage = 2;

				dataAboutAlert = systemData.alertsData.find(
					(obj) => obj.alertId == dataAboutUser.currentAlertId
				);
			}

			switch (numOfStage) {
				case 1:
					await bot.editMessageText(
						`<i><b>üìß –ê–ª–µ—Ä—Ç—ã üì£\n\n‚ùó${usersData.length} ${
							(usersData.length % 100 >= 5 &&
								usersData.length % 100 <= 20) ||
							(usersData.length % 10 >= 5 &&
								usersData.length % 10 <= 9) ||
							usersData.length % 10 == 0
								? "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> –ø–æ–ª—É—á–∞—Ç"
								: `${
										usersData.length % 10 == 1
											? "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> –ø–æ–ª—É—á–∏—Ç"
											: `${
													usersData.length % 10 >= 2 &&
													usersData.length % 10 <= 4
														? "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> –ø–æ–ª—É—á–∞—Ç"
														: `</b>`
												}`
									}`
						} –æ–±—å—è–≤–ª–µ–Ω–∏–µ‚ùó</i>\n\n<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∏–∂–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ! üòâ</b>`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId)
								.messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
										{
											text:
												dataAboutAlert &&
												dataAboutUser.currentAlertId &&
												!dataAboutAlert.wasSend
													? `–ß–µ—Ä–Ω–æ–≤–∏–∫ ‚Ü©Ô∏è`
													: dataAboutAlert &&
														  dataAboutUser.currentAlertId &&
														  dataAboutAlert.wasSend
														? `–ü—Ä–µ–¥—ã–¥—É—â–∏–π ‚Ü©Ô∏è`
														: ``,
											callback_data: `alertWithId${dataAboutUser.currentAlertId}`,
										},
									],
								],
							},
						}
					);
					break;
				case 2:
					await bot.editMessageText(
						`<b><i>üìß –ê–ª–µ—Ä—Ç—ã ‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üì£</i>\n\n–î–∞–Ω–Ω—ã–µ –æ–± –æ–±—å—è–≤–ª–µ–Ω–∏–∏:</b><blockquote><b>–¢–µ–∫—Å—Ç: ${
							dataAboutAlert.text
								? `‚úÖ ("</b>${truncateString(
										dataAboutAlert.text,
										10
									)}<b>") <a href="https://t.me/${BotName}/?start=alertsAdminResetText">‚ùå</a>`
								: "</b>–ù–µ—Ç<b>"
						}\n–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${
							dataAboutAlert.entities
								? `‚úÖ (${dataAboutAlert.entities.length}—à—Ç) <a href="https://t.me/${BotName}/?start=alertsAdminResetEntities">‚ùå</a>`
								: "</b>–ù–µ—Ç<b>"
						} \n–ú–µ–¥–∏–∞: ${
							dataAboutAlert.media
								? `‚úÖ (Id:</b>${truncateString(
										dataAboutAlert.media,
										10
									)}<b>) <a href="https://t.me/${BotName}/?start=alertsAdminResetMedia">‚ùå</a>`
								: "</b>–ù–µ—Ç<b>"
						}\n–ö–Ω–æ–ø–∫–∏: ${
							dataAboutAlert.buttons
								? `‚úÖ (${
										dataAboutAlert.buttons.flat().length
									}—à—Ç) <a href="https://t.me/${BotName}/?start=alertsAdminResetButtons">‚ùå</a>`
								: "</b>–ù–µ—Ç<b>"
						}</b></blockquote>\n<b>–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:</b><blockquote><b>‚Ä¢ –ú–µ–¥–∏–∞</b>\n–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –Ω–µ —Ñ–∞–π–ª–æ–º\n\n<b>‚Ä¢ –ö–Ω–æ–ø–∫–∏</b>\n<code>–ù–∞–¥–ø–∏—Å—å ^ callback_data ; –í—ã–π—Ç–∏ ^ exit\n–ù–∞—à —Å–∞–π—Ç ^ https://digfusion.ru</code></blockquote><b>${
							!dataAboutAlert.text && !dataAboutAlert.media
								? `‚ùó–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚õîÔ∏è`
								: `–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—å—è–≤–ª–µ–Ω–∏—è! ü§ó`
						}</b>`,
						{
							chat_id: chatId,
							parse_mode: "HTML",
							message_id: usersData.find((obj) => obj.chatId == chatId)
								.messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text:
												!dataAboutAlert.text &&
												!dataAboutAlert.media
													? "–ù–µ–ª—å–∑—è ‚õîÔ∏è"
													: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–Ω–æ–µ üîé",
											callback_data:
												!dataAboutAlert.text &&
												!dataAboutAlert.media
													? "-"
													: "alertsAdmin3",
										},
									],
									[
										{
											text: "‚¨ÖÔ∏è–í—ã–π—Ç–∏",
											callback_data:
												!dataAboutAlert.text &&
												!dataAboutAlert.media
													? "deleteAlert"
													: "alertsAdmin5",
										},
										{
											text: blockingOfSending
												? ``
												: !dataAboutAlert.text &&
													  !dataAboutAlert.media
													? "–ù–µ–ª—å–∑—è ‚õîÔ∏è"
													: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ`,
											callback_data:
												!dataAboutAlert.text &&
												!dataAboutAlert.media
													? "-"
													: "alertsAdmin4",
										},
									],
								],
							},
						}
					);
					break;
				case 3:
					sendAlert(chatId, dataAboutAlert, true);

					alertsAdmin(chatId, null, 2, false);
					break;
				case 4:
					dataAboutAlert.wasSend = true;
					dataAboutAlert.isCreated = true;

					for (let i = 0; i < usersData.length; i++) {
						// if (usersData[i].chatId != chatId)
						sendAlert(usersData[i].chatId, dataAboutAlert);
					}

					await bot.editMessageText(
						`<b><i>üìß –ê–ª–µ—Ä—Ç—ã üì£</i>\n\n–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üòâ</b>`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId)
								.messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
										{ text: "–ï—â–µ ‚ûï", callback_data: "alertsAdmin1" },
									],
								],
							},
						}
					);

					break;

				case 5:
					await bot.editMessageText(
						`<b><i>üìß –ê–ª–µ—Ä—Ç—ã ‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üì£</i>\n\n–¢–µ–∫—É—â–µ–µ –¥–∞–Ω–Ω—ã–µ:</b><blockquote><b>–¢–µ–∫—Å—Ç: ${
							dataAboutAlert.text
								? `‚úÖ ("</b>${truncateString(
										dataAboutAlert.text,
										10
									)}<b>")`
								: "</b>–ù–µ—Ç<b>"
						}\n–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${
							dataAboutAlert.entities
								? `‚úÖ (${dataAboutAlert.entities.length}—à—Ç)`
								: "</b>–ù–µ—Ç<b>"
						} \n–ú–µ–¥–∏–∞: ${
							dataAboutAlert.media
								? `‚úÖ (Id:</b>${truncateString(
										dataAboutAlert.media,
										10
									)}<b>)`
								: "</b>–ù–µ—Ç<b>"
						}\n–ö–Ω–æ–ø–∫–∏: ${
							dataAboutAlert.buttons
								? `‚úÖ (${dataAboutAlert.buttons.flat().length}—à—Ç)`
								: "</b>–ù–µ—Ç<b>"
						}</b></blockquote>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ <b>–ø–æ–∫–∏–Ω—É—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b> –∏ <b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ?</b> ü§î`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId)
								.messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: "–£–¥–∞–ª–∏—Ç—å ‚ùå",
											callback_data: `deleteAlert`,
										},
										{
											text: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ",
											callback_data: `adminMenu`,
										},
									],
									[
										{
											text: "‚¨ÖÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è",
											callback_data: `alertsAdmin2`,
										},
									],
								],
							},
						}
					);
					break;
			}
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	}
}

async function sendAlert(
	certainChatId,
	dataAboutAlert = null,
	deleteButtonIsActive = false
) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == certainChatId);
	try {
		let buttons;

		console.log(buttons);
		if (dataAboutAlert) {
			buttons = dataAboutAlert.buttons || [];

			if (deleteButtonIsActive)
				buttons.push([
					{
						text: "‚ùå",
						callback_data: `-`,
					},
				]);

			if (dataAboutAlert.media) {
				await bot
					.sendPhoto(dataAboutUser.chatId, dataAboutAlert.media, {
						caption: dataAboutAlert.text || null,
						caption_entities: dataAboutAlert.entities,
						// show_caption_above_media: false,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: buttons || [[]],
						},
					})
					.then((message) => {
						dataAboutUser.messageIdOther = message.message_id;
					});
			} else {
				await bot
					.sendMessage(dataAboutUser.chatId, dataAboutAlert.text, {
						entities: dataAboutAlert.entities || null,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: buttons || [[]],
						},
					})
					.then((message) => {
						dataAboutUser.messageIdOther = message.message_id;
					});
			}
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(certainChatId, `${String(error)}`);
	}
}

async function StartAll() {
	if (TOKEN == config.TOKENs[1]) {
		BotName = "digfusionbot";
		console.log("1");

		get(dataRef).then((snapshot) => {
			if (snapshot.exists()) {
				const dataFromDB = snapshot.val();
				usersData = dataFromDB.usersData || [];
				systemData = dataFromDB.systemData || [];
				console.log("DB is got");
			}
		});
	} else if (TOKEN == config.TOKENs[0]) {
		BotName = "digtestingbot";

		// if (
		// 	fs.readFileSync("supportiveDB.json") != "[]" &&
		// 	fs.readFileSync("supportiveDB.json") != ""
		// ) {
		// let dataFromDB = JSON.parse(fs.readFileSync("supportiveDB.json"));
		// –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø
		// }
	}

	bot.on("contact", (message) => {
		const chatId = message.chat.id;
		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		if (dataAboutUser && dataAboutUser.userAction == "firstMeeting4") {
			dataAboutUser.phoneNumber = message.contact.phone_number;
			menuHome(chatId);

			try {
				bot.deleteMessage(chatId, dataAboutUser.messageIdOther);
				bot.deleteMessage(chatId, message.message_id);
			} catch (error) {}
		}
	});

	bot.on("photo", (message) => {
		const chatId = message.chat.id;
		const fileId = message.photo[message.photo.length - 1].file_id; // file_id —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ
		const text = message.caption || null;
		const entities = message.caption_entities || null;

		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		if (dataAboutUser) {
			if (
				(dataAboutUser.userAction == "alertsAdmin1" ||
					dataAboutUser.userAction == "alertsAdmin2") &&
				(chatId == jackId || chatId == qu1z3xId)
			) {
				let dataAboutAlert;
				if (systemData.alertsData)
					dataAboutAlert = systemData.alertsData.find(
						(obj) => obj.alertId == dataAboutUser.currentAlertId
					);

				if (dataAboutAlert) {
					dataAboutAlert.media = fileId;
				} else {
					let isUnique = false;
					while (!isUnique) {
						rndId = Math.floor(Math.random() * 9999);
						isUnique = true;

						if (systemData.alertsData) {
							for (let i = 0; i < systemData.alertsData.length; i++) {
								if (systemData.alertsData[i])
									if (systemData.alertsData[i].alertId === rndId) {
										isUnique = false;
										break;
									}
								if (!isUnique) break;
							}
						} else break;
					}
					if (!systemData.alertsData) {
						systemData.alertsData = [];
					}

					systemData.alertsData.push({
						text: text || null,
						entities: entities || null,
						media: fileId,
						buttons: null,

						creationDate: `${new Date()
							.getDate()
							.toString()
							.padStart(2, "0")}.${(new Date().getMonth() + 1)
							.toString()
							.padStart(2, "0")}.${(new Date().getFullYear() % 100)
							.toString()
							.padStart(2, "0")}`,
						date: new Date(),

						wasSend: false,
						isCreated: false,
						alertId: rndId,
					});

					dataAboutUser.currentAlertId = rndId;
				}

				alertsAdmin(chatId, null, 2);
			}
		}

		bot.deleteMessage(chatId, message.message_id);
	});

	bot.on("text", async (message) => {
		const chatId = message.chat.id;
		let text = message.text;
		const entities = message.entities;

		let dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		try {
			if (!usersData.find((obj) => obj.chatId === chatId)) {
				usersData.push({
					chatId: chatId,
					login: message.from.first_name,
					phoneNumber: null,
					userStatus: "–ö–ª–∏–µ–Ω—Ç üôÇ",
					messageId: null,
					userAction: null,
					canWriteFeedbacks: false,

					requestsData: [],
					feedbacksData: [],

					messageIdOther: null,
					telegramFirstName: message.from.first_name,
					supportiveCount: null,
					supportiveCount2: null,
					registrationIsOver: false,
					registrationDate: `${new Date()
						.getDate()
						.toString()
						.padStart(2, "0")}.${(new Date().getMonth() + 1)
						.toString()
						.padStart(2, "0")}.${(new Date().getFullYear() % 100)
						.toString()
						.padStart(2, "0")}`,
					date: new Date(),
				});

				++systemData.newClientsToday;
				dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
			}

			if (dataAboutUser && !dataAboutUser.inBlackList) {
				if (
					dataAboutUser.userAction == "firstMeeting3" &&
					Array.from(text)[0] != "/"
				) {
					dataAboutUser.login = text;

					firstMeeting(chatId, 4);
				}

				if (
					dataAboutUser.userAction == "alertsAdmin2" &&
					(chatId == jackId || chatId == qu1z3xId) &&
					text.includes("^")
				) {
					let buttons = text
						.split("\n")
						.map((row) => row.trim())
						.filter((row) => row.length > 0)
						.map((row) => {
							const buttonsRows = [];
							row.split(";").forEach((col) => {
								const [text, callback_data] = col
									.split("^")
									.map((item) => item.trim());
								if (text && callback_data) {
									if (callback_data.includes(`https://`)) {
										buttonsRows.push({
											text: text,
											url: callback_data,
										});
									} else {
										buttonsRows.push({
											text: text,
											callback_data: callback_data,
										});
									}
								}
							});
							return buttonsRows;
						});
					if (systemData.alertsData)
						systemData.alertsData.find(
							(obj) => obj.alertId == dataAboutUser.currentAlertId
						).buttons = buttons;

					alertsAdmin(chatId, null, 2);
				}
				if (
					(dataAboutUser.userAction == "alertsAdmin1" ||
						dataAboutUser.userAction == "alertsAdmin2") &&
					(chatId == jackId || chatId == qu1z3xId) &&
					Array.from(text)[0] != "/" &&
					!text.includes("^")
				) {
					let dataAboutAlert;
					if (systemData.alertsData)
						dataAboutAlert = systemData.alertsData.find(
							(obj) => obj.alertId == dataAboutUser.currentAlertId
						);

					if (dataAboutAlert) {
						dataAboutAlert.text = text;
						dataAboutAlert.entities = entities;
					} else {
						let isUnique = false;
						while (!isUnique) {
							rndId = Math.floor(Math.random() * 9999);
							isUnique = true;

							if (systemData.alertsData) {
								for (let i = 0; i < systemData.alertsData.length; i++) {
									if (systemData.alertsData[i])
										if (systemData.alertsData[i].alertId === rndId) {
											isUnique = false;
											break;
										}
									if (!isUnique) break;
								}
							} else break;
						}

						if (!systemData.alertsData) {
							systemData.alertsData = [];
						}

						systemData.alertsData.push({
							text: text,
							entities: entities,
							media: null,
							buttons: null,

							creationDate: `${new Date()
								.getDate()
								.toString()
								.padStart(2, "0")}.${(new Date().getMonth() + 1)
								.toString()
								.padStart(2, "0")}.${(new Date().getFullYear() % 100)
								.toString()
								.padStart(2, "0")}`,
							date: new Date(),

							wasSend: false,
							isCreated: false,
							alertId: rndId,
						});

						dataAboutUser.currentAlertId = rndId;
					}

					alertsAdmin(chatId, null, 2);
				}

				if (
					text.includes("/start showNavigationListInMenuHome") ||
					text.includes("/start hideNavigationListInMenuHome")
				) {
					match = text.match(/^\/start (.*)NavigationListInMenuHome$/);

					match[1] == "show"
						? menuHome(chatId, true)
						: match[1] == "hide"
							? menuHome(chatId, false)
							: null;
				}

				if (text.includes("/start catalogOfServices")) {
					match = text.match(/^\/start catalogOfServices(\d+)$/);

					catalogOfServices(chatId, match[1]);
				}

				if (text.includes("/start consultationOnService")) {
					match = text.match(
						/^\/start consultationOnService(\d+)ForUserWithName(.*)$/
					);

					dataAboutUser.selectedService = match[1];
					dataAboutUser.login = match[2];

					if (!dataAboutUser.messageId) {
						await bot
							.sendMessage(chatId, "„Ö§")
							.then(
								(message) =>
									(dataAboutUser.messageId = message.message_id)
							);
					}

					consultationOnService(chatId, 1, match[1]);
				}

				if (
					dataAboutUser.userAction == "writeFeedbacks1" &&
					Array.from(text)[0] != "/"
				) {
					let isUnique = false;
					while (!isUnique) {
						rndId = Math.floor(Math.random() * 9999);
						isUnique = true;

						if (usersData) {
							for (let i = 0; i < usersData.length; i++) {
								if (usersData[i].feedbacksData)
									for (
										let j = 0;
										j < usersData[i].feedbacksData.length;
										j++
									) {
										if (
											usersData[i].feedbacksData[j].feedbackId ===
											rndId
										) {
											isUnique = false;
											break;
										}
									}
								if (!isUnique) break;
							}
						} else break;
					}

					if (!dataAboutUser.feedbacksData)
						dataAboutUser.feedbacksData = [];

					if (dataAboutUser.feedbacksData && dataAboutUser.requestsData)
						dataAboutUser.feedbacksData.push({
							from: dataAboutUser.login,
							serviceNum: dataAboutUser.requestsData.at(-1).serviceNum,

							opinionRating: null,
							feedbackText: text,
							productLink: null,

							creationTime: `${String(new Date().getHours()).padStart(
								2,
								"0"
							)}:${String(new Date().getMinutes()).padStart(2, "0")}`,
							creationDate: `${new Date()
								.getDate()
								.toString()
								.padStart(2, "0")}.${(new Date().getMonth() + 1)
								.toString()
								.padStart(2, "0")}.${(new Date().getFullYear() % 100)
								.toString()
								.padStart(2, "0")}`,
							date: new Date(),

							feedbackId: rndId,
							isVerified: false,
							isCreated: false,
						});

					++systemData.newFeedbacksToday;

					dataAboutUser.currentFeedbackId = rndId;

					writeFeedbacks(chatId, 2);
				}

				if (
					dataAboutUser.userAction == "writeFeedbacks2" &&
					text.includes("https://t.me/") &&
					Array.from(text)[0] != "/" &&
					dataAboutUser.feedbacksData
				) {
					dataAboutUser.feedbacksData.find(
						(obj) => obj.feedbackId == dataAboutUser.currentFeedbackId
					).productLink = text;

					writeFeedbacks(chatId, 2);
				}

				if (text.includes("/start feedbackWithId")) {
					match = text.match(/^\/start feedbackWithId(\d+)$/);

					feedbacksList(chatId, null, parseInt(match[1]));
				}

				if (
					dataAboutUser.userAction == "editLogin" &&
					text != dataAboutUser.login &&
					Array.from(text)[0] != "/"
				) {
					dataAboutUser.supportiveCount = text;
					settings(chatId, true, true);
				}

				if (
					dataAboutUser.userAction == "dialogBuilder" &&
					usersData.find((obj) => obj.chatId == parseInt(text))
				) {
					clientChatId = parseInt(text);

					dialogBuilder(chatId, null);
				}

				if (
					(dataAboutUser.userAction == "requestsList1" ||
						dataAboutUser.userAction == "requestsList2") &&
					dataAboutUser.requestsData &&
					dataAboutUser.requestsData.find(
						(obj) => obj.requestId == parseInt(text)
					)
				) {
					requestsList(chatId, null, parseInt(text));
				}

				if (text.includes("/start requestWithId")) {
					match = text.match(/^\/start requestWithId(\d+)$/);

					requestsList(chatId, null, parseInt(match[1]));
				}

				if (
					dataAboutUser.userAction == "registryList" &&
					usersData.find((obj) => obj.chatId == parseInt(text))
				) {
					registryList(chatId, null, parseInt(text));
				}

				if (
					text.includes("/start moreAboutUserWithId") &&
					(chatId == jackId || chatId == qu1z3xId)
				) {
					match = text.match(/^\/start moreAboutUserWithId(\d+)$/);

					registryList(chatId, null, parseInt(match[1]));
				}

				if (text.includes(`/start alertsAdminReset`)) {
					match = text.match(/^\/start alertsAdminReset(.*)$/);

					let dataAboutAlert;
					if (systemData.alertsData)
						dataAboutAlert = systemData.alertsData.find(
							(obj) => obj.alertId == dataAboutUser.currentAlertId
						);

					switch (match[1]) {
						case "Text":
							console.log(2);

							dataAboutAlert.text = null;
							dataAboutAlert.entities = null;
							break;
						case "Entities":
							dataAboutAlert.entities = null;
							break;
						case "Media":
							dataAboutAlert.media = null;
							break;
						case "Buttons":
							dataAboutAlert.buttons = null;
							break;
					}

					await alertsAdmin(chatId, null, 2);
				}

				if (
					text == "/catalog" ||
					text == "/consultation" ||
					text == "/profile"
				) {
					if (dataAboutUser.registrationIsOver) {
						switch (text) {
							case "/catalog":
								catalogOfServices(chatId);

								break;
							case "/consultation":
								consultation(chatId);
								break;
							case "/profile":
								settings(chatId);
								break;
						}
					} else {
					}
				}

				switch (text) {
					case "/start":
						try {
							bot.deleteMessage(chatId, dataAboutUser.messageId);
						} catch (error) {}
						await bot
							.sendMessage(chatId, "„Ö§")
							.then(
								(message) =>
									(dataAboutUser.messageId = message.message_id)
							);

						firstMeeting(chatId);
						break;
					case "/restart":
						try {
							bot.deleteMessage(chatId, dataAboutUser.messageId);
						} catch (error) {}

						await bot
							.sendMessage(chatId, "„Ö§")
							.then(
								(message) =>
									(dataAboutUser.messageId = message.message_id)
							);

						if (
							chatId == jackId ||
							chatId == qu1z3xId ||
							dataAboutUser.registrationIsOver
						) {
							menuHome(chatId);
						} else if (!dataAboutUser.registrationIsOver) {
							firstMeeting(chatId);
						}
						break;
					case "–´–µ":
					case "—ã–µ":
					case "st":
					case "St":
						if (chatId == jackId || chatId == qu1z3xId) {
							try {
								bot.deleteMessage(chatId, dataAboutUser.messageId);
							} catch (error) {}

							await bot
								.sendMessage(chatId, "„Ö§")
								.then(
									(message) =>
										(dataAboutUser.messageId = message.message_id)
								);
							menuHome(chatId);
						}
						break;
					case "/start ideasForProjects":
						ideasForProjects(chatId);
						break;
					case "/start myFeedbacks":
						feedbacksList(chatId, 2);
						break;
					case "/start editLogin":
						settings(chatId, true);
						break;
					case "/start moreAboutUserStatus":
						userStatusInfo(chatId);
						break;
					case "/start moreAboutUs":
						moreAboutUs(chatId);
						break;
					case "/start myRequest":
						requestsList(chatId, null, null, true);
						break;
					case "/start myRequestsHistory":
						requestsList(chatId, 4);
						break;
					case "/data":
						if (chatId == jackId || chatId == qu1z3xId) {
							const dataToSend = {
								usersData,
								systemData,
							};
							sendDataAboutDataBase(dataToSend);
						}
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
				}
			}

			bot.deleteMessage(chatId, message.message_id);

			++systemData.activityToday;
			++systemData.activityAllTime;

			if (chatId != qu1z3xId && chatId != jackId) {
				sendDataAboutText(chatId, dataAboutUser.login, text);
			}
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	});

	bot.on("callback_query", (query) => {
		const chatId = query.message.chat.id;
		const data = query.data;

		let dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		try {
			if (!dataAboutUser) {
				usersData.push({
					chatId: chatId,
					login: query.from.first_name,
					phoneNumber: null,
					userStatus: "–ö–ª–∏–µ–Ω—Ç üôÇ",
					messageId: query.message.message_id,
					userAction: null,
					canWriteFeedbacks: false,

					requestsData: [],
					feedbacksData: [],

					messageIdOther: null,
					telegramFirstName: query.from.first_name,
					supportiveCount: null,
					supportiveCount2: null,
					registrationIsOver: false,
					registrationDate: `${new Date()
						.getDate()
						.toString()
						.padStart(2, "0")}.${(new Date().getMonth() + 1)
						.toString()
						.padStart(2, "0")}.${(new Date().getFullYear() % 100)
						.toString()
						.padStart(2, "0")}`,
					date: new Date(),
				});

				++systemData.newClientsToday;
				dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
			}

			if (
				dataAboutUser &&
				query.message.message_id != dataAboutUser.messageIdOther
			) {
				dataAboutUser.messageId = query.message.message_id;
			}

			if (dataAboutUser && !dataAboutUser.inBlackList) {
				if (data.includes("firstMeeting")) {
					match = data.match(/^firstMeeting(\d+)$/);

					firstMeeting(chatId, parseInt(match[1]));
				}

				if (
					data.includes("nextServiceNum") ||
					data.includes("previousServiceNum")
				) {
					match = data.match(/^(.*)ServiceNum$/);

					if (dataAboutUser.supportiveCount == 4 && match[1] == "next") {
						dataAboutUser.supportiveCount = 1;
					} else if (
						dataAboutUser.supportiveCount == 1 &&
						match[1] == "previous"
					) {
						dataAboutUser.supportiveCount = 4;
					} else {
						match[1] == "next"
							? dataAboutUser.supportiveCount++
							: match[1] == "previous"
								? dataAboutUser.supportiveCount--
								: "";
					}

					catalogOfServices(chatId, dataAboutUser.supportiveCount);
				}

				if (data.includes("warning–°onsultationOnService")) {
					match = data.match(/^warning–°onsultationOnService(\d+)$/);

					if (
						dataAboutUser.selectedService == parseInt(match[1]) &&
						dataAboutUser.requestsData &&
						dataAboutUser.requestsData.at(-1).isActive
					) {
						consultation(chatId);
					} else {
						consultationOnService(chatId, 1, parseInt(match[1]));
					}
				}

				if (data.includes("consultationOnService")) {
					match = data.match(/^consultationOnService(\d+)$/);

					dataAboutUser.selectedService = parseInt(match[1]);
					consultationOnService(chatId, 2);
				}

				if (data.includes("ourProjectsList")) {
					match = data.match(/^ourProjectsList(\d+)$/);

					ourProjectsList(chatId, parseInt(match[1]));
				}

				if (data.includes("moreAboutUs")) {
					match = data.match(/^moreAboutUs(\d+)$/);

					moreAboutUs(chatId, parseInt(match[1]));
				}

				if (data.includes("deleteFeedbackWithId")) {
					match = data.match(/^deleteFeedbackWithId(\d+)$/);

					let allFeedbacksData = [];
					usersData.forEach((user) => {
						if (user.feedbacksData)
							user.feedbacksData.forEach((feedback) => {
								allFeedbacksData.push(feedback);
							});
					});

					if (
						(chatId == jackId || chatId == qu1z3xId) &&
						allFeedbacksData &&
						allFeedbacksData.find(
							(obj) => obj.feedbackId == parseInt(match[1])
						)
					) {
						allFeedbacksData.splice(
							allFeedbacksData.indexOf(
								allFeedbacksData.find(
									(obj) => obj.feedbackId === parseInt(match[1])
								),
								1
							)
						);
					}

					feedbacksList(chatId, 1);
				}

				if (data.includes("unverifiedFeedbackWithId")) {
					match = data.match(/^unverifiedFeedbackWithId(\d+)$/);

					let allFeedbacksData = [];
					usersData.forEach((user) => {
						if (user.feedbacksData)
							user.feedbacksData.forEach((feedback) => {
								allFeedbacksData.push(feedback);
							});
					});

					if (
						(chatId == jackId || chatId == qu1z3xId) &&
						allFeedbacksData &&
						allFeedbacksData.find(
							(obj) => obj.feedbackId == parseInt(match[1])
						)
					) {
						allFeedbacksData.find(
							(obj) => obj.feedbackId == parseInt(match[1])
						).isVerified = false;
					}

					feedbacksList(chatId, null, parseInt(match[1]));
				} else if (data.includes("verifiedFeedbackWithId")) {
					match = data.match(/^verifiedFeedbackWithId(\d+)$/);

					let allFeedbacksData = [];
					usersData.forEach((user) => {
						if (user.feedbacksData)
							user.feedbacksData.forEach((feedback) => {
								allFeedbacksData.push(feedback);
							});
					});

					if (
						(chatId == jackId || chatId == qu1z3xId) &&
						allFeedbacksData &&
						allFeedbacksData.find(
							(obj) => obj.feedbackId == parseInt(match[1])
						)
					) {
						allFeedbacksData.find(
							(obj) => obj.feedbackId == parseInt(match[1])
						).isVerified = true;
					}
					feedbacksList(chatId, null, parseInt(match[1]));
				} else if (data.includes("setOpinionRating")) {
					match = data.match(/^setOpinionRating(\d+)$/);

					if (dataAboutUser.feedbacksData)
						dataAboutUser.feedbacksData.find(
							(obj) => obj.feedbackId == dataAboutUser.currentFeedbackId
						).opinionRating =
							match[1] == 1
								? "ü§¨"
								: match[1] == 2
									? "üò†"
									: match[1] == 3
										? "üòê"
										: match[1] == 4
											? "üòä"
											: match[1] == 5
												? "ü§©"
												: null;

					writeFeedbacks(chatId, 2);
				}

				if (data.includes("dialogBuilder")) {
					match = data.match(/^dialogBuilder(\d+)$/);

					dialogBuilder(chatId, parseInt(match[1]));
				}

				if (data.includes("requestsList")) {
					match = data.match(/^requestsList(\d+)$/);

					dataAboutUser.supportiveCount = 1;

					requestsList(chatId, parseInt(match[1]));
				}

				if (
					data.includes("previousPage") ||
					data.includes("nextPage") ||
					data.includes("firstPage")
				) {
					match = data.match(/^(.*)Page$/);

					if (
						match[1] == "previous" &&
						dataAboutUser.supportiveCount > 1
					) {
						--dataAboutUser.supportiveCount;
					} else if (match[1] == "next") {
						++dataAboutUser.supportiveCount;
					} else if (match[1] == "first") {
						dataAboutUser.supportiveCount = 1;
					}

					if (dataAboutUser.userAction == "feedbacksList1")
						feedbacksList(chatId, 1);
					else if (dataAboutUser.userAction == "feedbacksList2")
						feedbacksList(chatId, 2);
					else if (dataAboutUser.userAction == "requestsList1")
						requestsList(chatId, 1);
					else if (dataAboutUser.userAction == "requestsList2")
						requestsList(chatId, 2);
					else if (dataAboutUser.userAction == "registryList1")
						registryList(chatId, 1);
				}

				if (data.includes("requestWithId")) {
					match = data.match(/^requestWithId(\d+)$/);

					dataAboutUser.supportiveCount = 1;

					requestsList(chatId, null, parseInt(match[1]));
				}

				if (data.includes("deleteRequest")) {
					match = data.match(/^deleteRequest(.*)WithId(\d+)$/);

					let dataAbout–°ertainRequest;
					if (dataAboutUser.requestsData)
						dataAbout–°ertainRequest = dataAboutUser.requestsData.at(-1);

					if (match[1] == "Question")
						bot.editMessageText(
							`‚ùó<b>${
								dataAboutUser.login
							}, –≤–∞—à–∞ <a href="https://t.me/${BotName}/?start=myRequest">–∑–∞—è–≤–∫–∞ ‚Ññ${
								dataAbout–°ertainRequest.requestId
							}</a> –Ω–∞ —É—Å–ª—É–≥—É:\n\n${
								dataAbout–°ertainRequest.serviceNum
							}. ${
								catalogOfServicesText[
									dataAbout–°ertainRequest.serviceNum - 1
								].serviceName
							}\n</b><blockquote><b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> ${
								catalogOfServicesText[
									dataAbout–°ertainRequest.serviceNum - 1
								].moreAbout
							}\n\n<b>–¶–µ–Ω–∞:</b> ${
								catalogOfServicesText[
									dataAbout–°ertainRequest.serviceNum - 1
								].priceSentence
							} üí∞</blockquote>\n\n–í—ã <b>–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ</b> —Ö–æ—Ç–∏—Ç–µ <b><i>–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ</i> —É–¥–∞–ª–∏—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É?</b> ü§î`,
							{
								parse_mode: "html",
								chat_id: chatId,
								message_id: usersData.find(
									(obj) => obj.chatId == chatId
								).messageId,
								disable_web_page_preview: true,
								reply_markup: {
									inline_keyboard: [
										[
											{
												text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
												callback_data: `myRequest`,
											},
											{
												text: "–î–∞, —É–¥–∞–ª–∏—Ç—å‚ùå",
												callback_data: `deleteRequest100%WithId${parseInt(
													match[2]
												)}`,
											},
										],
									],
								},
							}
						);
					else if (match[1] == "100%") {
						let dataAboutUser–°ertainRequest;
						if (
							usersData.find(
								(obj) =>
									obj.requestsData &&
									obj.requestsData.find(
										(request) =>
											request.requestId == parseInt(match[2])
									)
							)
						) {
							dataAboutUser–°ertainRequest = usersData.find(
								(obj) =>
									obj.requestsData &&
									obj.requestsData.find(
										(request) =>
											request.requestId == parseInt(match[2])
									)
							);

							dataAboutUser–°ertainRequest.requestsData.splice(
								dataAboutUser–°ertainRequest.requestsData.indexOf(
									dataAboutUser–°ertainRequest.requestsData.find(
										(obj) => obj.requestId == parseInt(match[2])
									),
									1
								)
							);

							menuHome(chatId);
						}
					}
				}

				if (data.includes("buildDialogForUserWithId")) {
					match = data.match(/^buildDialogForUserWithId(\d+)$/);

					clientChatId = parseInt(match[1]);

					dialogBuilder(chatId, 1);
				}

				if (data.includes("toggleToActiveRequestWithId")) {
					if (chatId == jackId || chatId == qu1z3xId) {
						match = data.match(/^toggleToActiveRequestWithId(\d+)$/);

						const dataAboutUser–°ertainRequest = usersData.find(
							(obj) =>
								obj.requestsData &&
								obj.requestsData.find(
									(request) => request.requestId == parseInt(match[1])
								)
						);
						let dataAbout–°ertainRequest = null;
						if (dataAboutUser–°ertainRequest.requestsData)
							dataAbout–°ertainRequest =
								dataAboutUser–°ertainRequest.requestsData.find(
									(obj) => obj.requestId == parseInt(match[1])
								);

						dataAbout–°ertainRequest.isActive =
							!dataAbout–°ertainRequest.isActive;

						dataAboutUser–°ertainRequest.canWriteFeedbacks =
							!dataAbout–°ertainRequest.isActive;

						dataAboutUser.selectedService = null;

						if (!dataAbout–°ertainRequest.isActive) {
							bot.sendMessage(
								dataAboutUser–°ertainRequest.chatId,
								`<b>${dataAboutUser–°ertainRequest.login}, <a href="https://t.me/${BotName}/?start=myRequest">–∑–∞—è–≤–∫–∞ ‚Ññ${dataAbout–°ertainRequest.requestId}</a> —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! ‚úÖ</b>\n\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –æ –ø–æ–ª—É—á–µ–Ω–æ–π —Ä–∞–±–æ—Ç–µ üôè</i> \n\n<b>–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ! ‚ù§Ô∏è</b>`,
								{
									parse_mode: "HTML",
									disable_web_page_preview: true,
									reply_markup: {
										inline_keyboard: [
											[
												{
													text: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è",
													callback_data: "writeFeedbacks",
												},
											],
										],
									},
								}
							).then((message) => {
								dataAboutUser–°ertainRequest.messageIdOther =
									message.message_id;
							});
						} else {
							try {
								bot.deleteMessage(
									dataAboutUser–°ertainRequest.chatId,
									dataAboutUser–°ertainRequest.messageIdOther
								);
							} catch (error) {}
						}

						requestsList(chatId, null, parseInt(match[1]));
					}
				}

				if (
					data.includes("addToBlackListUserWithId") ||
					data.includes("deleteFromBlackListUserWithId")
				) {
					match = data.match(/^(.*)BlackListUserWithId(\d+)$/);

					const dataAboutClient =
						usersData.find((obj) => obj.chatId == parseInt(match[2])) ||
						null;

					if (match[1] == "addTo") {
						dataAboutClient.inBlackList = true;
					} else if (match[1] == "deleteFrom") {
						dataAboutClient.inBlackList = false;
					}

					registryList(chatId, null, parseInt(match[2]));
				}

				if (data.includes("alertsAdmin")) {
					match = data.match(/^alertsAdmin(\d+)$/);

					alertsAdmin(chatId, null, parseInt(match[1]));
				}

				if (data.includes("alertWithId")) {
					match = data.match(/^alertWithId(\d+)$/);

					alertsAdmin(chatId, parseInt(match[1]));
				}

				switch (data) {
					case "exit":
						menuHome(chatId);
						break;
					case "catalogOfServices":
						dataAboutUser.supportiveCount = 1;
						catalogOfServices(chatId);
						break;
					case "ideasForProjects":
						ideasForProjects(chatId);
						break;
					case "consultation":
						consultation(chatId);
						break;
					case "":
						break;
					case "moreAboutUs":
						moreAboutUs(chatId);
						break;
					case "feedbacksList":
						dataAboutUser.supportiveCount = 1;
						feedbacksList(chatId);
						break;
					case "writeFeedbacks":
						writeFeedbacks(chatId, 1);
						break;
					case "sendMyFeedback":
						if (dataAboutUser.feedbacksData)
							dataAboutUser.feedbacksData.find(
								(obj) =>
									obj.feedbackId == dataAboutUser.currentFeedbackId
							).isCreated = true;

						writeFeedbacks(chatId, 3);
						break;
					case "myFeedbacks":
						dataAboutUser.supportiveCount = 1;
						feedbacksList(chatId, 2);
						break;
					case "unverifiedFeedbacksAdmin":
						feedbacksList(chatId, 3);
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "myRequest":
						requestsList(chatId, null, null, true);
						break;
					case "settings":
						settings(chatId);
						break;
					case "resetLogin":
						dataAboutUser.login = dataAboutUser.telegramFirstName;

						bot.answerCallbackQuery(query.id, {
							text: `–í–∞—à —Å–±—Ä–æ—à–µ–Ω –Ω–∞\n¬´${dataAboutUser.login}¬ª üòâ`,
							show_alert: true,
						});

						settings(chatId);
						break;
					case "editLogin":
						dataAboutUser.login = dataAboutUser.supportiveCount;

						bot.answerCallbackQuery(query.id, {
							text: `–í–∞—à –ª–æ–≥–∏–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞\n¬´${dataAboutUser.supportiveCount}¬ª üòâ`,
							show_alert: true,
						});

						settings(chatId);
						break;
					case "":
						break;
					case "adminMenu":
						adminMenu(chatId);
						break;
					case "requestsDataAdmin":
						dataAboutUser.supportiveCount = 1;
						requestsList(chatId, 1);
						break;
					case "registryList1":
						registryList(chatId);
						break;
					case "registryDataAdmin":
						dataAboutUser.supportiveCount = 1;
						registryList(chatId);
						break;
					case "statisticListAdmin":
						statisticList(chatId);
						break;
					case "editCatalogOfServicesAdmin":
						editCatalogOfServices(chatId);
						break;
					case "":
						break;
					case "":
						break;
					case "":
						break;
					case "deleteAlert":
						if (
							systemData.alertsData.find(
								(obj) => obj.alertId == dataAboutUser.currentAlertId
							)
						) {
							systemData.alertsData.splice(
								systemData.alertsData.indexOf(
									systemData.alertsData.find(
										(obj) =>
											obj.alertId == dataAboutUser.currentAlertId
									),
									1
								)
							);

							dataAboutUser.currentAlertId = null;
							adminMenu(chatId);
						}
						break;
					case "deleteexcess":
						try {
							bot.deleteMessage(chatId, query.message.message_id);
						} catch (error) {}
						break;
				}

				if (query.message.message_id == dataAboutUser.messageIdOther) {
					try {
						bot.deleteMessage(chatId, query.message.message_id);
						dataAboutUser.messageIdOther = null;
					} catch (error) {}
				}
			} else if (dataAboutUser && dataAboutUser.inBlackList) {
				dataAboutUser.userAction = "inBlackList";

				bot.editMessageText(
					`<b>–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –æ–±—â–µ–Ω–∏–∏ —Å –Ω–∞–º–∏! ‚òπÔ∏è\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üóØÔ∏è</b>`,
					{
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						parse_mode: "html",
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{ text: "–û–±–Ω–æ–≤–∏—Ç—å üîÑÔ∏è", callback_data: "exit" },
									{
										text: "–°–≤—è–∑—å ‚úçÔ∏è",
										url: "https://t.me/digfusionsupport",
									},
								],
							],
						},
					}
				);
			}
			// else if (!dataAboutUser) {
			// 	bot.editMessageText(
			// 		`<b>–ú—ã —Ä–∞–∑–≤–µ –∑–Ω–∞–∫–æ–º—ã? ü§®\n</b>–ú–æ–∏ —Å–∏—Å—Ç–µ–º—ã –≤–∞—Å –Ω–µ –ø–æ–º–Ω—è—Ç...<b>\n\n<i>–ò–Ω–æ–≥–¥–∞ —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –º–∞—Å—à—Ç–∞–±–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! ‚òπÔ∏è</i>\n\n</b>–†–∞–∑ —É–∂ —Ç–∞–∫ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –≤—Å–µ —Å <b>—á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!</b> –ù–∞–∂–º–∏—Ç–µ - <b>/start</b> üòâ`,
			// 		{
			// 			chat_id: chatId,
			// 			message_id: query.message.message_id,
			// 			parse_mode: "html",
			// 			disable_web_page_preview: true,
			// 		}
			// 	);
			// }

			++systemData.activityToday;
			++systemData.activityAllTime;

			if (chatId != qu1z3xId && chatId != jackId) {
				sendDataAboutButton(chatId, dataAboutUser.login, data);
			}
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	});

	cron.schedule(`0 */5 * * *`, function () {
		// –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		try {
			if (TOKEN == config.TOKENs[1]) {
				set(dataRef, {
					usersData: usersData,
					systemData: systemData,
				});

				const dataToSend = {
					usersData,
					systemData,
				};

				sendDataAboutDataBase(dataToSend);
			}
		} catch (error) {}
	});

	cron.schedule(`1 0 * * *`, function () {
		systemData.activityToday = 0;
		systemData.newClientsToday = 0;
		systemData.newRequestsToday = 0;
		systemData.newFeedbacksToday = 0;
	});
}

StartAll();
